{
"Runtime":
{"sourcePackage":
                {
                "sourceCode":"","sourceCodeClassname":"Runtime","encoding":"base64","signature":""},"cguid":30001,"type":"Runtimes","version":"0.1","description":"DescriptionofRuntime","objectName":"Runtime","configuration":{},"runtimeType":"browser","hypertyCapabilities":{"mic":true,"camera":true,"sensor":false,"webrtc":true,"ortc":true},"protocolCapabilities":{"http":true,"https":true,"ws":true,"wss":true,"coap":false,"datachannel":false},
                "sourcePackageURL":"/sourcePackage",
                "language":"javascript",
                "signature":"",
                "messageSchemas":"",
                "dataObjects":[],
                "accessControlPolicy":"somePolicy"
                }
}

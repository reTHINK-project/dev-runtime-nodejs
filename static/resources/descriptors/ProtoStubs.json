{
  "default": {
    "cguid": 40001,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of VertxProtoStub2",
    "objectName": "VertxProtoStub2",
    "sourcePackageURL": "/sourcePackage",
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "VertxProtoStub2",
      "encoding": "base64",
      "signature": ""
    },
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "configuration": {
      "url": "wss://msg-node.hybroker.rethink.ptinovacao.pt/ws"
    },
    "constraints": "",
    "hypertyCapabilities": "",
    "protocolCapabilities": "",
    "policies": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "rethink.quobis.com": {
    "cguid": 40002,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of VertxProtoStub",
    "objectName": "VertxProtoStub",
    "sourcePackageURL": "/sourcePackage",
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "VertxProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "constraints": "",
    "hypertyCapabilities": "",
    "protocolCapabilities": "",
    "policies": "",
    "dataObjects": [],
    "configuration": {
      "url": "wss://msg-node.rethink.quobis.com/ws"
    },
    "accessControlPolicy": "somePolicy"
  },
  "MatrixProtoStub": {
    "cguid": "1",
    "type": "0",
    "version": "0.1",
    "description": "Description of MatrixProtoStub",
    "objectName": "MatrixProtoStub",
    "sourcePackageURL": "/sourcePackage",
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "MatrixProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "language": "Javascript ECMA5",
    "signature": "",
    "messageSchemas": "",
    "constraints": "",
    "hypertyCapabilities": "",
    "protocolCapabilities": "",
    "policies": "",
    "dataObjects": [],
    "configuration": {
      "homeserver": "matrix1.rethink",
      "messagingnode": "ws://localhost:8001/stub/connect"
    },
    "accessControlPolicy": "somePolicy"
  },
  "rethink.tlabscloud.com": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "MatrixProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 40003,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of MatrixProtoStub",
    "objectName": "MatrixProtoStub",
    "configuration": {
      "homeserver": "msg-node.rethink.tlabscloud.com",
      "messagingnode": "wss://msg-node.rethink.tlabscloud.com/stub/connect"
    },
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "hybroker.rethink.ptinovacao.pt": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "VertxProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 40004,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of VertxProtoStub",
    "objectName": "VertxProtoStub",
    "configuration": {
      "url": "wss://msg-node.hybroker.rethink.ptinovacao.pt/ws"
    },
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}

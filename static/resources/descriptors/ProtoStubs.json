{
  "default": {
    "cguid": "1",
    "type": "0",
    "version": "0.1",
    "description": "description of NodejsProtoStub",
    "objectName": "NodejsProtoStub",
    "sourcePackageURL": "/sourcePackage",
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09Im9iamVjdCImJnR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PSJmdW5jdGlvbiImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09InVuZGVmaW5lZCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT0idW5kZWZpbmVkIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuYWN0aXZhdGUgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIitvKyInIik7dGhyb3cgZi5jb2RlPSJNT0RVTEVfTk9UX0ZPVU5EIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChnbG9iYWwpewovLyBOb2RlIEpTIFByb3RvU3R1YgoKInVzZSBzdHJpY3QiOwoKIShmdW5jdGlvbiAodCkgewogIGlmICgib2JqZWN0IiA9PSB0eXBlb2YgZXhwb3J0cyAmJiAidW5kZWZpbmVkIiAhPSB0eXBlb2YgbW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IHQoKTtlbHNlIGlmICgiZnVuY3Rpb24iID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCkgZGVmaW5lKFtdLCB0KTtlbHNlIHsKICAgIHZhciBlO2UgPSAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIGdsb2JhbCA/IGdsb2JhbCA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBzZWxmID8gc2VsZiA6IHRoaXMsIGUuYWN0aXZhdGUgPSB0KCk7CiAgfQp9KShmdW5jdGlvbiAoKSB7CiAgdmFyIHQ7cmV0dXJuIChmdW5jdGlvbiBlKHQsIG4sIHIpIHsKICAgIGZ1bmN0aW9uIG8ocywgYSkgewogICAgICBpZiAoIW5bc10pIHsKICAgICAgICBpZiAoIXRbc10pIHsKICAgICAgICAgIHZhciBjID0gImZ1bmN0aW9uIiA9PSB0eXBlb2YgcmVxdWlyZSAmJiByZXF1aXJlO2lmICghYSAmJiBjKSByZXR1cm4gYyhzLCAhMCk7aWYgKGkpIHJldHVybiBpKHMsICEwKTt2YXIgcCA9IG5ldyBFcnJvcigiQ2Fubm90IGZpbmQgbW9kdWxlICciICsgcyArICInIik7dGhyb3cgKHAuY29kZSA9ICJNT0RVTEVfTk9UX0ZPVU5EIiwgcCk7CiAgICAgICAgfXZhciB1ID0gbltzXSA9IHsgZXhwb3J0czoge30gfTt0W3NdWzBdLmNhbGwodS5leHBvcnRzLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgdmFyIG4gPSB0W3NdWzFdW2VdO3JldHVybiBvKG4gPyBuIDogZSk7CiAgICAgICAgfSwgdSwgdS5leHBvcnRzLCBlLCB0LCBuLCByKTsKICAgICAgfXJldHVybiBuW3NdLmV4cG9ydHM7CiAgICB9Zm9yICh2YXIgaSA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIHJlcXVpcmUgJiYgcmVxdWlyZSwgcyA9IDA7IHMgPCByLmxlbmd0aDsgcysrKSBvKHJbc10pO3JldHVybiBvOwogIH0pKHsgMTogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIGZ1bmN0aW9uIHIodCwgZSwgbikgewogICAgICAgIGZ1bmN0aW9uIHIodCwgbykgewogICAgICAgICAgaWYgKHIuY291bnQgPD0gMCkgdGhyb3cgbmV3IEVycm9yKCJhZnRlciBjYWxsZWQgdG9vIG1hbnkgdGltZXMiKTstLXIuY291bnQsIHQgPyAoaSA9ICEwLCBlKHQpLCBlID0gbikgOiAwICE9PSByLmNvdW50IHx8IGkgfHwgZShudWxsLCBvKTsKICAgICAgICB9dmFyIGkgPSAhMTtyZXR1cm4gbiA9IG4gfHwgbywgci5jb3VudCA9IHQsIDAgPT09IHQgPyBlKCkgOiByOwogICAgICB9ZnVuY3Rpb24gbygpIHt9ZS5leHBvcnRzID0gcjsKICAgIH0sIHt9XSwgMjogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgICAgdmFyIHIgPSB0LmJ5dGVMZW5ndGg7aWYgKChlID0gZSB8fCAwLCBuID0gbiB8fCByLCB0LnNsaWNlKSkgcmV0dXJuIHQuc2xpY2UoZSwgbik7aWYgKCgwID4gZSAmJiAoZSArPSByKSwgMCA+IG4gJiYgKG4gKz0gciksIG4gPiByICYmIChuID0gciksIGUgPj0gciB8fCBlID49IG4gfHwgMCA9PT0gcikpIHJldHVybiBuZXcgQXJyYXlCdWZmZXIoMCk7Zm9yICh2YXIgbyA9IG5ldyBVaW50OEFycmF5KHQpLCBpID0gbmV3IFVpbnQ4QXJyYXkobiAtIGUpLCBzID0gZSwgYSA9IDA7IG4gPiBzOyBzKyssIGErKykgaVthXSA9IG9bc107cmV0dXJuIGkuYnVmZmVyOwogICAgICB9OwogICAgfSwge31dLCAzOiBbZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgZnVuY3Rpb24gcih0KSB7CiAgICAgICAgdCA9IHQgfHwge30sIHRoaXMubXMgPSB0Lm1pbiB8fCAxMDAsIHRoaXMubWF4ID0gdC5tYXggfHwgMWU0LCB0aGlzLmZhY3RvciA9IHQuZmFjdG9yIHx8IDIsIHRoaXMuaml0dGVyID0gdC5qaXR0ZXIgPiAwICYmIHQuaml0dGVyIDw9IDEgPyB0LmppdHRlciA6IDAsIHRoaXMuYXR0ZW1wdHMgPSAwOwogICAgICB9ZS5leHBvcnRzID0gciwgci5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHQgPSB0aGlzLm1zICogTWF0aC5wb3codGhpcy5mYWN0b3IsIHRoaXMuYXR0ZW1wdHMrKyk7aWYgKHRoaXMuaml0dGVyKSB7CiAgICAgICAgICB2YXIgZSA9IE1hdGgucmFuZG9tKCksCiAgICAgICAgICAgICAgbiA9IE1hdGguZmxvb3IoZSAqIHRoaXMuaml0dGVyICogdCk7dCA9IDAgPT0gKDEgJiBNYXRoLmZsb29yKDEwICogZSkpID8gdCAtIG4gOiB0ICsgbjsKICAgICAgICB9cmV0dXJuIDAgfCBNYXRoLm1pbih0LCB0aGlzLm1heCk7CiAgICAgIH0sIHIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHRoaXMuYXR0ZW1wdHMgPSAwOwogICAgICB9LCByLnByb3RvdHlwZS5zZXRNaW4gPSBmdW5jdGlvbiAodCkgewogICAgICAgIHRoaXMubXMgPSB0OwogICAgICB9LCByLnByb3RvdHlwZS5zZXRNYXggPSBmdW5jdGlvbiAodCkgewogICAgICAgIHRoaXMubWF4ID0gdDsKICAgICAgfSwgci5wcm90b3R5cGUuc2V0Sml0dGVyID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICB0aGlzLmppdHRlciA9IHQ7CiAgICAgIH07CiAgICB9LCB7fV0sIDQ6IFtmdW5jdGlvbiAodCwgZSwgbikgewogICAgICAhKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgInVzZSBzdHJpY3QiO24uZW5jb2RlID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciBuLAogICAgICAgICAgICAgIHIgPSBuZXcgVWludDhBcnJheShlKSwKICAgICAgICAgICAgICBvID0gci5sZW5ndGgsCiAgICAgICAgICAgICAgaSA9ICIiO2ZvciAobiA9IDA7IG8gPiBuOyBuICs9IDMpIGkgKz0gdFtyW25dID4+IDJdLCBpICs9IHRbKDMgJiByW25dKSA8PCA0IHwgcltuICsgMV0gPj4gNF0sIGkgKz0gdFsoMTUgJiByW24gKyAxXSkgPDwgMiB8IHJbbiArIDJdID4+IDZdLCBpICs9IHRbNjMgJiByW24gKyAyXV07cmV0dXJuIG8gJSAzID09PSAyID8gaSA9IGkuc3Vic3RyaW5nKDAsIGkubGVuZ3RoIC0gMSkgKyAiPSIgOiBvICUgMyA9PT0gMSAmJiAoaSA9IGkuc3Vic3RyaW5nKDAsIGkubGVuZ3RoIC0gMikgKyAiPT0iKSwgaTsKICAgICAgICB9LCBuLmRlY29kZSA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICB2YXIgbiwKICAgICAgICAgICAgICByLAogICAgICAgICAgICAgIG8sCiAgICAgICAgICAgICAgaSwKICAgICAgICAgICAgICBzLAogICAgICAgICAgICAgIGEgPSAuNzUgKiBlLmxlbmd0aCwKICAgICAgICAgICAgICBjID0gZS5sZW5ndGgsCiAgICAgICAgICAgICAgcCA9IDA7Ij0iID09PSBlW2UubGVuZ3RoIC0gMV0gJiYgKGEtLSwgIj0iID09PSBlW2UubGVuZ3RoIC0gMl0gJiYgYS0tKTt2YXIgdSA9IG5ldyBBcnJheUJ1ZmZlcihhKSwKICAgICAgICAgICAgICBmID0gbmV3IFVpbnQ4QXJyYXkodSk7Zm9yIChuID0gMDsgYyA+IG47IG4gKz0gNCkgciA9IHQuaW5kZXhPZihlW25dKSwgbyA9IHQuaW5kZXhPZihlW24gKyAxXSksIGkgPSB0LmluZGV4T2YoZVtuICsgMl0pLCBzID0gdC5pbmRleE9mKGVbbiArIDNdKSwgZltwKytdID0gciA8PCAyIHwgbyA+PiA0LCBmW3ArK10gPSAoMTUgJiBvKSA8PCA0IHwgaSA+PiAyLCBmW3ArK10gPSAoMyAmIGkpIDw8IDYgfCA2MyAmIHM7cmV0dXJuIHU7CiAgICAgICAgfTsKICAgICAgfSkoIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8iKTsKICAgIH0sIHt9XSwgNTogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIChmdW5jdGlvbiAodCkgewogICAgICAgIGZ1bmN0aW9uIG4odCkgewogICAgICAgICAgZm9yICh2YXIgZSA9IDA7IGUgPCB0Lmxlbmd0aDsgZSsrKSB7CiAgICAgICAgICAgIHZhciBuID0gdFtlXTtpZiAobi5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgewogICAgICAgICAgICAgIHZhciByID0gbi5idWZmZXI7aWYgKG4uYnl0ZUxlbmd0aCAhPT0gci5ieXRlTGVuZ3RoKSB7CiAgICAgICAgICAgICAgICB2YXIgbyA9IG5ldyBVaW50OEFycmF5KG4uYnl0ZUxlbmd0aCk7by5zZXQobmV3IFVpbnQ4QXJyYXkociwgbi5ieXRlT2Zmc2V0LCBuLmJ5dGVMZW5ndGgpKSwgciA9IG8uYnVmZmVyOwogICAgICAgICAgICAgIH10W2VdID0gcjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH1mdW5jdGlvbiByKHQsIGUpIHsKICAgICAgICAgIGUgPSBlIHx8IHt9O3ZhciByID0gbmV3IGkoKTtuKHQpO2ZvciAodmFyIG8gPSAwOyBvIDwgdC5sZW5ndGg7IG8rKykgci5hcHBlbmQodFtvXSk7cmV0dXJuIGUudHlwZSA/IHIuZ2V0QmxvYihlLnR5cGUpIDogci5nZXRCbG9iKCk7CiAgICAgICAgfWZ1bmN0aW9uIG8odCwgZSkgewogICAgICAgICAgcmV0dXJuIG4odCksIG5ldyBCbG9iKHQsIGUgfHwge30pOwogICAgICAgIH12YXIgaSA9IHQuQmxvYkJ1aWxkZXIgfHwgdC5XZWJLaXRCbG9iQnVpbGRlciB8fCB0Lk1TQmxvYkJ1aWxkZXIgfHwgdC5Nb3pCbG9iQnVpbGRlciwKICAgICAgICAgICAgcyA9IChmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICB2YXIgdCA9IG5ldyBCbG9iKFsiaGkiXSk7cmV0dXJuIDIgPT09IHQuc2l6ZTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgcmV0dXJuICExOwogICAgICAgICAgfQogICAgICAgIH0pKCksCiAgICAgICAgICAgIGEgPSBzICYmIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICB2YXIgdCA9IG5ldyBCbG9iKFtuZXcgVWludDhBcnJheShbMSwgMl0pXSk7cmV0dXJuIDIgPT09IHQuc2l6ZTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgcmV0dXJuICExOwogICAgICAgICAgfQogICAgICAgIH0pKCksCiAgICAgICAgICAgIGMgPSBpICYmIGkucHJvdG90eXBlLmFwcGVuZCAmJiBpLnByb3RvdHlwZS5nZXRCbG9iO2UuZXhwb3J0cyA9IChmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gcyA/IGEgPyB0LkJsb2IgOiBvIDogYyA/IHIgOiB2b2lkIDA7CiAgICAgICAgfSkoKTsKICAgICAgfSkuY2FsbCh0aGlzLCAidW5kZWZpbmVkIiAhPSB0eXBlb2YgZ2xvYmFsID8gZ2xvYmFsIDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIHNlbGYgPyBzZWxmIDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIHdpbmRvdyA/IHdpbmRvdyA6IHt9KTsKICAgIH0sIHt9XSwgNjogW2Z1bmN0aW9uICh0LCBlLCBuKSB7fSwge31dLCA3OiBbZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgdmFyIHIgPSBbXS5zbGljZTtlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCwgZSkgewogICAgICAgIGlmICgoInN0cmluZyIgPT0gdHlwZW9mIGUgJiYgKGUgPSB0W2VdKSwgImZ1bmN0aW9uIiAhPSB0eXBlb2YgZSkpIHRocm93IG5ldyBFcnJvcigiYmluZCgpIHJlcXVpcmVzIGEgZnVuY3Rpb24iKTt2YXIgbiA9IHIuY2FsbChhcmd1bWVudHMsIDIpO3JldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gZS5hcHBseSh0LCBuLmNvbmNhdChyLmNhbGwoYXJndW1lbnRzKSkpOwogICAgICAgIH07CiAgICAgIH07CiAgICB9LCB7fV0sIDg6IFtmdW5jdGlvbiAodCwgZSwgbikgewogICAgICBmdW5jdGlvbiByKHQpIHsKICAgICAgICByZXR1cm4gdCA/IG8odCkgOiB2b2lkIDA7CiAgICAgIH1mdW5jdGlvbiBvKHQpIHsKICAgICAgICBmb3IgKHZhciBlIGluIHIucHJvdG90eXBlKSB0W2VdID0gci5wcm90b3R5cGVbZV07cmV0dXJuIHQ7CiAgICAgIH1lLmV4cG9ydHMgPSByLCByLnByb3RvdHlwZS5vbiA9IHIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodCwgZSkgewogICAgICAgIHJldHVybiB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge30sICh0aGlzLl9jYWxsYmFja3NbIiQiICsgdF0gPSB0aGlzLl9jYWxsYmFja3NbIiQiICsgdF0gfHwgW10pLnB1c2goZSksIHRoaXM7CiAgICAgIH0sIHIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiAodCwgZSkgewogICAgICAgIGZ1bmN0aW9uIG4oKSB7CiAgICAgICAgICB0aGlzLm9mZih0LCBuKSwgZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH1yZXR1cm4gbi5mbiA9IGUsIHRoaXMub24odCwgbiksIHRoaXM7CiAgICAgIH0sIHIucHJvdG90eXBlLm9mZiA9IHIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0LCBlKSB7CiAgICAgICAgaWYgKCh0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge30sIDAgPT0gYXJndW1lbnRzLmxlbmd0aCkpIHJldHVybiB0aGlzLl9jYWxsYmFja3MgPSB7fSwgdGhpczt2YXIgbiA9IHRoaXMuX2NhbGxiYWNrc1siJCIgKyB0XTtpZiAoIW4pIHJldHVybiB0aGlzO2lmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyIkIiArIHRdLCB0aGlzO2ZvciAodmFyIHIsIG8gPSAwOyBvIDwgbi5sZW5ndGg7IG8rKykgaWYgKChyID0gbltvXSwgciA9PT0gZSB8fCByLmZuID09PSBlKSkgewogICAgICAgICAgbi5zcGxpY2UobywgMSk7YnJlYWs7CiAgICAgICAgfXJldHVybiB0aGlzOwogICAgICB9LCByLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307dmFyIGUgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksCiAgICAgICAgICAgIG4gPSB0aGlzLl9jYWxsYmFja3NbIiQiICsgdF07aWYgKG4pIHsKICAgICAgICAgIG4gPSBuLnNsaWNlKDApO2ZvciAodmFyIHIgPSAwLCBvID0gbi5sZW5ndGg7IG8gPiByOyArK3IpIG5bcl0uYXBwbHkodGhpcywgZSk7CiAgICAgICAgfXJldHVybiB0aGlzOwogICAgICB9LCByLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiAodCkgewogICAgICAgIHJldHVybiB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge30sIHRoaXMuX2NhbGxiYWNrc1siJCIgKyB0XSB8fCBbXTsKICAgICAgfSwgci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICByZXR1cm4gISF0aGlzLmxpc3RlbmVycyh0KS5sZW5ndGg7CiAgICAgIH07CiAgICB9LCB7fV0sIDk6IFtmdW5jdGlvbiAodCwgZSwgbikgewogICAgICBlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCwgZSkgewogICAgICAgIHZhciBuID0gZnVuY3Rpb24gbigpIHt9O24ucHJvdG90eXBlID0gZS5wcm90b3R5cGUsIHQucHJvdG90eXBlID0gbmV3IG4oKSwgdC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSB0OwogICAgICB9OwogICAgfSwge31dLCAxMDogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIGZ1bmN0aW9uIHIoKSB7CiAgICAgICAgcmV0dXJuICJXZWJraXRBcHBlYXJhbmNlIiBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgfHwgd2luZG93LmNvbnNvbGUgJiYgKGNvbnNvbGUuZmlyZWJ1ZyB8fCBjb25zb2xlLmV4Y2VwdGlvbiAmJiBjb25zb2xlLnRhYmxlKSB8fCBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcLyhcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzE7CiAgICAgIH1mdW5jdGlvbiBvKCkgewogICAgICAgIHZhciB0ID0gYXJndW1lbnRzLAogICAgICAgICAgICBlID0gdGhpcy51c2VDb2xvcnM7aWYgKCh0WzBdID0gKGUgPyAiJWMiIDogIiIpICsgdGhpcy5uYW1lc3BhY2UgKyAoZSA/ICIgJWMiIDogIiAiKSArIHRbMF0gKyAoZSA/ICIlYyAiIDogIiAiKSArICIrIiArIG4uaHVtYW5pemUodGhpcy5kaWZmKSwgIWUpKSByZXR1cm4gdDt2YXIgciA9ICJjb2xvcjogIiArIHRoaXMuY29sb3I7dCA9IFt0WzBdLCByLCAiY29sb3I6IGluaGVyaXQiXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodCwgMSkpO3ZhciBvID0gMCwKICAgICAgICAgICAgaSA9IDA7cmV0dXJuIHRbMF0ucmVwbGFjZSgvJVthLXolXS9nLCBmdW5jdGlvbiAodCkgewogICAgICAgICAgIiUlIiAhPT0gdCAmJiAobysrLCAiJWMiID09PSB0ICYmIChpID0gbykpOwogICAgICAgIH0pLCB0LnNwbGljZShpLCAwLCByKSwgdDsKICAgICAgfWZ1bmN0aW9uIGkoKSB7CiAgICAgICAgcmV0dXJuICJvYmplY3QiID09IHR5cGVvZiBjb25zb2xlICYmIGNvbnNvbGUubG9nICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpOwogICAgICB9ZnVuY3Rpb24gcyh0KSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIG51bGwgPT0gdCA/IG4uc3RvcmFnZS5yZW1vdmVJdGVtKCJkZWJ1ZyIpIDogbi5zdG9yYWdlLmRlYnVnID0gdDsKICAgICAgICB9IGNhdGNoIChlKSB7fQogICAgICB9ZnVuY3Rpb24gYSgpIHsKICAgICAgICB2YXIgdDt0cnkgewogICAgICAgICAgdCA9IG4uc3RvcmFnZS5kZWJ1ZzsKICAgICAgICB9IGNhdGNoIChlKSB7fXJldHVybiB0OwogICAgICB9ZnVuY3Rpb24gYygpIHsKICAgICAgICB0cnkgewogICAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7CiAgICAgICAgfSBjYXRjaCAodCkge30KICAgICAgfW4gPSBlLmV4cG9ydHMgPSB0KCIuL2RlYnVnIiksIG4ubG9nID0gaSwgbi5mb3JtYXRBcmdzID0gbywgbi5zYXZlID0gcywgbi5sb2FkID0gYSwgbi51c2VDb2xvcnMgPSByLCBuLnN0b3JhZ2UgPSAidW5kZWZpbmVkIiAhPSB0eXBlb2YgY2hyb21lICYmICJ1bmRlZmluZWQiICE9IHR5cGVvZiBjaHJvbWUuc3RvcmFnZSA/IGNocm9tZS5zdG9yYWdlLmxvY2FsIDogYygpLCBuLmNvbG9ycyA9IFsibGlnaHRzZWFncmVlbiIsICJmb3Jlc3RncmVlbiIsICJnb2xkZW5yb2QiLCAiZG9kZ2VyYmx1ZSIsICJkYXJrb3JjaGlkIiwgImNyaW1zb24iXSwgbi5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodCkgewogICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0KTsKICAgICAgfSwgbi5lbmFibGUoYSgpKTsKICAgIH0sIHsgIi4vZGVidWciOiAxMSB9XSwgMTE6IFtmdW5jdGlvbiAodCwgZSwgbikgewogICAgICBmdW5jdGlvbiByKCkgewogICAgICAgIHJldHVybiBuLmNvbG9yc1t1KysgJSBuLmNvbG9ycy5sZW5ndGhdOwogICAgICB9ZnVuY3Rpb24gbyh0KSB7CiAgICAgICAgZnVuY3Rpb24gZSgpIHt9ZnVuY3Rpb24gbygpIHsKICAgICAgICAgIHZhciB0ID0gbywKICAgICAgICAgICAgICBlID0gK25ldyBEYXRlKCksCiAgICAgICAgICAgICAgaSA9IGUgLSAocCB8fCBlKTt0LmRpZmYgPSBpLCB0LnByZXYgPSBwLCB0LmN1cnIgPSBlLCBwID0gZSwgbnVsbCA9PSB0LnVzZUNvbG9ycyAmJiAodC51c2VDb2xvcnMgPSBuLnVzZUNvbG9ycygpKSwgbnVsbCA9PSB0LmNvbG9yICYmIHQudXNlQ29sb3JzICYmICh0LmNvbG9yID0gcigpKTt2YXIgcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7c1swXSA9IG4uY29lcmNlKHNbMF0pLCAic3RyaW5nIiAhPSB0eXBlb2Ygc1swXSAmJiAocyA9IFsiJW8iXS5jb25jYXQocykpO3ZhciBhID0gMDtzWzBdID0gc1swXS5yZXBsYWNlKC8lKFthLXolXSkvZywgZnVuY3Rpb24gKGUsIHIpIHsKICAgICAgICAgICAgaWYgKCIlJSIgPT09IGUpIHJldHVybiBlO2ErKzt2YXIgbyA9IG4uZm9ybWF0dGVyc1tyXTtpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgbykgewogICAgICAgICAgICAgIHZhciBpID0gc1thXTtlID0gby5jYWxsKHQsIGkpLCBzLnNwbGljZShhLCAxKSwgYS0tOwogICAgICAgICAgICB9cmV0dXJuIGU7CiAgICAgICAgICB9KSwgImZ1bmN0aW9uIiA9PSB0eXBlb2Ygbi5mb3JtYXRBcmdzICYmIChzID0gbi5mb3JtYXRBcmdzLmFwcGx5KHQsIHMpKTt2YXIgYyA9IG8ubG9nIHx8IG4ubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7Yy5hcHBseSh0LCBzKTsKICAgICAgICB9ZS5lbmFibGVkID0gITEsIG8uZW5hYmxlZCA9ICEwO3ZhciBpID0gbi5lbmFibGVkKHQpID8gbyA6IGU7cmV0dXJuIGkubmFtZXNwYWNlID0gdCwgaTsKICAgICAgfWZ1bmN0aW9uIGkodCkgewogICAgICAgIG4uc2F2ZSh0KTtmb3IgKHZhciBlID0gKHQgfHwgIiIpLnNwbGl0KC9bXHMsXSsvKSwgciA9IGUubGVuZ3RoLCBvID0gMDsgciA+IG87IG8rKykgZVtvXSAmJiAodCA9IGVbb10ucmVwbGFjZSgvXCovZywgIi4qPyIpLCAiLSIgPT09IHRbMF0gPyBuLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgiXiIgKyB0LnN1YnN0cigxKSArICIkIikpIDogbi5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoIl4iICsgdCArICIkIikpKTsKICAgICAgfWZ1bmN0aW9uIHMoKSB7CiAgICAgICAgbi5lbmFibGUoIiIpOwogICAgICB9ZnVuY3Rpb24gYSh0KSB7CiAgICAgICAgdmFyIGUsIHI7Zm9yIChlID0gMCwgciA9IG4uc2tpcHMubGVuZ3RoOyByID4gZTsgZSsrKSBpZiAobi5za2lwc1tlXS50ZXN0KHQpKSByZXR1cm4gITE7Zm9yIChlID0gMCwgciA9IG4ubmFtZXMubGVuZ3RoOyByID4gZTsgZSsrKSBpZiAobi5uYW1lc1tlXS50ZXN0KHQpKSByZXR1cm4gITA7cmV0dXJuICExOwogICAgICB9ZnVuY3Rpb24gYyh0KSB7CiAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBFcnJvciA/IHQuc3RhY2sgfHwgdC5tZXNzYWdlIDogdDsKICAgICAgfW4gPSBlLmV4cG9ydHMgPSBvLCBuLmNvZXJjZSA9IGMsIG4uZGlzYWJsZSA9IHMsIG4uZW5hYmxlID0gaSwgbi5lbmFibGVkID0gYSwgbi5odW1hbml6ZSA9IHQoIm1zIiksIG4ubmFtZXMgPSBbXSwgbi5za2lwcyA9IFtdLCBuLmZvcm1hdHRlcnMgPSB7fTt2YXIgcCwKICAgICAgICAgIHUgPSAwOwogICAgfSwgeyBtczogMzEgfV0sIDEyOiBbZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgZS5leHBvcnRzID0gdCgiLi9saWIvIik7CiAgICB9LCB7ICIuL2xpYi8iOiAxMyB9XSwgMTM6IFtmdW5jdGlvbiAodCwgZSwgbikgewogICAgICBlLmV4cG9ydHMgPSB0KCIuL3NvY2tldCIpLCBlLmV4cG9ydHMucGFyc2VyID0gdCgiZW5naW5lLmlvLXBhcnNlciIpOwogICAgfSwgeyAiLi9zb2NrZXQiOiAxNCwgImVuZ2luZS5pby1wYXJzZXIiOiAyMyB9XSwgMTQ6IFtmdW5jdGlvbiAodCwgZSwgbikgewogICAgICAoZnVuY3Rpb24gKG4pIHsKICAgICAgICBmdW5jdGlvbiByKHQsIGUpIHsKICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiByKSkgcmV0dXJuIG5ldyByKHQsIGUpO2UgPSBlIHx8IHt9LCB0ICYmICJvYmplY3QiID09IHR5cGVvZiB0ICYmIChlID0gdCwgdCA9IG51bGwpLCB0ID8gKHQgPSB1KHQpLCBlLmhvc3RuYW1lID0gdC5ob3N0LCBlLnNlY3VyZSA9ICJodHRwcyIgPT0gdC5wcm90b2NvbCB8fCAid3NzIiA9PSB0LnByb3RvY29sLCBlLnBvcnQgPSB0LnBvcnQsIHQucXVlcnkgJiYgKGUucXVlcnkgPSB0LnF1ZXJ5KSkgOiBlLmhvc3QgJiYgKGUuaG9zdG5hbWUgPSB1KGUuaG9zdCkuaG9zdCksIHRoaXMuc2VjdXJlID0gbnVsbCAhPSBlLnNlY3VyZSA/IGUuc2VjdXJlIDogbi5sb2NhdGlvbiAmJiAiaHR0cHM6IiA9PSBsb2NhdGlvbi5wcm90b2NvbCwgZS5ob3N0bmFtZSAmJiAhZS5wb3J0ICYmIChlLnBvcnQgPSB0aGlzLnNlY3VyZSA/ICI0NDMiIDogIjgwIiksIHRoaXMuYWdlbnQgPSBlLmFnZW50IHx8ICExLCB0aGlzLmhvc3RuYW1lID0gZS5ob3N0bmFtZSB8fCAobi5sb2NhdGlvbiA/IGxvY2F0aW9uLmhvc3RuYW1lIDogImxvY2FsaG9zdCIpLCB0aGlzLnBvcnQgPSBlLnBvcnQgfHwgKG4ubG9jYXRpb24gJiYgbG9jYXRpb24ucG9ydCA/IGxvY2F0aW9uLnBvcnQgOiB0aGlzLnNlY3VyZSA/IDQ0MyA6IDgwKSwgdGhpcy5xdWVyeSA9IGUucXVlcnkgfHwge30sICJzdHJpbmciID09IHR5cGVvZiB0aGlzLnF1ZXJ5ICYmICh0aGlzLnF1ZXJ5ID0gaC5kZWNvZGUodGhpcy5xdWVyeSkpLCB0aGlzLnVwZ3JhZGUgPSAhMSAhPT0gZS51cGdyYWRlLCB0aGlzLnBhdGggPSAoZS5wYXRoIHx8ICIvZW5naW5lLmlvIikucmVwbGFjZSgvXC8kLywgIiIpICsgIi8iLCB0aGlzLmZvcmNlSlNPTlAgPSAhIWUuZm9yY2VKU09OUCwgdGhpcy5qc29ucCA9ICExICE9PSBlLmpzb25wLCB0aGlzLmZvcmNlQmFzZTY0ID0gISFlLmZvcmNlQmFzZTY0LCB0aGlzLmVuYWJsZXNYRFIgPSAhIWUuZW5hYmxlc1hEUiwgdGhpcy50aW1lc3RhbXBQYXJhbSA9IGUudGltZXN0YW1wUGFyYW0gfHwgInQiLCB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gZS50aW1lc3RhbXBSZXF1ZXN0cywgdGhpcy50cmFuc3BvcnRzID0gZS50cmFuc3BvcnRzIHx8IFsicG9sbGluZyIsICJ3ZWJzb2NrZXQiXSwgdGhpcy5yZWFkeVN0YXRlID0gIiIsIHRoaXMud3JpdGVCdWZmZXIgPSBbXSwgdGhpcy5wb2xpY3lQb3J0ID0gZS5wb2xpY3lQb3J0IHx8IDg0MywgdGhpcy5yZW1lbWJlclVwZ3JhZGUgPSBlLnJlbWVtYmVyVXBncmFkZSB8fCAhMSwgdGhpcy5iaW5hcnlUeXBlID0gbnVsbCwgdGhpcy5vbmx5QmluYXJ5VXBncmFkZXMgPSBlLm9ubHlCaW5hcnlVcGdyYWRlcywgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9ICExICE9PSBlLnBlck1lc3NhZ2VEZWZsYXRlID8gZS5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB7fSA6ICExLCAhMCA9PT0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSAmJiAodGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IHt9KSwgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSAmJiBudWxsID09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkICYmICh0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCA9IDEwMjQpLCB0aGlzLnBmeCA9IGUucGZ4IHx8IG51bGwsIHRoaXMua2V5ID0gZS5rZXkgfHwgbnVsbCwgdGhpcy5wYXNzcGhyYXNlID0gZS5wYXNzcGhyYXNlIHx8IG51bGwsIHRoaXMuY2VydCA9IGUuY2VydCB8fCBudWxsLCB0aGlzLmNhID0gZS5jYSB8fCBudWxsLCB0aGlzLmNpcGhlcnMgPSBlLmNpcGhlcnMgfHwgbnVsbCwgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSB2b2lkIDAgPT09IGUucmVqZWN0VW5hdXRob3JpemVkID8gbnVsbCA6IGUucmVqZWN0VW5hdXRob3JpemVkO3ZhciBvID0gIm9iamVjdCIgPT0gdHlwZW9mIG4gJiYgbjtvLmdsb2JhbCA9PT0gbyAmJiBlLmV4dHJhSGVhZGVycyAmJiBPYmplY3Qua2V5cyhlLmV4dHJhSGVhZGVycykubGVuZ3RoID4gMCAmJiAodGhpcy5leHRyYUhlYWRlcnMgPSBlLmV4dHJhSGVhZGVycyksIHRoaXMub3BlbigpOwogICAgICAgIH1mdW5jdGlvbiBvKHQpIHsKICAgICAgICAgIHZhciBlID0ge307Zm9yICh2YXIgbiBpbiB0KSB0Lmhhc093blByb3BlcnR5KG4pICYmIChlW25dID0gdFtuXSk7cmV0dXJuIGU7CiAgICAgICAgfXZhciBpID0gdCgiLi90cmFuc3BvcnRzIiksCiAgICAgICAgICAgIHMgPSB0KCJjb21wb25lbnQtZW1pdHRlciIpLAogICAgICAgICAgICBhID0gdCgiZGVidWciKSgiZW5naW5lLmlvLWNsaWVudDpzb2NrZXQiKSwKICAgICAgICAgICAgYyA9IHQoImluZGV4b2YiKSwKICAgICAgICAgICAgcCA9IHQoImVuZ2luZS5pby1wYXJzZXIiKSwKICAgICAgICAgICAgdSA9IHQoInBhcnNldXJpIiksCiAgICAgICAgICAgIGYgPSB0KCJwYXJzZWpzb24iKSwKICAgICAgICAgICAgaCA9IHQoInBhcnNlcXMiKTtlLmV4cG9ydHMgPSByLCByLnByaW9yV2Vic29ja2V0U3VjY2VzcyA9ICExLCBzKHIucHJvdG90eXBlKSwgci5wcm90b2NvbCA9IHAucHJvdG9jb2wsIHIuU29ja2V0ID0gciwgci5UcmFuc3BvcnQgPSB0KCIuL3RyYW5zcG9ydCIpLCByLnRyYW5zcG9ydHMgPSB0KCIuL3RyYW5zcG9ydHMiKSwgci5wYXJzZXIgPSB0KCJlbmdpbmUuaW8tcGFyc2VyIiksIHIucHJvdG90eXBlLmNyZWF0ZVRyYW5zcG9ydCA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICBhKCdjcmVhdGluZyB0cmFuc3BvcnQgIiVzIicsIHQpO3ZhciBlID0gbyh0aGlzLnF1ZXJ5KTtlLkVJTyA9IHAucHJvdG9jb2wsIGUudHJhbnNwb3J0ID0gdCwgdGhpcy5pZCAmJiAoZS5zaWQgPSB0aGlzLmlkKTt2YXIgbiA9IG5ldyBpW3RdKHsgYWdlbnQ6IHRoaXMuYWdlbnQsIGhvc3RuYW1lOiB0aGlzLmhvc3RuYW1lLCBwb3J0OiB0aGlzLnBvcnQsIHNlY3VyZTogdGhpcy5zZWN1cmUsIHBhdGg6IHRoaXMucGF0aCwgcXVlcnk6IGUsIGZvcmNlSlNPTlA6IHRoaXMuZm9yY2VKU09OUCwganNvbnA6IHRoaXMuanNvbnAsIGZvcmNlQmFzZTY0OiB0aGlzLmZvcmNlQmFzZTY0LCBlbmFibGVzWERSOiB0aGlzLmVuYWJsZXNYRFIsIHRpbWVzdGFtcFJlcXVlc3RzOiB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzLCB0aW1lc3RhbXBQYXJhbTogdGhpcy50aW1lc3RhbXBQYXJhbSwgcG9saWN5UG9ydDogdGhpcy5wb2xpY3lQb3J0LCBzb2NrZXQ6IHRoaXMsIHBmeDogdGhpcy5wZngsIGtleTogdGhpcy5rZXksIHBhc3NwaHJhc2U6IHRoaXMucGFzc3BocmFzZSwgY2VydDogdGhpcy5jZXJ0LCBjYTogdGhpcy5jYSwgY2lwaGVyczogdGhpcy5jaXBoZXJzLCByZWplY3RVbmF1dGhvcml6ZWQ6IHRoaXMucmVqZWN0VW5hdXRob3JpemVkLCBwZXJNZXNzYWdlRGVmbGF0ZTogdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSwgZXh0cmFIZWFkZXJzOiB0aGlzLmV4dHJhSGVhZGVycyB9KTtyZXR1cm4gbjsKICAgICAgICB9LCByLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIHQ7aWYgKHRoaXMucmVtZW1iZXJVcGdyYWRlICYmIHIucHJpb3JXZWJzb2NrZXRTdWNjZXNzICYmIC0xICE9IHRoaXMudHJhbnNwb3J0cy5pbmRleE9mKCJ3ZWJzb2NrZXQiKSkgdCA9ICJ3ZWJzb2NrZXQiO2Vsc2UgewogICAgICAgICAgICBpZiAoMCA9PT0gdGhpcy50cmFuc3BvcnRzLmxlbmd0aCkgewogICAgICAgICAgICAgIHZhciBlID0gdGhpcztyZXR1cm4gdm9pZCBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGUuZW1pdCgiZXJyb3IiLCAiTm8gdHJhbnNwb3J0cyBhdmFpbGFibGUiKTsKICAgICAgICAgICAgICB9LCAwKTsKICAgICAgICAgICAgfXQgPSB0aGlzLnRyYW5zcG9ydHNbMF07CiAgICAgICAgICB9dGhpcy5yZWFkeVN0YXRlID0gIm9wZW5pbmciO3RyeSB7CiAgICAgICAgICAgIHQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydCh0KTsKICAgICAgICAgIH0gY2F0Y2ggKG4pIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0cy5zaGlmdCgpLCB2b2lkIHRoaXMub3BlbigpOwogICAgICAgICAgfXQub3BlbigpLCB0aGlzLnNldFRyYW5zcG9ydCh0KTsKICAgICAgICB9LCByLnByb3RvdHlwZS5zZXRUcmFuc3BvcnQgPSBmdW5jdGlvbiAodCkgewogICAgICAgICAgYSgic2V0dGluZyB0cmFuc3BvcnQgJXMiLCB0Lm5hbWUpO3ZhciBlID0gdGhpczt0aGlzLnRyYW5zcG9ydCAmJiAoYSgiY2xlYXJpbmcgZXhpc3RpbmcgdHJhbnNwb3J0ICVzIiwgdGhpcy50cmFuc3BvcnQubmFtZSksIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpKSwgdGhpcy50cmFuc3BvcnQgPSB0LCB0Lm9uKCJkcmFpbiIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgZS5vbkRyYWluKCk7CiAgICAgICAgICB9KS5vbigicGFja2V0IiwgZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgZS5vblBhY2tldCh0KTsKICAgICAgICAgIH0pLm9uKCJlcnJvciIsIGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgIGUub25FcnJvcih0KTsKICAgICAgICAgIH0pLm9uKCJjbG9zZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgZS5vbkNsb3NlKCJ0cmFuc3BvcnQgY2xvc2UiKTsKICAgICAgICAgIH0pOwogICAgICAgIH0sIHIucHJvdG90eXBlLnByb2JlID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICAgIGZ1bmN0aW9uIGUoKSB7CiAgICAgICAgICAgIGlmIChoLm9ubHlCaW5hcnlVcGdyYWRlcykgewogICAgICAgICAgICAgIHZhciBlID0gIXRoaXMuc3VwcG9ydHNCaW5hcnkgJiYgaC50cmFuc3BvcnQuc3VwcG9ydHNCaW5hcnk7ZiA9IGYgfHwgZTsKICAgICAgICAgICAgfWYgfHwgKGEoJ3Byb2JlIHRyYW5zcG9ydCAiJXMiIG9wZW5lZCcsIHQpLCB1LnNlbmQoW3sgdHlwZTogInBpbmciLCBkYXRhOiAicHJvYmUiIH1dKSwgdS5vbmNlKCJwYWNrZXQiLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgIGlmICghZikgaWYgKCJwb25nIiA9PSBlLnR5cGUgJiYgInByb2JlIiA9PSBlLmRhdGEpIHsKICAgICAgICAgICAgICAgIGlmICgoYSgncHJvYmUgdHJhbnNwb3J0ICIlcyIgcG9uZycsIHQpLCBoLnVwZ3JhZGluZyA9ICEwLCBoLmVtaXQoInVwZ3JhZGluZyIsIHUpLCAhdSkpIHJldHVybjtyLnByaW9yV2Vic29ja2V0U3VjY2VzcyA9ICJ3ZWJzb2NrZXQiID09IHUubmFtZSwgYSgncGF1c2luZyBjdXJyZW50IHRyYW5zcG9ydCAiJXMiJywgaC50cmFuc3BvcnQubmFtZSksIGgudHJhbnNwb3J0LnBhdXNlKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgZiB8fCAiY2xvc2VkIiAhPSBoLnJlYWR5U3RhdGUgJiYgKGEoImNoYW5naW5nIHRyYW5zcG9ydCBhbmQgc2VuZGluZyB1cGdyYWRlIHBhY2tldCIpLCBwKCksIGguc2V0VHJhbnNwb3J0KHUpLCB1LnNlbmQoW3sgdHlwZTogInVwZ3JhZGUiIH1dKSwgaC5lbWl0KCJ1cGdyYWRlIiwgdSksIHUgPSBudWxsLCBoLnVwZ3JhZGluZyA9ICExLCBoLmZsdXNoKCkpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGEoJ3Byb2JlIHRyYW5zcG9ydCAiJXMiIGZhaWxlZCcsIHQpO3ZhciBuID0gbmV3IEVycm9yKCJwcm9iZSBlcnJvciIpO24udHJhbnNwb3J0ID0gdS5uYW1lLCBoLmVtaXQoInVwZ3JhZGVFcnJvciIsIG4pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkpOwogICAgICAgICAgfWZ1bmN0aW9uIG4oKSB7CiAgICAgICAgICAgIGYgfHwgKGYgPSAhMCwgcCgpLCB1LmNsb3NlKCksIHUgPSBudWxsKTsKICAgICAgICAgIH1mdW5jdGlvbiBvKGUpIHsKICAgICAgICAgICAgdmFyIHIgPSBuZXcgRXJyb3IoInByb2JlIGVycm9yOiAiICsgZSk7ci50cmFuc3BvcnQgPSB1Lm5hbWUsIG4oKSwgYSgncHJvYmUgdHJhbnNwb3J0ICIlcyIgZmFpbGVkIGJlY2F1c2Ugb2YgZXJyb3I6ICVzJywgdCwgZSksIGguZW1pdCgidXBncmFkZUVycm9yIiwgcik7CiAgICAgICAgICB9ZnVuY3Rpb24gaSgpIHsKICAgICAgICAgICAgbygidHJhbnNwb3J0IGNsb3NlZCIpOwogICAgICAgICAgfWZ1bmN0aW9uIHMoKSB7CiAgICAgICAgICAgIG8oInNvY2tldCBjbG9zZWQiKTsKICAgICAgICAgIH1mdW5jdGlvbiBjKHQpIHsKICAgICAgICAgICAgdSAmJiB0Lm5hbWUgIT0gdS5uYW1lICYmIChhKCciJXMiIHdvcmtzIC0gYWJvcnRpbmcgIiVzIicsIHQubmFtZSwgdS5uYW1lKSwgbigpKTsKICAgICAgICAgIH1mdW5jdGlvbiBwKCkgewogICAgICAgICAgICB1LnJlbW92ZUxpc3RlbmVyKCJvcGVuIiwgZSksIHUucmVtb3ZlTGlzdGVuZXIoImVycm9yIiwgbyksIHUucmVtb3ZlTGlzdGVuZXIoImNsb3NlIiwgaSksIGgucmVtb3ZlTGlzdGVuZXIoImNsb3NlIiwgcyksIGgucmVtb3ZlTGlzdGVuZXIoInVwZ3JhZGluZyIsIGMpOwogICAgICAgICAgfWEoJ3Byb2JpbmcgdHJhbnNwb3J0ICIlcyInLCB0KTt2YXIgdSA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KHQsIHsgcHJvYmU6IDEgfSksCiAgICAgICAgICAgICAgZiA9ICExLAogICAgICAgICAgICAgIGggPSB0aGlzO3IucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gITEsIHUub25jZSgib3BlbiIsIGUpLCB1Lm9uY2UoImVycm9yIiwgbyksIHUub25jZSgiY2xvc2UiLCBpKSwgdGhpcy5vbmNlKCJjbG9zZSIsIHMpLCB0aGlzLm9uY2UoInVwZ3JhZGluZyIsIGMpLCB1Lm9wZW4oKTsKICAgICAgICB9LCByLnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBpZiAoKGEoInNvY2tldCBvcGVuIiksIHRoaXMucmVhZHlTdGF0ZSA9ICJvcGVuIiwgci5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAid2Vic29ja2V0IiA9PSB0aGlzLnRyYW5zcG9ydC5uYW1lLCB0aGlzLmVtaXQoIm9wZW4iKSwgdGhpcy5mbHVzaCgpLCAib3BlbiIgPT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMudXBncmFkZSAmJiB0aGlzLnRyYW5zcG9ydC5wYXVzZSkpIHsKICAgICAgICAgICAgYSgic3RhcnRpbmcgdXBncmFkZSBwcm9iZXMiKTtmb3IgKHZhciB0ID0gMCwgZSA9IHRoaXMudXBncmFkZXMubGVuZ3RoOyBlID4gdDsgdCsrKSB0aGlzLnByb2JlKHRoaXMudXBncmFkZXNbdF0pOwogICAgICAgICAgfQogICAgICAgIH0sIHIucHJvdG90eXBlLm9uUGFja2V0ID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICAgIGlmICgib3BlbmluZyIgPT0gdGhpcy5yZWFkeVN0YXRlIHx8ICJvcGVuIiA9PSB0aGlzLnJlYWR5U3RhdGUpIHN3aXRjaCAoKGEoJ3NvY2tldCByZWNlaXZlOiB0eXBlICIlcyIsIGRhdGEgIiVzIicsIHQudHlwZSwgdC5kYXRhKSwgdGhpcy5lbWl0KCJwYWNrZXQiLCB0KSwgdGhpcy5lbWl0KCJoZWFydGJlYXQiKSwgdC50eXBlKSkge2Nhc2UgIm9wZW4iOgogICAgICAgICAgICAgIHRoaXMub25IYW5kc2hha2UoZih0LmRhdGEpKTticmVhaztjYXNlICJwb25nIjoKICAgICAgICAgICAgICB0aGlzLnNldFBpbmcoKSwgdGhpcy5lbWl0KCJwb25nIik7YnJlYWs7Y2FzZSAiZXJyb3IiOgogICAgICAgICAgICAgIHZhciBlID0gbmV3IEVycm9yKCJzZXJ2ZXIgZXJyb3IiKTtlLmNvZGUgPSB0LmRhdGEsIHRoaXMub25FcnJvcihlKTticmVhaztjYXNlICJtZXNzYWdlIjoKICAgICAgICAgICAgICB0aGlzLmVtaXQoImRhdGEiLCB0LmRhdGEpLCB0aGlzLmVtaXQoIm1lc3NhZ2UiLCB0LmRhdGEpO30gZWxzZSBhKCdwYWNrZXQgcmVjZWl2ZWQgd2l0aCBzb2NrZXQgcmVhZHlTdGF0ZSAiJXMiJywgdGhpcy5yZWFkeVN0YXRlKTsKICAgICAgICB9LCByLnByb3RvdHlwZS5vbkhhbmRzaGFrZSA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICB0aGlzLmVtaXQoImhhbmRzaGFrZSIsIHQpLCB0aGlzLmlkID0gdC5zaWQsIHRoaXMudHJhbnNwb3J0LnF1ZXJ5LnNpZCA9IHQuc2lkLCB0aGlzLnVwZ3JhZGVzID0gdGhpcy5maWx0ZXJVcGdyYWRlcyh0LnVwZ3JhZGVzKSwgdGhpcy5waW5nSW50ZXJ2YWwgPSB0LnBpbmdJbnRlcnZhbCwgdGhpcy5waW5nVGltZW91dCA9IHQucGluZ1RpbWVvdXQsIHRoaXMub25PcGVuKCksICJjbG9zZWQiICE9IHRoaXMucmVhZHlTdGF0ZSAmJiAodGhpcy5zZXRQaW5nKCksIHRoaXMucmVtb3ZlTGlzdGVuZXIoImhlYXJ0YmVhdCIsIHRoaXMub25IZWFydGJlYXQpLCB0aGlzLm9uKCJoZWFydGJlYXQiLCB0aGlzLm9uSGVhcnRiZWF0KSk7CiAgICAgICAgfSwgci5wcm90b3R5cGUub25IZWFydGJlYXQgPSBmdW5jdGlvbiAodCkgewogICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7dmFyIGUgPSB0aGlzO2UucGluZ1RpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAiY2xvc2VkIiAhPSBlLnJlYWR5U3RhdGUgJiYgZS5vbkNsb3NlKCJwaW5nIHRpbWVvdXQiKTsKICAgICAgICAgIH0sIHQgfHwgZS5waW5nSW50ZXJ2YWwgKyBlLnBpbmdUaW1lb3V0KTsKICAgICAgICB9LCByLnByb3RvdHlwZS5zZXRQaW5nID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIHQgPSB0aGlzO2NsZWFyVGltZW91dCh0LnBpbmdJbnRlcnZhbFRpbWVyKSwgdC5waW5nSW50ZXJ2YWxUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBhKCJ3cml0aW5nIHBpbmcgcGFja2V0IC0gZXhwZWN0aW5nIHBvbmcgd2l0aGluICVzbXMiLCB0LnBpbmdUaW1lb3V0KSwgdC5waW5nKCksIHQub25IZWFydGJlYXQodC5waW5nVGltZW91dCk7CiAgICAgICAgICB9LCB0LnBpbmdJbnRlcnZhbCk7CiAgICAgICAgfSwgci5wcm90b3R5cGUucGluZyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciB0ID0gdGhpczt0aGlzLnNlbmRQYWNrZXQoInBpbmciLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHQuZW1pdCgicGluZyIpOwogICAgICAgICAgfSk7CiAgICAgICAgfSwgci5wcm90b3R5cGUub25EcmFpbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHRoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsIHRoaXMucHJldkJ1ZmZlckxlbiksIHRoaXMucHJldkJ1ZmZlckxlbiA9IDAsIDAgPT09IHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoID8gdGhpcy5lbWl0KCJkcmFpbiIpIDogdGhpcy5mbHVzaCgpOwogICAgICAgIH0sIHIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgImNsb3NlZCIgIT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMudHJhbnNwb3J0LndyaXRhYmxlICYmICF0aGlzLnVwZ3JhZGluZyAmJiB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCAmJiAoYSgiZmx1c2hpbmcgJWQgcGFja2V0cyBpbiBzb2NrZXQiLCB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCksIHRoaXMudHJhbnNwb3J0LnNlbmQodGhpcy53cml0ZUJ1ZmZlciksIHRoaXMucHJldkJ1ZmZlckxlbiA9IHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoLCB0aGlzLmVtaXQoImZsdXNoIikpOwogICAgICAgIH0sIHIucHJvdG90eXBlLndyaXRlID0gci5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kUGFja2V0KCJtZXNzYWdlIiwgdCwgZSwgbiksIHRoaXM7CiAgICAgICAgfSwgci5wcm90b3R5cGUuc2VuZFBhY2tldCA9IGZ1bmN0aW9uICh0LCBlLCBuLCByKSB7CiAgICAgICAgICBpZiAoKCJmdW5jdGlvbiIgPT0gdHlwZW9mIGUgJiYgKHIgPSBlLCBlID0gdm9pZCAwKSwgImZ1bmN0aW9uIiA9PSB0eXBlb2YgbiAmJiAociA9IG4sIG4gPSBudWxsKSwgImNsb3NpbmciICE9IHRoaXMucmVhZHlTdGF0ZSAmJiAiY2xvc2VkIiAhPSB0aGlzLnJlYWR5U3RhdGUpKSB7CiAgICAgICAgICAgIG4gPSBuIHx8IHt9LCBuLmNvbXByZXNzID0gITEgIT09IG4uY29tcHJlc3M7dmFyIG8gPSB7IHR5cGU6IHQsIGRhdGE6IGUsIG9wdGlvbnM6IG4gfTt0aGlzLmVtaXQoInBhY2tldENyZWF0ZSIsIG8pLCB0aGlzLndyaXRlQnVmZmVyLnB1c2gobyksIHIgJiYgdGhpcy5vbmNlKCJmbHVzaCIsIHIpLCB0aGlzLmZsdXNoKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwgci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBmdW5jdGlvbiB0KCkgewogICAgICAgICAgICByLm9uQ2xvc2UoImZvcmNlZCBjbG9zZSIpLCBhKCJzb2NrZXQgY2xvc2luZyAtIHRlbGxpbmcgdHJhbnNwb3J0IHRvIGNsb3NlIiksIHIudHJhbnNwb3J0LmNsb3NlKCk7CiAgICAgICAgICB9ZnVuY3Rpb24gZSgpIHsKICAgICAgICAgICAgci5yZW1vdmVMaXN0ZW5lcigidXBncmFkZSIsIGUpLCByLnJlbW92ZUxpc3RlbmVyKCJ1cGdyYWRlRXJyb3IiLCBlKSwgdCgpOwogICAgICAgICAgfWZ1bmN0aW9uIG4oKSB7CiAgICAgICAgICAgIHIub25jZSgidXBncmFkZSIsIGUpLCByLm9uY2UoInVwZ3JhZGVFcnJvciIsIGUpOwogICAgICAgICAgfWlmICgib3BlbmluZyIgPT0gdGhpcy5yZWFkeVN0YXRlIHx8ICJvcGVuIiA9PSB0aGlzLnJlYWR5U3RhdGUpIHsKICAgICAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gImNsb3NpbmciO3ZhciByID0gdGhpczt0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCA/IHRoaXMub25jZSgiZHJhaW4iLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgdGhpcy51cGdyYWRpbmcgPyBuKCkgOiB0KCk7CiAgICAgICAgICAgIH0pIDogdGhpcy51cGdyYWRpbmcgPyBuKCkgOiB0KCk7CiAgICAgICAgICB9cmV0dXJuIHRoaXM7CiAgICAgICAgfSwgci5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICBhKCJzb2NrZXQgZXJyb3IgJWoiLCB0KSwgci5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAhMSwgdGhpcy5lbWl0KCJlcnJvciIsIHQpLCB0aGlzLm9uQ2xvc2UoInRyYW5zcG9ydCBlcnJvciIsIHQpOwogICAgICAgIH0sIHIucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAodCwgZSkgewogICAgICAgICAgaWYgKCJvcGVuaW5nIiA9PSB0aGlzLnJlYWR5U3RhdGUgfHwgIm9wZW4iID09IHRoaXMucmVhZHlTdGF0ZSB8fCAiY2xvc2luZyIgPT0gdGhpcy5yZWFkeVN0YXRlKSB7CiAgICAgICAgICAgIGEoJ3NvY2tldCBjbG9zZSB3aXRoIHJlYXNvbjogIiVzIicsIHQpO3ZhciBuID0gdGhpcztjbGVhclRpbWVvdXQodGhpcy5waW5nSW50ZXJ2YWxUaW1lciksIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0VGltZXIpLCB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoImNsb3NlIiksIHRoaXMudHJhbnNwb3J0LmNsb3NlKCksIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpLCB0aGlzLnJlYWR5U3RhdGUgPSAiY2xvc2VkIiwgdGhpcy5pZCA9IG51bGwsIHRoaXMuZW1pdCgiY2xvc2UiLCB0LCBlKSwgbi53cml0ZUJ1ZmZlciA9IFtdLCBuLnByZXZCdWZmZXJMZW4gPSAwOwogICAgICAgICAgfQogICAgICAgIH0sIHIucHJvdG90eXBlLmZpbHRlclVwZ3JhZGVzID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICAgIGZvciAodmFyIGUgPSBbXSwgbiA9IDAsIHIgPSB0Lmxlbmd0aDsgciA+IG47IG4rKykgfmModGhpcy50cmFuc3BvcnRzLCB0W25dKSAmJiBlLnB1c2godFtuXSk7cmV0dXJuIGU7CiAgICAgICAgfTsKICAgICAgfSkuY2FsbCh0aGlzLCAidW5kZWZpbmVkIiAhPSB0eXBlb2YgZ2xvYmFsID8gZ2xvYmFsIDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIHNlbGYgPyBzZWxmIDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIHdpbmRvdyA/IHdpbmRvdyA6IHt9KTsKICAgIH0sIHsgIi4vdHJhbnNwb3J0IjogMTUsICIuL3RyYW5zcG9ydHMiOiAxNiwgImNvbXBvbmVudC1lbWl0dGVyIjogMjIsIGRlYnVnOiAxMCwgImVuZ2luZS5pby1wYXJzZXIiOiAyMywgaW5kZXhvZjogMjgsIHBhcnNlanNvbjogMzIsIHBhcnNlcXM6IDMzLCBwYXJzZXVyaTogMzQgfV0sIDE1OiBbZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgZnVuY3Rpb24gcih0KSB7CiAgICAgICAgdGhpcy5wYXRoID0gdC5wYXRoLCB0aGlzLmhvc3RuYW1lID0gdC5ob3N0bmFtZSwgdGhpcy5wb3J0ID0gdC5wb3J0LCB0aGlzLnNlY3VyZSA9IHQuc2VjdXJlLCB0aGlzLnF1ZXJ5ID0gdC5xdWVyeSwgdGhpcy50aW1lc3RhbXBQYXJhbSA9IHQudGltZXN0YW1wUGFyYW0sIHRoaXMudGltZXN0YW1wUmVxdWVzdHMgPSB0LnRpbWVzdGFtcFJlcXVlc3RzLCB0aGlzLnJlYWR5U3RhdGUgPSAiIiwgdGhpcy5hZ2VudCA9IHQuYWdlbnQgfHwgITEsIHRoaXMuc29ja2V0ID0gdC5zb2NrZXQsIHRoaXMuZW5hYmxlc1hEUiA9IHQuZW5hYmxlc1hEUiwgdGhpcy5wZnggPSB0LnBmeCwgdGhpcy5rZXkgPSB0LmtleSwgdGhpcy5wYXNzcGhyYXNlID0gdC5wYXNzcGhyYXNlLCB0aGlzLmNlcnQgPSB0LmNlcnQsIHRoaXMuY2EgPSB0LmNhLCB0aGlzLmNpcGhlcnMgPSB0LmNpcGhlcnMsIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gdC5yZWplY3RVbmF1dGhvcml6ZWQsIHRoaXMuZXh0cmFIZWFkZXJzID0gdC5leHRyYUhlYWRlcnM7CiAgICAgIH12YXIgbyA9IHQoImVuZ2luZS5pby1wYXJzZXIiKSwKICAgICAgICAgIGkgPSB0KCJjb21wb25lbnQtZW1pdHRlciIpO2UuZXhwb3J0cyA9IHIsIGkoci5wcm90b3R5cGUpLCByLnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKHQsIGUpIHsKICAgICAgICB2YXIgbiA9IG5ldyBFcnJvcih0KTtyZXR1cm4gbi50eXBlID0gIlRyYW5zcG9ydEVycm9yIiwgbi5kZXNjcmlwdGlvbiA9IGUsIHRoaXMuZW1pdCgiZXJyb3IiLCBuKSwgdGhpczsKICAgICAgfSwgci5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gKCJjbG9zZWQiID09IHRoaXMucmVhZHlTdGF0ZSB8fCAiIiA9PSB0aGlzLnJlYWR5U3RhdGUpICYmICh0aGlzLnJlYWR5U3RhdGUgPSAib3BlbmluZyIsIHRoaXMuZG9PcGVuKCkpLCB0aGlzOwogICAgICB9LCByLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gKCJvcGVuaW5nIiA9PSB0aGlzLnJlYWR5U3RhdGUgfHwgIm9wZW4iID09IHRoaXMucmVhZHlTdGF0ZSkgJiYgKHRoaXMuZG9DbG9zZSgpLCB0aGlzLm9uQ2xvc2UoKSksIHRoaXM7CiAgICAgIH0sIHIucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAodCkgewogICAgICAgIGlmICgib3BlbiIgIT0gdGhpcy5yZWFkeVN0YXRlKSB0aHJvdyBuZXcgRXJyb3IoIlRyYW5zcG9ydCBub3Qgb3BlbiIpO3RoaXMud3JpdGUodCk7CiAgICAgIH0sIHIucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSAib3BlbiIsIHRoaXMud3JpdGFibGUgPSAhMCwgdGhpcy5lbWl0KCJvcGVuIik7CiAgICAgIH0sIHIucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgdmFyIGUgPSBvLmRlY29kZVBhY2tldCh0LCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTt0aGlzLm9uUGFja2V0KGUpOwogICAgICB9LCByLnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgdGhpcy5lbWl0KCJwYWNrZXQiLCB0KTsKICAgICAgfSwgci5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSAiY2xvc2VkIiwgdGhpcy5lbWl0KCJjbG9zZSIpOwogICAgICB9OwogICAgfSwgeyAiY29tcG9uZW50LWVtaXR0ZXIiOiAyMiwgImVuZ2luZS5pby1wYXJzZXIiOiAyMyB9XSwgMTY6IFtmdW5jdGlvbiAodCwgZSwgbikgewogICAgICAoZnVuY3Rpb24gKGUpIHsKICAgICAgICBmdW5jdGlvbiByKHQpIHsKICAgICAgICAgIHZhciBuLAogICAgICAgICAgICAgIHIgPSAhMSwKICAgICAgICAgICAgICBhID0gITEsCiAgICAgICAgICAgICAgYyA9ICExICE9PSB0Lmpzb25wO2lmIChlLmxvY2F0aW9uKSB7CiAgICAgICAgICAgIHZhciBwID0gImh0dHBzOiIgPT0gbG9jYXRpb24ucHJvdG9jb2wsCiAgICAgICAgICAgICAgICB1ID0gbG9jYXRpb24ucG9ydDt1IHx8ICh1ID0gcCA/IDQ0MyA6IDgwKSwgciA9IHQuaG9zdG5hbWUgIT0gbG9jYXRpb24uaG9zdG5hbWUgfHwgdSAhPSB0LnBvcnQsIGEgPSB0LnNlY3VyZSAhPSBwOwogICAgICAgICAgfWlmICgodC54ZG9tYWluID0gciwgdC54c2NoZW1lID0gYSwgbiA9IG5ldyBvKHQpLCAib3BlbiIgaW4gbiAmJiAhdC5mb3JjZUpTT05QKSkgcmV0dXJuIG5ldyBpKHQpO2lmICghYykgdGhyb3cgbmV3IEVycm9yKCJKU09OUCBkaXNhYmxlZCIpO3JldHVybiBuZXcgcyh0KTsKICAgICAgICB9dmFyIG8gPSB0KCJ4bWxodHRwcmVxdWVzdC1zc2wiKSwKICAgICAgICAgICAgaSA9IHQoIi4vcG9sbGluZy14aHIiKSwKICAgICAgICAgICAgcyA9IHQoIi4vcG9sbGluZy1qc29ucCIpLAogICAgICAgICAgICBhID0gdCgiLi93ZWJzb2NrZXQiKTtuLnBvbGxpbmcgPSByLCBuLndlYnNvY2tldCA9IGE7CiAgICAgIH0pLmNhbGwodGhpcywgInVuZGVmaW5lZCIgIT0gdHlwZW9mIGdsb2JhbCA/IGdsb2JhbCA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBzZWxmID8gc2VsZiA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiB7fSk7CiAgICB9LCB7ICIuL3BvbGxpbmctanNvbnAiOiAxNywgIi4vcG9sbGluZy14aHIiOiAxOCwgIi4vd2Vic29ja2V0IjogMjAsICJ4bWxodHRwcmVxdWVzdC1zc2wiOiAyMSB9XSwgMTc6IFtmdW5jdGlvbiAodCwgZSwgbikgewogICAgICAoZnVuY3Rpb24gKG4pIHsKICAgICAgICBmdW5jdGlvbiByKCkge31mdW5jdGlvbiBvKHQpIHsKICAgICAgICAgIGkuY2FsbCh0aGlzLCB0KSwgdGhpcy5xdWVyeSA9IHRoaXMucXVlcnkgfHwge30sIGEgfHwgKG4uX19fZWlvIHx8IChuLl9fX2VpbyA9IFtdKSwgYSA9IG4uX19fZWlvKSwgdGhpcy5pbmRleCA9IGEubGVuZ3RoO3ZhciBlID0gdGhpczthLnB1c2goZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgZS5vbkRhdGEodCk7CiAgICAgICAgICB9KSwgdGhpcy5xdWVyeS5qID0gdGhpcy5pbmRleCwgbi5kb2N1bWVudCAmJiBuLmFkZEV2ZW50TGlzdGVuZXIgJiYgbi5hZGRFdmVudExpc3RlbmVyKCJiZWZvcmV1bmxvYWQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGUuc2NyaXB0ICYmIChlLnNjcmlwdC5vbmVycm9yID0gcik7CiAgICAgICAgICB9LCAhMSk7CiAgICAgICAgfXZhciBpID0gdCgiLi9wb2xsaW5nIiksCiAgICAgICAgICAgIHMgPSB0KCJjb21wb25lbnQtaW5oZXJpdCIpO2UuZXhwb3J0cyA9IG87dmFyIGEsCiAgICAgICAgICAgIGMgPSAvXG4vZywKICAgICAgICAgICAgcCA9IC9cXG4vZztzKG8sIGkpLCBvLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9ICExLCBvLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgdGhpcy5zY3JpcHQgJiYgKHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpLCB0aGlzLnNjcmlwdCA9IG51bGwpLCB0aGlzLmZvcm0gJiYgKHRoaXMuZm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9ybSksIHRoaXMuZm9ybSA9IG51bGwsIHRoaXMuaWZyYW1lID0gbnVsbCksIGkucHJvdG90eXBlLmRvQ2xvc2UuY2FsbCh0aGlzKTsKICAgICAgICB9LCBvLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgdCA9IHRoaXMsCiAgICAgICAgICAgICAgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpO3RoaXMuc2NyaXB0ICYmICh0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KSwgdGhpcy5zY3JpcHQgPSBudWxsKSwgZS5hc3luYyA9ICEwLCBlLnNyYyA9IHRoaXMudXJpKCksIGUub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHQub25FcnJvcigianNvbnAgcG9sbCBlcnJvciIsIGUpOwogICAgICAgICAgfTt2YXIgbiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzY3JpcHQiKVswXTtuID8gbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLCBuKSA6IChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmJvZHkpLmFwcGVuZENoaWxkKGUpLCB0aGlzLnNjcmlwdCA9IGU7dmFyIHIgPSAidW5kZWZpbmVkIiAhPSB0eXBlb2YgbmF2aWdhdG9yICYmIC9nZWNrby9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7ciAmJiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpZnJhbWUiKTtkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHQpLCBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHQpOwogICAgICAgICAgfSwgMTAwKTsKICAgICAgICB9LCBvLnByb3RvdHlwZS5kb1dyaXRlID0gZnVuY3Rpb24gKHQsIGUpIHsKICAgICAgICAgIGZ1bmN0aW9uIG4oKSB7CiAgICAgICAgICAgIHIoKSwgZSgpOwogICAgICAgICAgfWZ1bmN0aW9uIHIoKSB7CiAgICAgICAgICAgIGlmIChvLmlmcmFtZSkgdHJ5IHsKICAgICAgICAgICAgICBvLmZvcm0ucmVtb3ZlQ2hpbGQoby5pZnJhbWUpOwogICAgICAgICAgICB9IGNhdGNoICh0KSB7CiAgICAgICAgICAgICAgby5vbkVycm9yKCJqc29ucCBwb2xsaW5nIGlmcmFtZSByZW1vdmFsIGVycm9yIiwgdCk7CiAgICAgICAgICAgIH10cnkgewogICAgICAgICAgICAgIHZhciBlID0gJzxpZnJhbWUgc3JjPSJqYXZhc2NyaXB0OjAiIG5hbWU9IicgKyBvLmlmcmFtZUlkICsgJyI+JztpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlKTsKICAgICAgICAgICAgfSBjYXRjaCAodCkgewogICAgICAgICAgICAgIGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpZnJhbWUiKSwgaS5uYW1lID0gby5pZnJhbWVJZCwgaS5zcmMgPSAiamF2YXNjcmlwdDowIjsKICAgICAgICAgICAgfWkuaWQgPSBvLmlmcmFtZUlkLCBvLmZvcm0uYXBwZW5kQ2hpbGQoaSksIG8uaWZyYW1lID0gaTsKICAgICAgICAgIH12YXIgbyA9IHRoaXM7aWYgKCF0aGlzLmZvcm0pIHsKICAgICAgICAgICAgdmFyIGksCiAgICAgICAgICAgICAgICBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZm9ybSIpLAogICAgICAgICAgICAgICAgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRleHRhcmVhIiksCiAgICAgICAgICAgICAgICB1ID0gdGhpcy5pZnJhbWVJZCA9ICJlaW9faWZyYW1lXyIgKyB0aGlzLmluZGV4O3MuY2xhc3NOYW1lID0gInNvY2tldGlvIiwgcy5zdHlsZS5wb3NpdGlvbiA9ICJhYnNvbHV0ZSIsIHMuc3R5bGUudG9wID0gIi0xMDAwcHgiLCBzLnN0eWxlLmxlZnQgPSAiLTEwMDBweCIsIHMudGFyZ2V0ID0gdSwgcy5tZXRob2QgPSAiUE9TVCIsIHMuc2V0QXR0cmlidXRlKCJhY2NlcHQtY2hhcnNldCIsICJ1dGYtOCIpLCBhLm5hbWUgPSAiZCIsIHMuYXBwZW5kQ2hpbGQoYSksIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocyksIHRoaXMuZm9ybSA9IHMsIHRoaXMuYXJlYSA9IGE7CiAgICAgICAgICB9dGhpcy5mb3JtLmFjdGlvbiA9IHRoaXMudXJpKCksIHIoKSwgdCA9IHQucmVwbGFjZShwLCAiXFxcbiIpLCB0aGlzLmFyZWEudmFsdWUgPSB0LnJlcGxhY2UoYywgIlxcbiIpO3RyeSB7CiAgICAgICAgICAgIHRoaXMuZm9ybS5zdWJtaXQoKTsKICAgICAgICAgIH0gY2F0Y2ggKGYpIHt9dGhpcy5pZnJhbWUuYXR0YWNoRXZlbnQgPyB0aGlzLmlmcmFtZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICJjb21wbGV0ZSIgPT0gby5pZnJhbWUucmVhZHlTdGF0ZSAmJiBuKCk7CiAgICAgICAgICB9IDogdGhpcy5pZnJhbWUub25sb2FkID0gbjsKICAgICAgICB9OwogICAgICB9KS5jYWxsKHRoaXMsICJ1bmRlZmluZWQiICE9IHR5cGVvZiBnbG9iYWwgPyBnbG9iYWwgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygc2VsZiA/IHNlbGYgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDoge30pOwogICAgfSwgeyAiLi9wb2xsaW5nIjogMTksICJjb21wb25lbnQtaW5oZXJpdCI6IDkgfV0sIDE4OiBbZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgKGZ1bmN0aW9uIChuKSB7CiAgICAgICAgZnVuY3Rpb24gcigpIHt9ZnVuY3Rpb24gbyh0KSB7CiAgICAgICAgICBpZiAoKGMuY2FsbCh0aGlzLCB0KSwgbi5sb2NhdGlvbikpIHsKICAgICAgICAgICAgdmFyIGUgPSAiaHR0cHM6IiA9PSBsb2NhdGlvbi5wcm90b2NvbCwKICAgICAgICAgICAgICAgIHIgPSBsb2NhdGlvbi5wb3J0O3IgfHwgKHIgPSBlID8gNDQzIDogODApLCB0aGlzLnhkID0gdC5ob3N0bmFtZSAhPSBuLmxvY2F0aW9uLmhvc3RuYW1lIHx8IHIgIT0gdC5wb3J0LCB0aGlzLnhzID0gdC5zZWN1cmUgIT0gZTsKICAgICAgICAgIH0gZWxzZSB0aGlzLmV4dHJhSGVhZGVycyA9IHQuZXh0cmFIZWFkZXJzOwogICAgICAgIH1mdW5jdGlvbiBpKHQpIHsKICAgICAgICAgIHRoaXMubWV0aG9kID0gdC5tZXRob2QgfHwgIkdFVCIsIHRoaXMudXJpID0gdC51cmksIHRoaXMueGQgPSAhIXQueGQsIHRoaXMueHMgPSAhIXQueHMsIHRoaXMuYXN5bmMgPSAhMSAhPT0gdC5hc3luYywgdGhpcy5kYXRhID0gdm9pZCAwICE9IHQuZGF0YSA/IHQuZGF0YSA6IG51bGwsIHRoaXMuYWdlbnQgPSB0LmFnZW50LCB0aGlzLmlzQmluYXJ5ID0gdC5pc0JpbmFyeSwgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IHQuc3VwcG9ydHNCaW5hcnksIHRoaXMuZW5hYmxlc1hEUiA9IHQuZW5hYmxlc1hEUiwgdGhpcy5wZnggPSB0LnBmeCwgdGhpcy5rZXkgPSB0LmtleSwgdGhpcy5wYXNzcGhyYXNlID0gdC5wYXNzcGhyYXNlLCB0aGlzLmNlcnQgPSB0LmNlcnQsIHRoaXMuY2EgPSB0LmNhLCB0aGlzLmNpcGhlcnMgPSB0LmNpcGhlcnMsIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gdC5yZWplY3RVbmF1dGhvcml6ZWQsIHRoaXMuZXh0cmFIZWFkZXJzID0gdC5leHRyYUhlYWRlcnMsIHRoaXMuY3JlYXRlKCk7CiAgICAgICAgfWZ1bmN0aW9uIHMoKSB7CiAgICAgICAgICBmb3IgKHZhciB0IGluIGkucmVxdWVzdHMpIGkucmVxdWVzdHMuaGFzT3duUHJvcGVydHkodCkgJiYgaS5yZXF1ZXN0c1t0XS5hYm9ydCgpOwogICAgICAgIH12YXIgYSA9IHQoInhtbGh0dHByZXF1ZXN0LXNzbCIpLAogICAgICAgICAgICBjID0gdCgiLi9wb2xsaW5nIiksCiAgICAgICAgICAgIHAgPSB0KCJjb21wb25lbnQtZW1pdHRlciIpLAogICAgICAgICAgICB1ID0gdCgiY29tcG9uZW50LWluaGVyaXQiKSwKICAgICAgICAgICAgZiA9IHQoImRlYnVnIikoImVuZ2luZS5pby1jbGllbnQ6cG9sbGluZy14aHIiKTtlLmV4cG9ydHMgPSBvLCBlLmV4cG9ydHMuUmVxdWVzdCA9IGksIHUobywgYyksIG8ucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gITAsIG8ucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiAodCkgewogICAgICAgICAgcmV0dXJuIHQgPSB0IHx8IHt9LCB0LnVyaSA9IHRoaXMudXJpKCksIHQueGQgPSB0aGlzLnhkLCB0LnhzID0gdGhpcy54cywgdC5hZ2VudCA9IHRoaXMuYWdlbnQgfHwgITEsIHQuc3VwcG9ydHNCaW5hcnkgPSB0aGlzLnN1cHBvcnRzQmluYXJ5LCB0LmVuYWJsZXNYRFIgPSB0aGlzLmVuYWJsZXNYRFIsIHQucGZ4ID0gdGhpcy5wZngsIHQua2V5ID0gdGhpcy5rZXksIHQucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZSwgdC5jZXJ0ID0gdGhpcy5jZXJ0LCB0LmNhID0gdGhpcy5jYSwgdC5jaXBoZXJzID0gdGhpcy5jaXBoZXJzLCB0LnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkLCB0LmV4dHJhSGVhZGVycyA9IHRoaXMuZXh0cmFIZWFkZXJzLCBuZXcgaSh0KTsKICAgICAgICB9LCBvLnByb3RvdHlwZS5kb1dyaXRlID0gZnVuY3Rpb24gKHQsIGUpIHsKICAgICAgICAgIHZhciBuID0gInN0cmluZyIgIT0gdHlwZW9mIHQgJiYgdm9pZCAwICE9PSB0LAogICAgICAgICAgICAgIHIgPSB0aGlzLnJlcXVlc3QoeyBtZXRob2Q6ICJQT1NUIiwgZGF0YTogdCwgaXNCaW5hcnk6IG4gfSksCiAgICAgICAgICAgICAgbyA9IHRoaXM7ci5vbigic3VjY2VzcyIsIGUpLCByLm9uKCJlcnJvciIsIGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgIG8ub25FcnJvcigieGhyIHBvc3QgZXJyb3IiLCB0KTsKICAgICAgICAgIH0pLCB0aGlzLnNlbmRYaHIgPSByOwogICAgICAgIH0sIG8ucHJvdG90eXBlLmRvUG9sbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGYoInhociBwb2xsIik7dmFyIHQgPSB0aGlzLnJlcXVlc3QoKSwKICAgICAgICAgICAgICBlID0gdGhpczt0Lm9uKCJkYXRhIiwgZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgZS5vbkRhdGEodCk7CiAgICAgICAgICB9KSwgdC5vbigiZXJyb3IiLCBmdW5jdGlvbiAodCkgewogICAgICAgICAgICBlLm9uRXJyb3IoInhociBwb2xsIGVycm9yIiwgdCk7CiAgICAgICAgICB9KSwgdGhpcy5wb2xsWGhyID0gdDsKICAgICAgICB9LCBwKGkucHJvdG90eXBlKSwgaS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIHQgPSB7IGFnZW50OiB0aGlzLmFnZW50LCB4ZG9tYWluOiB0aGlzLnhkLCB4c2NoZW1lOiB0aGlzLnhzLCBlbmFibGVzWERSOiB0aGlzLmVuYWJsZXNYRFIgfTt0LnBmeCA9IHRoaXMucGZ4LCB0LmtleSA9IHRoaXMua2V5LCB0LnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2UsIHQuY2VydCA9IHRoaXMuY2VydCwgdC5jYSA9IHRoaXMuY2EsIHQuY2lwaGVycyA9IHRoaXMuY2lwaGVycywgdC5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDt2YXIgZSA9IHRoaXMueGhyID0gbmV3IGEodCksCiAgICAgICAgICAgICAgciA9IHRoaXM7dHJ5IHsKICAgICAgICAgICAgZigieGhyIG9wZW4gJXM6ICVzIiwgdGhpcy5tZXRob2QsIHRoaXMudXJpKSwgZS5vcGVuKHRoaXMubWV0aG9kLCB0aGlzLnVyaSwgdGhpcy5hc3luYyk7dHJ5IHsKICAgICAgICAgICAgICBpZiAodGhpcy5leHRyYUhlYWRlcnMpIHsKICAgICAgICAgICAgICAgIGUuc2V0RGlzYWJsZUhlYWRlckNoZWNrKCEwKTtmb3IgKHZhciBvIGluIHRoaXMuZXh0cmFIZWFkZXJzKSB0aGlzLmV4dHJhSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShvKSAmJiBlLnNldFJlcXVlc3RIZWFkZXIobywgdGhpcy5leHRyYUhlYWRlcnNbb10pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaCAocykge31pZiAoKHRoaXMuc3VwcG9ydHNCaW5hcnkgJiYgKGUucmVzcG9uc2VUeXBlID0gImFycmF5YnVmZmVyIiksICJQT1NUIiA9PSB0aGlzLm1ldGhvZCkpIHRyeSB7CiAgICAgICAgICAgICAgdGhpcy5pc0JpbmFyeSA/IGUuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC10eXBlIiwgImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSIpIDogZS5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LXR5cGUiLCAidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Iik7CiAgICAgICAgICAgIH0gY2F0Y2ggKHMpIHt9IndpdGhDcmVkZW50aWFscyIgaW4gZSAmJiAoZS53aXRoQ3JlZGVudGlhbHMgPSAhMCksIHRoaXMuaGFzWERSKCkgPyAoZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgci5vbkxvYWQoKTsKICAgICAgICAgICAgfSwgZS5vbmVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHIub25FcnJvcihlLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgIH0pIDogZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgNCA9PSBlLnJlYWR5U3RhdGUgJiYgKDIwMCA9PSBlLnN0YXR1cyB8fCAxMjIzID09IGUuc3RhdHVzID8gci5vbkxvYWQoKSA6IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgci5vbkVycm9yKGUuc3RhdHVzKTsKICAgICAgICAgICAgICB9LCAwKSk7CiAgICAgICAgICAgIH0sIGYoInhociBkYXRhICVzIiwgdGhpcy5kYXRhKSwgZS5zZW5kKHRoaXMuZGF0YSk7CiAgICAgICAgICB9IGNhdGNoIChzKSB7CiAgICAgICAgICAgIHJldHVybiB2b2lkIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHIub25FcnJvcihzKTsKICAgICAgICAgICAgfSwgMCk7CiAgICAgICAgICB9bi5kb2N1bWVudCAmJiAodGhpcy5pbmRleCA9IGkucmVxdWVzdHNDb3VudCsrLCBpLnJlcXVlc3RzW3RoaXMuaW5kZXhdID0gdGhpcyk7CiAgICAgICAgfSwgaS5wcm90b3R5cGUub25TdWNjZXNzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgdGhpcy5lbWl0KCJzdWNjZXNzIiksIHRoaXMuY2xlYW51cCgpOwogICAgICAgIH0sIGkucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICB0aGlzLmVtaXQoImRhdGEiLCB0KSwgdGhpcy5vblN1Y2Nlc3MoKTsKICAgICAgICB9LCBpLnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICAgIHRoaXMuZW1pdCgiZXJyb3IiLCB0KSwgdGhpcy5jbGVhbnVwKCEwKTsKICAgICAgICB9LCBpLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICAgIGlmICgidW5kZWZpbmVkIiAhPSB0eXBlb2YgdGhpcy54aHIgJiYgbnVsbCAhPT0gdGhpcy54aHIpIHsKICAgICAgICAgICAgaWYgKCh0aGlzLmhhc1hEUigpID8gdGhpcy54aHIub25sb2FkID0gdGhpcy54aHIub25lcnJvciA9IHIgOiB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSByLCB0KSkgdHJ5IHsKICAgICAgICAgICAgICB0aGlzLnhoci5hYm9ydCgpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7fW4uZG9jdW1lbnQgJiYgZGVsZXRlIGkucmVxdWVzdHNbdGhpcy5pbmRleF0sIHRoaXMueGhyID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9LCBpLnByb3RvdHlwZS5vbkxvYWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgdDt0cnkgewogICAgICAgICAgICB2YXIgZTt0cnkgewogICAgICAgICAgICAgIGUgPSB0aGlzLnhoci5nZXRSZXNwb25zZUhlYWRlcigiQ29udGVudC1UeXBlIikuc3BsaXQoIjsiKVswXTsKICAgICAgICAgICAgfSBjYXRjaCAobikge31pZiAoImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSIgPT09IGUpIHQgPSB0aGlzLnhoci5yZXNwb25zZTtlbHNlIGlmICh0aGlzLnN1cHBvcnRzQmluYXJ5KSB0cnkgewogICAgICAgICAgICAgIHQgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KHRoaXMueGhyLnJlc3BvbnNlKSk7CiAgICAgICAgICAgIH0gY2F0Y2ggKG4pIHsKICAgICAgICAgICAgICBmb3IgKHZhciByID0gbmV3IFVpbnQ4QXJyYXkodGhpcy54aHIucmVzcG9uc2UpLCBvID0gW10sIGkgPSAwLCBzID0gci5sZW5ndGg7IHMgPiBpOyBpKyspIG8ucHVzaChyW2ldKTt0ID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBvKTsKICAgICAgICAgICAgfSBlbHNlIHQgPSB0aGlzLnhoci5yZXNwb25zZVRleHQ7CiAgICAgICAgICB9IGNhdGNoIChuKSB7CiAgICAgICAgICAgIHRoaXMub25FcnJvcihuKTsKICAgICAgICAgIH1udWxsICE9IHQgJiYgdGhpcy5vbkRhdGEodCk7CiAgICAgICAgfSwgaS5wcm90b3R5cGUuaGFzWERSID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuICJ1bmRlZmluZWQiICE9IHR5cGVvZiBuLlhEb21haW5SZXF1ZXN0ICYmICF0aGlzLnhzICYmIHRoaXMuZW5hYmxlc1hEUjsKICAgICAgICB9LCBpLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHRoaXMuY2xlYW51cCgpOwogICAgICAgIH0sIG4uZG9jdW1lbnQgJiYgKGkucmVxdWVzdHNDb3VudCA9IDAsIGkucmVxdWVzdHMgPSB7fSwgbi5hdHRhY2hFdmVudCA/IG4uYXR0YWNoRXZlbnQoIm9udW5sb2FkIiwgcykgOiBuLmFkZEV2ZW50TGlzdGVuZXIgJiYgbi5hZGRFdmVudExpc3RlbmVyKCJiZWZvcmV1bmxvYWQiLCBzLCAhMSkpOwogICAgICB9KS5jYWxsKHRoaXMsICJ1bmRlZmluZWQiICE9IHR5cGVvZiBnbG9iYWwgPyBnbG9iYWwgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygc2VsZiA/IHNlbGYgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDoge30pOwogICAgfSwgeyAiLi9wb2xsaW5nIjogMTksICJjb21wb25lbnQtZW1pdHRlciI6IDIyLCAiY29tcG9uZW50LWluaGVyaXQiOiA5LCBkZWJ1ZzogMTAsICJ4bWxodHRwcmVxdWVzdC1zc2wiOiAyMSB9XSwgMTk6IFtmdW5jdGlvbiAodCwgZSwgbikgewogICAgICBmdW5jdGlvbiByKHQpIHsKICAgICAgICB2YXIgZSA9IHQgJiYgdC5mb3JjZUJhc2U2NDsoIXUgfHwgZSkgJiYgKHRoaXMuc3VwcG9ydHNCaW5hcnkgPSAhMSksIG8uY2FsbCh0aGlzLCB0KTsKICAgICAgfXZhciBvID0gdCgiLi4vdHJhbnNwb3J0IiksCiAgICAgICAgICBpID0gdCgicGFyc2VxcyIpLAogICAgICAgICAgcyA9IHQoImVuZ2luZS5pby1wYXJzZXIiKSwKICAgICAgICAgIGEgPSB0KCJjb21wb25lbnQtaW5oZXJpdCIpLAogICAgICAgICAgYyA9IHQoInllYXN0IiksCiAgICAgICAgICBwID0gdCgiZGVidWciKSgiZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nIik7ZS5leHBvcnRzID0gcjt2YXIgdSA9IChmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGUgPSB0KCJ4bWxodHRwcmVxdWVzdC1zc2wiKSwKICAgICAgICAgICAgbiA9IG5ldyBlKHsgeGRvbWFpbjogITEgfSk7cmV0dXJuIG51bGwgIT0gbi5yZXNwb25zZVR5cGU7CiAgICAgIH0pKCk7YShyLCBvKSwgci5wcm90b3R5cGUubmFtZSA9ICJwb2xsaW5nIiwgci5wcm90b3R5cGUuZG9PcGVuID0gZnVuY3Rpb24gKCkgewogICAgICAgIHRoaXMucG9sbCgpOwogICAgICB9LCByLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgZnVuY3Rpb24gZSgpIHsKICAgICAgICAgIHAoInBhdXNlZCIpLCBuLnJlYWR5U3RhdGUgPSAicGF1c2VkIiwgdCgpOwogICAgICAgIH12YXIgbiA9IHRoaXM7aWYgKCh0aGlzLnJlYWR5U3RhdGUgPSAicGF1c2luZyIsIHRoaXMucG9sbGluZyB8fCAhdGhpcy53cml0YWJsZSkpIHsKICAgICAgICAgIHZhciByID0gMDt0aGlzLnBvbGxpbmcgJiYgKHAoIndlIGFyZSBjdXJyZW50bHkgcG9sbGluZyAtIHdhaXRpbmcgdG8gcGF1c2UiKSwgcisrLCB0aGlzLm9uY2UoInBvbGxDb21wbGV0ZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcCgicHJlLXBhdXNlIHBvbGxpbmcgY29tcGxldGUiKSwgLS1yIHx8IGUoKTsKICAgICAgICAgIH0pKSwgdGhpcy53cml0YWJsZSB8fCAocCgid2UgYXJlIGN1cnJlbnRseSB3cml0aW5nIC0gd2FpdGluZyB0byBwYXVzZSIpLCByKyssIHRoaXMub25jZSgiZHJhaW4iLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHAoInByZS1wYXVzZSB3cml0aW5nIGNvbXBsZXRlIiksIC0tciB8fCBlKCk7CiAgICAgICAgICB9KSk7CiAgICAgICAgfSBlbHNlIGUoKTsKICAgICAgfSwgci5wcm90b3R5cGUucG9sbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBwKCJwb2xsaW5nIiksIHRoaXMucG9sbGluZyA9ICEwLCB0aGlzLmRvUG9sbCgpLCB0aGlzLmVtaXQoInBvbGwiKTsKICAgICAgfSwgci5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICB2YXIgZSA9IHRoaXM7cCgicG9sbGluZyBnb3QgZGF0YSAlcyIsIHQpO3ZhciBuID0gZnVuY3Rpb24gbih0LCBfbiwgcikgewogICAgICAgICAgcmV0dXJuICJvcGVuaW5nIiA9PSBlLnJlYWR5U3RhdGUgJiYgZS5vbk9wZW4oKSwgImNsb3NlIiA9PSB0LnR5cGUgPyAoZS5vbkNsb3NlKCksICExKSA6IHZvaWQgZS5vblBhY2tldCh0KTsKICAgICAgICB9O3MuZGVjb2RlUGF5bG9hZCh0LCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlLCBuKSwgImNsb3NlZCIgIT0gdGhpcy5yZWFkeVN0YXRlICYmICh0aGlzLnBvbGxpbmcgPSAhMSwgdGhpcy5lbWl0KCJwb2xsQ29tcGxldGUiKSwgIm9wZW4iID09IHRoaXMucmVhZHlTdGF0ZSA/IHRoaXMucG9sbCgpIDogcCgnaWdub3JpbmcgcG9sbCAtIHRyYW5zcG9ydCBzdGF0ZSAiJXMiJywgdGhpcy5yZWFkeVN0YXRlKSk7CiAgICAgIH0sIHIucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgZnVuY3Rpb24gdCgpIHsKICAgICAgICAgIHAoIndyaXRpbmcgY2xvc2UgcGFja2V0IiksIGUud3JpdGUoW3sgdHlwZTogImNsb3NlIiB9XSk7CiAgICAgICAgfXZhciBlID0gdGhpczsib3BlbiIgPT0gdGhpcy5yZWFkeVN0YXRlID8gKHAoInRyYW5zcG9ydCBvcGVuIC0gY2xvc2luZyIpLCB0KCkpIDogKHAoInRyYW5zcG9ydCBub3Qgb3BlbiAtIGRlZmVycmluZyBjbG9zZSIpLCB0aGlzLm9uY2UoIm9wZW4iLCB0KSk7CiAgICAgIH0sIHIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICB2YXIgZSA9IHRoaXM7dGhpcy53cml0YWJsZSA9ICExO3ZhciBuID0gZnVuY3Rpb24gbigpIHsKICAgICAgICAgIGUud3JpdGFibGUgPSAhMCwgZS5lbWl0KCJkcmFpbiIpOwogICAgICAgIH0sCiAgICAgICAgICAgIGUgPSB0aGlzO3MuZW5jb2RlUGF5bG9hZCh0LCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAodCkgewogICAgICAgICAgZS5kb1dyaXRlKHQsIG4pOwogICAgICAgIH0pOwogICAgICB9LCByLnByb3RvdHlwZS51cmkgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHQgPSB0aGlzLnF1ZXJ5IHx8IHt9LAogICAgICAgICAgICBlID0gdGhpcy5zZWN1cmUgPyAiaHR0cHMiIDogImh0dHAiLAogICAgICAgICAgICBuID0gIiI7ITEgIT09IHRoaXMudGltZXN0YW1wUmVxdWVzdHMgJiYgKHRbdGhpcy50aW1lc3RhbXBQYXJhbV0gPSBjKCkpLCB0aGlzLnN1cHBvcnRzQmluYXJ5IHx8IHQuc2lkIHx8ICh0LmI2NCA9IDEpLCB0ID0gaS5lbmNvZGUodCksIHRoaXMucG9ydCAmJiAoImh0dHBzIiA9PSBlICYmIDQ0MyAhPSB0aGlzLnBvcnQgfHwgImh0dHAiID09IGUgJiYgODAgIT0gdGhpcy5wb3J0KSAmJiAobiA9ICI6IiArIHRoaXMucG9ydCksIHQubGVuZ3RoICYmICh0ID0gIj8iICsgdCk7dmFyIHIgPSAtMSAhPT0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCI6Iik7cmV0dXJuIGUgKyAiOi8vIiArIChyID8gIlsiICsgdGhpcy5ob3N0bmFtZSArICJdIiA6IHRoaXMuaG9zdG5hbWUpICsgbiArIHRoaXMucGF0aCArIHQ7CiAgICAgIH07CiAgICB9LCB7ICIuLi90cmFuc3BvcnQiOiAxNSwgImNvbXBvbmVudC1pbmhlcml0IjogOSwgZGVidWc6IDEwLCAiZW5naW5lLmlvLXBhcnNlciI6IDIzLCBwYXJzZXFzOiAzMywgInhtbGh0dHByZXF1ZXN0LXNzbCI6IDIxLCB5ZWFzdDogNDYgfV0sIDIwOiBbZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgKGZ1bmN0aW9uIChuKSB7CiAgICAgICAgZnVuY3Rpb24gcih0KSB7CiAgICAgICAgICB2YXIgZSA9IHQgJiYgdC5mb3JjZUJhc2U2NDtlICYmICh0aGlzLnN1cHBvcnRzQmluYXJ5ID0gITEpLCB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0gdC5wZXJNZXNzYWdlRGVmbGF0ZSwgby5jYWxsKHRoaXMsIHQpOwogICAgICAgIH12YXIgbyA9IHQoIi4uL3RyYW5zcG9ydCIpLAogICAgICAgICAgICBpID0gdCgiZW5naW5lLmlvLXBhcnNlciIpLAogICAgICAgICAgICBzID0gdCgicGFyc2VxcyIpLAogICAgICAgICAgICBhID0gdCgiY29tcG9uZW50LWluaGVyaXQiKSwKICAgICAgICAgICAgYyA9IHQoInllYXN0IiksCiAgICAgICAgICAgIHAgPSB0KCJkZWJ1ZyIpKCJlbmdpbmUuaW8tY2xpZW50OndlYnNvY2tldCIpLAogICAgICAgICAgICB1ID0gbi5XZWJTb2NrZXQgfHwgbi5Nb3pXZWJTb2NrZXQsCiAgICAgICAgICAgIGYgPSB1IHx8ICgidW5kZWZpbmVkIiAhPSB0eXBlb2Ygd2luZG93ID8gbnVsbCA6IHQoIndzIikpO2UuZXhwb3J0cyA9IHIsIGEociwgbyksIHIucHJvdG90eXBlLm5hbWUgPSAid2Vic29ja2V0Iiwgci5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSAhMCwgci5wcm90b3R5cGUuZG9PcGVuID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKHRoaXMuY2hlY2soKSkgewogICAgICAgICAgICB2YXIgdCA9IHRoaXMudXJpKCksCiAgICAgICAgICAgICAgICBlID0gdm9pZCAwLAogICAgICAgICAgICAgICAgbiA9IHsgYWdlbnQ6IHRoaXMuYWdlbnQsIHBlck1lc3NhZ2VEZWZsYXRlOiB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlIH07bi5wZnggPSB0aGlzLnBmeCwgbi5rZXkgPSB0aGlzLmtleSwgbi5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlLCBuLmNlcnQgPSB0aGlzLmNlcnQsIG4uY2EgPSB0aGlzLmNhLCBuLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnMsIG4ucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQsIHRoaXMuZXh0cmFIZWFkZXJzICYmIChuLmhlYWRlcnMgPSB0aGlzLmV4dHJhSGVhZGVycyksIHRoaXMud3MgPSB1ID8gbmV3IGYodCkgOiBuZXcgZih0LCBlLCBuKSwgdm9pZCAwID09PSB0aGlzLndzLmJpbmFyeVR5cGUgJiYgKHRoaXMuc3VwcG9ydHNCaW5hcnkgPSAhMSksIHRoaXMud3Muc3VwcG9ydHMgJiYgdGhpcy53cy5zdXBwb3J0cy5iaW5hcnkgPyAodGhpcy5zdXBwb3J0c0JpbmFyeSA9ICEwLCB0aGlzLndzLmJpbmFyeVR5cGUgPSAiYnVmZmVyIikgOiB0aGlzLndzLmJpbmFyeVR5cGUgPSAiYXJyYXlidWZmZXIiLCB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwgci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgdCA9IHRoaXM7dGhpcy53cy5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHQub25PcGVuKCk7CiAgICAgICAgICB9LCB0aGlzLndzLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHQub25DbG9zZSgpOwogICAgICAgICAgfSwgdGhpcy53cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICB0Lm9uRGF0YShlLmRhdGEpOwogICAgICAgICAgfSwgdGhpcy53cy5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgdC5vbkVycm9yKCJ3ZWJzb2NrZXQgZXJyb3IiLCBlKTsKICAgICAgICAgIH07CiAgICAgICAgfSwgInVuZGVmaW5lZCIgIT0gdHlwZW9mIG5hdmlnYXRvciAmJiAvaVBhZHxpUGhvbmV8aVBvZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgKHIucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICB2YXIgZSA9IHRoaXM7c2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIG8ucHJvdG90eXBlLm9uRGF0YS5jYWxsKGUsIHQpOwogICAgICAgICAgfSwgMCk7CiAgICAgICAgfSksIHIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICAgIGZ1bmN0aW9uIGUoKSB7CiAgICAgICAgICAgIHIuZW1pdCgiZmx1c2giKSwgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgci53cml0YWJsZSA9ICEwLCByLmVtaXQoImRyYWluIik7CiAgICAgICAgICAgIH0sIDApOwogICAgICAgICAgfXZhciByID0gdGhpczt0aGlzLndyaXRhYmxlID0gITE7Zm9yICh2YXIgbyA9IHQubGVuZ3RoLCBzID0gMCwgYSA9IG87IGEgPiBzOyBzKyspICEoZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgaS5lbmNvZGVQYWNrZXQodCwgci5zdXBwb3J0c0JpbmFyeSwgZnVuY3Rpb24gKGkpIHsKICAgICAgICAgICAgICBpZiAoIXUpIHsKICAgICAgICAgICAgICAgIHZhciBzID0ge307aWYgKCh0Lm9wdGlvbnMgJiYgKHMuY29tcHJlc3MgPSB0Lm9wdGlvbnMuY29tcHJlc3MpLCByLnBlck1lc3NhZ2VEZWZsYXRlKSkgewogICAgICAgICAgICAgICAgICB2YXIgYSA9ICJzdHJpbmciID09IHR5cGVvZiBpID8gbi5CdWZmZXIuYnl0ZUxlbmd0aChpKSA6IGkubGVuZ3RoO2EgPCByLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCAmJiAocy5jb21wcmVzcyA9ICExKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9dHJ5IHsKICAgICAgICAgICAgICAgIHUgPyByLndzLnNlbmQoaSkgOiByLndzLnNlbmQoaSwgcyk7CiAgICAgICAgICAgICAgfSBjYXRjaCAoYykgewogICAgICAgICAgICAgICAgcCgid2Vic29ja2V0IGNsb3NlZCBiZWZvcmUgb25jbG9zZSBldmVudCIpOwogICAgICAgICAgICAgIH0tLW8gfHwgZSgpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pKHRbc10pOwogICAgICAgIH0sIHIucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBvLnByb3RvdHlwZS5vbkNsb3NlLmNhbGwodGhpcyk7CiAgICAgICAgfSwgci5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICJ1bmRlZmluZWQiICE9IHR5cGVvZiB0aGlzLndzICYmIHRoaXMud3MuY2xvc2UoKTsKICAgICAgICB9LCByLnByb3RvdHlwZS51cmkgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgdCA9IHRoaXMucXVlcnkgfHwge30sCiAgICAgICAgICAgICAgZSA9IHRoaXMuc2VjdXJlID8gIndzcyIgOiAid3MiLAogICAgICAgICAgICAgIG4gPSAiIjt0aGlzLnBvcnQgJiYgKCJ3c3MiID09IGUgJiYgNDQzICE9IHRoaXMucG9ydCB8fCAid3MiID09IGUgJiYgODAgIT0gdGhpcy5wb3J0KSAmJiAobiA9ICI6IiArIHRoaXMucG9ydCksIHRoaXMudGltZXN0YW1wUmVxdWVzdHMgJiYgKHRbdGhpcy50aW1lc3RhbXBQYXJhbV0gPSBjKCkpLCB0aGlzLnN1cHBvcnRzQmluYXJ5IHx8ICh0LmI2NCA9IDEpLCB0ID0gcy5lbmNvZGUodCksIHQubGVuZ3RoICYmICh0ID0gIj8iICsgdCk7dmFyIHIgPSAtMSAhPT0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCI6Iik7cmV0dXJuIGUgKyAiOi8vIiArIChyID8gIlsiICsgdGhpcy5ob3N0bmFtZSArICJdIiA6IHRoaXMuaG9zdG5hbWUpICsgbiArIHRoaXMucGF0aCArIHQ7CiAgICAgICAgfSwgci5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gISghZiB8fCAiX19pbml0aWFsaXplIiBpbiBmICYmIHRoaXMubmFtZSA9PT0gci5wcm90b3R5cGUubmFtZSk7CiAgICAgICAgfTsKICAgICAgfSkuY2FsbCh0aGlzLCAidW5kZWZpbmVkIiAhPSB0eXBlb2YgZ2xvYmFsID8gZ2xvYmFsIDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIHNlbGYgPyBzZWxmIDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIHdpbmRvdyA/IHdpbmRvdyA6IHt9KTsKICAgIH0sIHsgIi4uL3RyYW5zcG9ydCI6IDE1LCAiY29tcG9uZW50LWluaGVyaXQiOiA5LCBkZWJ1ZzogMTAsICJlbmdpbmUuaW8tcGFyc2VyIjogMjMsIHBhcnNlcXM6IDMzLCB3czogNiwgeWVhc3Q6IDQ2IH1dLCAyMTogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIHZhciByID0gdCgiaGFzLWNvcnMiKTtlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCkgewogICAgICAgIHZhciBlID0gdC54ZG9tYWluLAogICAgICAgICAgICBuID0gdC54c2NoZW1lLAogICAgICAgICAgICBvID0gdC5lbmFibGVzWERSO3RyeSB7CiAgICAgICAgICBpZiAoInVuZGVmaW5lZCIgIT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICghZSB8fCByKSkgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICAgIH0gY2F0Y2ggKGkpIHt9dHJ5IHsKICAgICAgICAgIGlmICgidW5kZWZpbmVkIiAhPSB0eXBlb2YgWERvbWFpblJlcXVlc3QgJiYgIW4gJiYgbykgcmV0dXJuIG5ldyBYRG9tYWluUmVxdWVzdCgpOwogICAgICAgIH0gY2F0Y2ggKGkpIHt9aWYgKCFlKSB0cnkgewogICAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCJNaWNyb3NvZnQuWE1MSFRUUCIpOwogICAgICAgIH0gY2F0Y2ggKGkpIHt9CiAgICAgIH07CiAgICB9LCB7ICJoYXMtY29ycyI6IDI3IH1dLCAyMjogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIGZ1bmN0aW9uIHIodCkgewogICAgICAgIHJldHVybiB0ID8gbyh0KSA6IHZvaWQgMDsKICAgICAgfWZ1bmN0aW9uIG8odCkgewogICAgICAgIGZvciAodmFyIGUgaW4gci5wcm90b3R5cGUpIHRbZV0gPSByLnByb3RvdHlwZVtlXTtyZXR1cm4gdDsKICAgICAgfWUuZXhwb3J0cyA9IHIsIHIucHJvdG90eXBlLm9uID0gci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0LCBlKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fSwgKHRoaXMuX2NhbGxiYWNrc1t0XSA9IHRoaXMuX2NhbGxiYWNrc1t0XSB8fCBbXSkucHVzaChlKSwgdGhpczsKICAgICAgfSwgci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uICh0LCBlKSB7CiAgICAgICAgZnVuY3Rpb24gbigpIHsKICAgICAgICAgIHIub2ZmKHQsIG4pLCBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfXZhciByID0gdGhpcztyZXR1cm4gdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9LCBuLmZuID0gZSwgdGhpcy5vbih0LCBuKSwgdGhpczsKICAgICAgfSwgci5wcm90b3R5cGUub2ZmID0gci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSByLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSByLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHQsIGUpIHsKICAgICAgICBpZiAoKHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fSwgMCA9PSBhcmd1bWVudHMubGVuZ3RoKSkgcmV0dXJuIHRoaXMuX2NhbGxiYWNrcyA9IHt9LCB0aGlzO3ZhciBuID0gdGhpcy5fY2FsbGJhY2tzW3RdO2lmICghbikgcmV0dXJuIHRoaXM7aWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbdF0sIHRoaXM7Zm9yICh2YXIgciwgbyA9IDA7IG8gPCBuLmxlbmd0aDsgbysrKSBpZiAoKHIgPSBuW29dLCByID09PSBlIHx8IHIuZm4gPT09IGUpKSB7CiAgICAgICAgICBuLnNwbGljZShvLCAxKTticmVhazsKICAgICAgICB9cmV0dXJuIHRoaXM7CiAgICAgIH0sIHIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAodCkgewogICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTt2YXIgZSA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwKICAgICAgICAgICAgbiA9IHRoaXMuX2NhbGxiYWNrc1t0XTtpZiAobikgewogICAgICAgICAgbiA9IG4uc2xpY2UoMCk7Zm9yICh2YXIgciA9IDAsIG8gPSBuLmxlbmd0aDsgbyA+IHI7ICsrcikgbltyXS5hcHBseSh0aGlzLCBlKTsKICAgICAgICB9cmV0dXJuIHRoaXM7CiAgICAgIH0sIHIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fSwgdGhpcy5fY2FsbGJhY2tzW3RdIHx8IFtdOwogICAgICB9LCByLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbiAodCkgewogICAgICAgIHJldHVybiAhIXRoaXMubGlzdGVuZXJzKHQpLmxlbmd0aDsKICAgICAgfTsKICAgIH0sIHt9XSwgMjM6IFtmdW5jdGlvbiAodCwgZSwgbikgewogICAgICAoZnVuY3Rpb24gKGUpIHsKICAgICAgICBmdW5jdGlvbiByKHQsIGUpIHsKICAgICAgICAgIHZhciByID0gImIiICsgbi5wYWNrZXRzW3QudHlwZV0gKyB0LmRhdGEuZGF0YTtyZXR1cm4gZShyKTsKICAgICAgICB9ZnVuY3Rpb24gbyh0LCBlLCByKSB7CiAgICAgICAgICBpZiAoIWUpIHJldHVybiBuLmVuY29kZUJhc2U2NFBhY2tldCh0LCByKTt2YXIgbyA9IHQuZGF0YSwKICAgICAgICAgICAgICBpID0gbmV3IFVpbnQ4QXJyYXkobyksCiAgICAgICAgICAgICAgcyA9IG5ldyBVaW50OEFycmF5KDEgKyBvLmJ5dGVMZW5ndGgpO3NbMF0gPSBtW3QudHlwZV07Zm9yICh2YXIgYSA9IDA7IGEgPCBpLmxlbmd0aDsgYSsrKSBzW2EgKyAxXSA9IGlbYV07cmV0dXJuIHIocy5idWZmZXIpOwogICAgICAgIH1mdW5jdGlvbiBpKHQsIGUsIHIpIHsKICAgICAgICAgIGlmICghZSkgcmV0dXJuIG4uZW5jb2RlQmFzZTY0UGFja2V0KHQsIHIpO3ZhciBvID0gbmV3IEZpbGVSZWFkZXIoKTtyZXR1cm4gby5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHQuZGF0YSA9IG8ucmVzdWx0LCBuLmVuY29kZVBhY2tldCh0LCBlLCAhMCwgcik7CiAgICAgICAgICB9LCBvLnJlYWRBc0FycmF5QnVmZmVyKHQuZGF0YSk7CiAgICAgICAgfWZ1bmN0aW9uIHModCwgZSwgcikgewogICAgICAgICAgaWYgKCFlKSByZXR1cm4gbi5lbmNvZGVCYXNlNjRQYWNrZXQodCwgcik7aWYgKGcpIHJldHVybiBpKHQsIGUsIHIpO3ZhciBvID0gbmV3IFVpbnQ4QXJyYXkoMSk7b1swXSA9IG1bdC50eXBlXTt2YXIgcyA9IG5ldyB3KFtvLmJ1ZmZlciwgdC5kYXRhXSk7cmV0dXJuIHIocyk7CiAgICAgICAgfWZ1bmN0aW9uIGEodCwgZSwgbikgewogICAgICAgICAgZm9yICh2YXIgciA9IG5ldyBBcnJheSh0Lmxlbmd0aCksIG8gPSBoKHQubGVuZ3RoLCBuKSwgaSA9IGZ1bmN0aW9uIGkodCwgbiwgbykgewogICAgICAgICAgICBlKG4sIGZ1bmN0aW9uIChlLCBuKSB7CiAgICAgICAgICAgICAgclt0XSA9IG4sIG8oZSwgcik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwgcyA9IDA7IHMgPCB0Lmxlbmd0aDsgcysrKSBpKHMsIHRbc10sIG8pOwogICAgICAgIH12YXIgYyA9IHQoIi4va2V5cyIpLAogICAgICAgICAgICBwID0gdCgiaGFzLWJpbmFyeSIpLAogICAgICAgICAgICB1ID0gdCgiYXJyYXlidWZmZXIuc2xpY2UiKSwKICAgICAgICAgICAgZiA9IHQoImJhc2U2NC1hcnJheWJ1ZmZlciIpLAogICAgICAgICAgICBoID0gdCgiYWZ0ZXIiKSwKICAgICAgICAgICAgbCA9IHQoInV0ZjgiKSwKICAgICAgICAgICAgZCA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FuZHJvaWQvaSksCiAgICAgICAgICAgIHkgPSAvUGhhbnRvbUpTL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSwKICAgICAgICAgICAgZyA9IGQgfHwgeTtuLnByb3RvY29sID0gMzt2YXIgbSA9IG4ucGFja2V0cyA9IHsgb3BlbjogMCwgY2xvc2U6IDEsIHBpbmc6IDIsIHBvbmc6IDMsIG1lc3NhZ2U6IDQsIHVwZ3JhZGU6IDUsIG5vb3A6IDYgfSwKICAgICAgICAgICAgYiA9IGMobSksCiAgICAgICAgICAgIHYgPSB7IHR5cGU6ICJlcnJvciIsIGRhdGE6ICJwYXJzZXIgZXJyb3IiIH0sCiAgICAgICAgICAgIHcgPSB0KCJibG9iIik7bi5lbmNvZGVQYWNrZXQgPSBmdW5jdGlvbiAodCwgbiwgaSwgYSkgewogICAgICAgICAgImZ1bmN0aW9uIiA9PSB0eXBlb2YgbiAmJiAoYSA9IG4sIG4gPSAhMSksICJmdW5jdGlvbiIgPT0gdHlwZW9mIGkgJiYgKGEgPSBpLCBpID0gbnVsbCk7dmFyIGMgPSB2b2lkIDAgPT09IHQuZGF0YSA/IHZvaWQgMCA6IHQuZGF0YS5idWZmZXIgfHwgdC5kYXRhO2lmIChlLkFycmF5QnVmZmVyICYmIGMgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgcmV0dXJuIG8odCwgbiwgYSk7aWYgKHcgJiYgYyBpbnN0YW5jZW9mIGUuQmxvYikgcmV0dXJuIHModCwgbiwgYSk7aWYgKGMgJiYgYy5iYXNlNjQpIHJldHVybiByKHQsIGEpO3ZhciBwID0gbVt0LnR5cGVdO3JldHVybiB2b2lkIDAgIT09IHQuZGF0YSAmJiAocCArPSBpID8gbC5lbmNvZGUoU3RyaW5nKHQuZGF0YSkpIDogU3RyaW5nKHQuZGF0YSkpLCBhKCIiICsgcCk7CiAgICAgICAgfSwgbi5lbmNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbiAodCwgcikgewogICAgICAgICAgdmFyIG8gPSAiYiIgKyBuLnBhY2tldHNbdC50eXBlXTtpZiAodyAmJiB0LmRhdGEgaW5zdGFuY2VvZiBlLkJsb2IpIHsKICAgICAgICAgICAgdmFyIGkgPSBuZXcgRmlsZVJlYWRlcigpO3JldHVybiBpLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICB2YXIgdCA9IGkucmVzdWx0LnNwbGl0KCIsIilbMV07cihvICsgdCk7CiAgICAgICAgICAgIH0sIGkucmVhZEFzRGF0YVVSTCh0LmRhdGEpOwogICAgICAgICAgfXZhciBzO3RyeSB7CiAgICAgICAgICAgIHMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KHQuZGF0YSkpOwogICAgICAgICAgfSBjYXRjaCAoYSkgewogICAgICAgICAgICBmb3IgKHZhciBjID0gbmV3IFVpbnQ4QXJyYXkodC5kYXRhKSwgcCA9IG5ldyBBcnJheShjLmxlbmd0aCksIHUgPSAwOyB1IDwgYy5sZW5ndGg7IHUrKykgcFt1XSA9IGNbdV07cyA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgcCk7CiAgICAgICAgICB9cmV0dXJuIG8gKz0gZS5idG9hKHMpLCByKG8pOwogICAgICAgIH0sIG4uZGVjb2RlUGFja2V0ID0gZnVuY3Rpb24gKHQsIGUsIHIpIHsKICAgICAgICAgIGlmICgic3RyaW5nIiA9PSB0eXBlb2YgdCB8fCB2b2lkIDAgPT09IHQpIHsKICAgICAgICAgICAgaWYgKCJiIiA9PSB0LmNoYXJBdCgwKSkgcmV0dXJuIG4uZGVjb2RlQmFzZTY0UGFja2V0KHQuc3Vic3RyKDEpLCBlKTtpZiAocikgdHJ5IHsKICAgICAgICAgICAgICB0ID0gbC5kZWNvZGUodCk7CiAgICAgICAgICAgIH0gY2F0Y2ggKG8pIHsKICAgICAgICAgICAgICByZXR1cm4gdjsKICAgICAgICAgICAgfXZhciBpID0gdC5jaGFyQXQoMCk7cmV0dXJuIE51bWJlcihpKSA9PSBpICYmIGJbaV0gPyB0Lmxlbmd0aCA+IDEgPyB7IHR5cGU6IGJbaV0sIGRhdGE6IHQuc3Vic3RyaW5nKDEpIH0gOiB7IHR5cGU6IGJbaV0gfSA6IHY7CiAgICAgICAgICB9dmFyIHMgPSBuZXcgVWludDhBcnJheSh0KSwKICAgICAgICAgICAgICBpID0gc1swXSwKICAgICAgICAgICAgICBhID0gdSh0LCAxKTtyZXR1cm4gdyAmJiAiYmxvYiIgPT09IGUgJiYgKGEgPSBuZXcgdyhbYV0pKSwgeyB0eXBlOiBiW2ldLCBkYXRhOiBhIH07CiAgICAgICAgfSwgbi5kZWNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbiAodCwgbikgewogICAgICAgICAgdmFyIHIgPSBiW3QuY2hhckF0KDApXTtpZiAoIWUuQXJyYXlCdWZmZXIpIHJldHVybiB7IHR5cGU6IHIsIGRhdGE6IHsgYmFzZTY0OiAhMCwgZGF0YTogdC5zdWJzdHIoMSkgfSB9O3ZhciBvID0gZi5kZWNvZGUodC5zdWJzdHIoMSkpO3JldHVybiAiYmxvYiIgPT09IG4gJiYgdyAmJiAobyA9IG5ldyB3KFtvXSkpLCB7IHR5cGU6IHIsIGRhdGE6IG8gfTsKICAgICAgICB9LCBuLmVuY29kZVBheWxvYWQgPSBmdW5jdGlvbiAodCwgZSwgcikgewogICAgICAgICAgZnVuY3Rpb24gbyh0KSB7CiAgICAgICAgICAgIHJldHVybiB0Lmxlbmd0aCArICI6IiArIHQ7CiAgICAgICAgICB9ZnVuY3Rpb24gaSh0LCByKSB7CiAgICAgICAgICAgIG4uZW5jb2RlUGFja2V0KHQsIHMgPyBlIDogITEsICEwLCBmdW5jdGlvbiAodCkgewogICAgICAgICAgICAgIHIobnVsbCwgbyh0KSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSJmdW5jdGlvbiIgPT0gdHlwZW9mIGUgJiYgKHIgPSBlLCBlID0gbnVsbCk7dmFyIHMgPSBwKHQpO3JldHVybiBlICYmIHMgPyB3ICYmICFnID8gbi5lbmNvZGVQYXlsb2FkQXNCbG9iKHQsIHIpIDogbi5lbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlcih0LCByKSA6IHQubGVuZ3RoID8gdm9pZCBhKHQsIGksIGZ1bmN0aW9uICh0LCBlKSB7CiAgICAgICAgICAgIHJldHVybiByKGUuam9pbigiIikpOwogICAgICAgICAgfSkgOiByKCIwOiIpOwogICAgICAgIH0sIG4uZGVjb2RlUGF5bG9hZCA9IGZ1bmN0aW9uICh0LCBlLCByKSB7CiAgICAgICAgICBpZiAoInN0cmluZyIgIT0gdHlwZW9mIHQpIHJldHVybiBuLmRlY29kZVBheWxvYWRBc0JpbmFyeSh0LCBlLCByKTsiZnVuY3Rpb24iID09IHR5cGVvZiBlICYmIChyID0gZSwgZSA9IG51bGwpO3ZhciBvO2lmICgiIiA9PSB0KSByZXR1cm4gcih2LCAwLCAxKTtmb3IgKHZhciBpLCBzLCBhID0gIiIsIGMgPSAwLCBwID0gdC5sZW5ndGg7IHAgPiBjOyBjKyspIHsKICAgICAgICAgICAgdmFyIHUgPSB0LmNoYXJBdChjKTtpZiAoIjoiICE9IHUpIGEgKz0gdTtlbHNlIHsKICAgICAgICAgICAgICBpZiAoIiIgPT0gYSB8fCBhICE9IChpID0gTnVtYmVyKGEpKSkgcmV0dXJuIHIodiwgMCwgMSk7aWYgKChzID0gdC5zdWJzdHIoYyArIDEsIGkpLCBhICE9IHMubGVuZ3RoKSkgcmV0dXJuIHIodiwgMCwgMSk7aWYgKHMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBpZiAoKG8gPSBuLmRlY29kZVBhY2tldChzLCBlLCAhMCksIHYudHlwZSA9PSBvLnR5cGUgJiYgdi5kYXRhID09IG8uZGF0YSkpIHJldHVybiByKHYsIDAsIDEpO3ZhciBmID0gcihvLCBjICsgaSwgcCk7aWYgKCExID09PSBmKSByZXR1cm47CiAgICAgICAgICAgICAgfWMgKz0gaSwgYSA9ICIiOwogICAgICAgICAgICB9CiAgICAgICAgICB9cmV0dXJuICIiICE9IGEgPyByKHYsIDAsIDEpIDogdm9pZCAwOwogICAgICAgIH0sIG4uZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiAodCwgZSkgewogICAgICAgICAgZnVuY3Rpb24gcih0LCBlKSB7CiAgICAgICAgICAgIG4uZW5jb2RlUGFja2V0KHQsICEwLCAhMCwgZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgICByZXR1cm4gZShudWxsLCB0KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9cmV0dXJuIHQubGVuZ3RoID8gdm9pZCBhKHQsIHIsIGZ1bmN0aW9uICh0LCBuKSB7CiAgICAgICAgICAgIHZhciByID0gbi5yZWR1Y2UoZnVuY3Rpb24gKHQsIGUpIHsKICAgICAgICAgICAgICB2YXIgbjtyZXR1cm4gbiA9ICJzdHJpbmciID09IHR5cGVvZiBlID8gZS5sZW5ndGggOiBlLmJ5dGVMZW5ndGgsIHQgKyBuLnRvU3RyaW5nKCkubGVuZ3RoICsgbiArIDI7CiAgICAgICAgICAgIH0sIDApLAogICAgICAgICAgICAgICAgbyA9IG5ldyBVaW50OEFycmF5KHIpLAogICAgICAgICAgICAgICAgaSA9IDA7cmV0dXJuIG4uZm9yRWFjaChmdW5jdGlvbiAodCkgewogICAgICAgICAgICAgIHZhciBlID0gInN0cmluZyIgPT0gdHlwZW9mIHQsCiAgICAgICAgICAgICAgICAgIG4gPSB0O2lmIChlKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gbmV3IFVpbnQ4QXJyYXkodC5sZW5ndGgpLCBzID0gMDsgcyA8IHQubGVuZ3RoOyBzKyspIHJbc10gPSB0LmNoYXJDb2RlQXQocyk7biA9IHIuYnVmZmVyOwogICAgICAgICAgICAgIH1lID8gb1tpKytdID0gMCA6IG9baSsrXSA9IDE7Zm9yICh2YXIgYSA9IG4uYnl0ZUxlbmd0aC50b1N0cmluZygpLCBzID0gMDsgcyA8IGEubGVuZ3RoOyBzKyspIG9baSsrXSA9IHBhcnNlSW50KGFbc10pO29baSsrXSA9IDI1NTtmb3IgKHZhciByID0gbmV3IFVpbnQ4QXJyYXkobiksIHMgPSAwOyBzIDwgci5sZW5ndGg7IHMrKykgb1tpKytdID0gcltzXTsKICAgICAgICAgICAgfSksIGUoby5idWZmZXIpOwogICAgICAgICAgfSkgOiBlKG5ldyBBcnJheUJ1ZmZlcigwKSk7CiAgICAgICAgfSwgbi5lbmNvZGVQYXlsb2FkQXNCbG9iID0gZnVuY3Rpb24gKHQsIGUpIHsKICAgICAgICAgIGZ1bmN0aW9uIHIodCwgZSkgewogICAgICAgICAgICBuLmVuY29kZVBhY2tldCh0LCAhMCwgITAsIGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgVWludDhBcnJheSgxKTtpZiAoKG5bMF0gPSAxLCAic3RyaW5nIiA9PSB0eXBlb2YgdCkpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSBuZXcgVWludDhBcnJheSh0Lmxlbmd0aCksIG8gPSAwOyBvIDwgdC5sZW5ndGg7IG8rKykgcltvXSA9IHQuY2hhckNvZGVBdChvKTt0ID0gci5idWZmZXIsIG5bMF0gPSAwOwogICAgICAgICAgICAgIH1mb3IgKHZhciBpID0gdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gdC5ieXRlTGVuZ3RoIDogdC5zaXplLCBzID0gaS50b1N0cmluZygpLCBhID0gbmV3IFVpbnQ4QXJyYXkocy5sZW5ndGggKyAxKSwgbyA9IDA7IG8gPCBzLmxlbmd0aDsgbysrKSBhW29dID0gcGFyc2VJbnQoc1tvXSk7aWYgKChhW3MubGVuZ3RoXSA9IDI1NSwgdykpIHsKICAgICAgICAgICAgICAgIHZhciBjID0gbmV3IHcoW24uYnVmZmVyLCBhLmJ1ZmZlciwgdF0pO2UobnVsbCwgYyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH1hKHQsIHIsIGZ1bmN0aW9uICh0LCBuKSB7CiAgICAgICAgICAgIHJldHVybiBlKG5ldyB3KG4pKTsKICAgICAgICAgIH0pOwogICAgICAgIH0sIG4uZGVjb2RlUGF5bG9hZEFzQmluYXJ5ID0gZnVuY3Rpb24gKHQsIGUsIHIpIHsKICAgICAgICAgICJmdW5jdGlvbiIgPT0gdHlwZW9mIGUgJiYgKHIgPSBlLCBlID0gbnVsbCk7Zm9yICh2YXIgbyA9IHQsIGkgPSBbXSwgcyA9ICExOyBvLmJ5dGVMZW5ndGggPiAwOykgewogICAgICAgICAgICBmb3IgKHZhciBhID0gbmV3IFVpbnQ4QXJyYXkobyksIGMgPSAwID09PSBhWzBdLCBwID0gIiIsIGYgPSAxOyAyNTUgIT0gYVtmXTsgZisrKSB7CiAgICAgICAgICAgICAgaWYgKHAubGVuZ3RoID4gMzEwKSB7CiAgICAgICAgICAgICAgICBzID0gITA7YnJlYWs7CiAgICAgICAgICAgICAgfXAgKz0gYVtmXTsKICAgICAgICAgICAgfWlmIChzKSByZXR1cm4gcih2LCAwLCAxKTtvID0gdShvLCAyICsgcC5sZW5ndGgpLCBwID0gcGFyc2VJbnQocCk7dmFyIGggPSB1KG8sIDAsIHApO2lmIChjKSB0cnkgewogICAgICAgICAgICAgIGggPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KGgpKTsKICAgICAgICAgICAgfSBjYXRjaCAobCkgewogICAgICAgICAgICAgIHZhciBkID0gbmV3IFVpbnQ4QXJyYXkoaCk7aCA9ICIiO2ZvciAodmFyIGYgPSAwOyBmIDwgZC5sZW5ndGg7IGYrKykgaCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGRbZl0pOwogICAgICAgICAgICB9aS5wdXNoKGgpLCBvID0gdShvLCBwKTsKICAgICAgICAgIH12YXIgeSA9IGkubGVuZ3RoO2kuZm9yRWFjaChmdW5jdGlvbiAodCwgbykgewogICAgICAgICAgICByKG4uZGVjb2RlUGFja2V0KHQsIGUsICEwKSwgbywgeSk7CiAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgICB9KS5jYWxsKHRoaXMsICJ1bmRlZmluZWQiICE9IHR5cGVvZiBnbG9iYWwgPyBnbG9iYWwgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygc2VsZiA/IHNlbGYgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDoge30pOwogICAgfSwgeyAiLi9rZXlzIjogMjQsIGFmdGVyOiAxLCAiYXJyYXlidWZmZXIuc2xpY2UiOiAyLCAiYmFzZTY0LWFycmF5YnVmZmVyIjogNCwgYmxvYjogNSwgImhhcy1iaW5hcnkiOiAyNSwgdXRmODogNDUgfV0sIDI0OiBbZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKHQpIHsKICAgICAgICB2YXIgZSA9IFtdLAogICAgICAgICAgICBuID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmb3IgKHZhciByIGluIHQpIG4uY2FsbCh0LCByKSAmJiBlLnB1c2gocik7cmV0dXJuIGU7CiAgICAgIH07CiAgICB9LCB7fV0sIDI1OiBbZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgKGZ1bmN0aW9uIChuKSB7CiAgICAgICAgZnVuY3Rpb24gcih0KSB7CiAgICAgICAgICBmdW5jdGlvbiBlKHQpIHsKICAgICAgICAgICAgaWYgKCF0KSByZXR1cm4gITE7aWYgKG4uQnVmZmVyICYmIG4uQnVmZmVyLmlzQnVmZmVyKHQpIHx8IG4uQXJyYXlCdWZmZXIgJiYgdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IG4uQmxvYiAmJiB0IGluc3RhbmNlb2YgQmxvYiB8fCBuLkZpbGUgJiYgdCBpbnN0YW5jZW9mIEZpbGUpIHJldHVybiAhMDtpZiAobyh0KSkgewogICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgdC5sZW5ndGg7IHIrKykgaWYgKGUodFtyXSkpIHJldHVybiAhMDsKICAgICAgICAgICAgfSBlbHNlIGlmICh0ICYmICJvYmplY3QiID09IHR5cGVvZiB0KSB7CiAgICAgICAgICAgICAgdC50b0pTT04gJiYgKHQgPSB0LnRvSlNPTigpKTtmb3IgKHZhciBpIGluIHQpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCwgaSkgJiYgZSh0W2ldKSkgcmV0dXJuICEwOwogICAgICAgICAgICB9cmV0dXJuICExOwogICAgICAgICAgfXJldHVybiBlKHQpOwogICAgICAgIH12YXIgbyA9IHQoImlzYXJyYXkiKTtlLmV4cG9ydHMgPSByOwogICAgICB9KS5jYWxsKHRoaXMsICJ1bmRlZmluZWQiICE9IHR5cGVvZiBnbG9iYWwgPyBnbG9iYWwgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygc2VsZiA/IHNlbGYgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDoge30pOwogICAgfSwgeyBpc2FycmF5OiAyOSB9XSwgMjY6IFtmdW5jdGlvbiAodCwgZSwgbikgewogICAgICAoZnVuY3Rpb24gKG4pIHsKICAgICAgICBmdW5jdGlvbiByKHQpIHsKICAgICAgICAgIGZ1bmN0aW9uIGUodCkgewogICAgICAgICAgICBpZiAoIXQpIHJldHVybiAhMTtpZiAobi5CdWZmZXIgJiYgbi5CdWZmZXIuaXNCdWZmZXIgJiYgbi5CdWZmZXIuaXNCdWZmZXIodCkgfHwgbi5BcnJheUJ1ZmZlciAmJiB0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgbi5CbG9iICYmIHQgaW5zdGFuY2VvZiBCbG9iIHx8IG4uRmlsZSAmJiB0IGluc3RhbmNlb2YgRmlsZSkgcmV0dXJuICEwO2lmIChvKHQpKSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCB0Lmxlbmd0aDsgcisrKSBpZiAoZSh0W3JdKSkgcmV0dXJuICEwOwogICAgICAgICAgICB9IGVsc2UgaWYgKHQgJiYgIm9iamVjdCIgPT0gdHlwZW9mIHQpIHsKICAgICAgICAgICAgICB0LnRvSlNPTiAmJiAiZnVuY3Rpb24iID09IHR5cGVvZiB0LnRvSlNPTiAmJiAodCA9IHQudG9KU09OKCkpO2ZvciAodmFyIGkgaW4gdCkgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LCBpKSAmJiBlKHRbaV0pKSByZXR1cm4gITA7CiAgICAgICAgICAgIH1yZXR1cm4gITE7CiAgICAgICAgICB9cmV0dXJuIGUodCk7CiAgICAgICAgfXZhciBvID0gdCgiaXNhcnJheSIpO2UuZXhwb3J0cyA9IHI7CiAgICAgIH0pLmNhbGwodGhpcywgInVuZGVmaW5lZCIgIT0gdHlwZW9mIGdsb2JhbCA/IGdsb2JhbCA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBzZWxmID8gc2VsZiA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiB7fSk7CiAgICB9LCB7IGlzYXJyYXk6IDI5IH1dLCAyNzogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIHRyeSB7CiAgICAgICAgZS5leHBvcnRzID0gInVuZGVmaW5lZCIgIT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICJ3aXRoQ3JlZGVudGlhbHMiIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICB9IGNhdGNoIChyKSB7CiAgICAgICAgZS5leHBvcnRzID0gITE7CiAgICAgIH0KICAgIH0sIHt9XSwgMjg6IFtmdW5jdGlvbiAodCwgZSwgbikgewogICAgICB2YXIgciA9IFtdLmluZGV4T2Y7ZS5leHBvcnRzID0gZnVuY3Rpb24gKHQsIGUpIHsKICAgICAgICBpZiAocikgcmV0dXJuIHQuaW5kZXhPZihlKTtmb3IgKHZhciBuID0gMDsgbiA8IHQubGVuZ3RoOyArK24pIGlmICh0W25dID09PSBlKSByZXR1cm4gbjtyZXR1cm4gLTE7CiAgICAgIH07CiAgICB9LCB7fV0sIDI5OiBbZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAodCkgewogICAgICAgIHJldHVybiAiW29iamVjdCBBcnJheV0iID09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KTsKICAgICAgfTsKICAgIH0sIHt9XSwgMzA6IFtmdW5jdGlvbiAoZSwgbiwgcikgewogICAgICAoZnVuY3Rpb24gKGUpIHsKICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgZnVuY3Rpb24gbyh0LCBlKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIG4odCkgewogICAgICAgICAgICAgIGlmIChuW3RdICE9PSBnKSByZXR1cm4gblt0XTt2YXIgbztpZiAoImJ1Zy1zdHJpbmctY2hhci1pbmRleCIgPT0gdCkgbyA9ICJhIiAhPSAiYSJbMF07ZWxzZSBpZiAoImpzb24iID09IHQpIG8gPSBuKCJqc29uLXN0cmluZ2lmeSIpICYmIG4oImpzb24tcGFyc2UiKTtlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBzLAogICAgICAgICAgICAgICAgICAgIGEgPSAie1wiYVwiOlsxLHRydWUsZmFsc2UsbnVsbCxcIlxcdTAwMDBcXGJcXG5cXGZcXHJcXHRcIl19IjtpZiAoImpzb24tc3RyaW5naWZ5IiA9PSB0KSB7CiAgICAgICAgICAgICAgICAgIHZhciBjID0gZS5zdHJpbmdpZnksCiAgICAgICAgICAgICAgICAgICAgICB1ID0gImZ1bmN0aW9uIiA9PSB0eXBlb2YgYyAmJiB2O2lmICh1KSB7CiAgICAgICAgICAgICAgICAgICAgKHMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICAgICAgICAgICAgICB9KS50b0pTT04gPSBzO3RyeSB7CiAgICAgICAgICAgICAgICAgICAgICB1ID0gIjAiID09PSBjKDApICYmICIwIiA9PT0gYyhuZXcgcigpKSAmJiAnIiInID09IGMobmV3IGkoKSkgJiYgYyhiKSA9PT0gZyAmJiBjKGcpID09PSBnICYmIGMoKSA9PT0gZyAmJiAiMSIgPT09IGMocykgJiYgIlsxXSIgPT0gYyhbc10pICYmICJbbnVsbF0iID09IGMoW2ddKSAmJiAibnVsbCIgPT0gYyhudWxsKSAmJiAiW251bGwsbnVsbCxudWxsXSIgPT0gYyhbZywgYiwgbnVsbF0pICYmIGMoeyBhOiBbcywgITAsICExLCBudWxsLCAiXHgwMFxiXG5cZlxyCSJdIH0pID09IGEgJiYgIjEiID09PSBjKG51bGwsIHMpICYmICJbXG4gMSxcbiAyXG5dIiA9PSBjKFsxLCAyXSwgbnVsbCwgMSkgJiYgJyItMjcxODIxLTA0LTIwVDAwOjAwOjAwLjAwMFoiJyA9PSBjKG5ldyBwKC04NjRlMTMpKSAmJiAnIisyNzU3NjAtMDktMTNUMDA6MDA6MDAuMDAwWiInID09IGMobmV3IHAoODY0ZTEzKSkgJiYgJyItMDAwMDAxLTAxLTAxVDAwOjAwOjAwLjAwMFoiJyA9PSBjKG5ldyBwKC02MjE5ODc1NTJlNSkpICYmICciMTk2OS0xMi0zMVQyMzo1OTo1OS45OTlaIicgPT0gYyhuZXcgcCgtMSkpOwogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGYpIHsKICAgICAgICAgICAgICAgICAgICAgIHUgPSAhMTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH1vID0gdTsKICAgICAgICAgICAgICAgIH1pZiAoImpzb24tcGFyc2UiID09IHQpIHsKICAgICAgICAgICAgICAgICAgdmFyIGggPSBlLnBhcnNlO2lmICgiZnVuY3Rpb24iID09IHR5cGVvZiBoKSB0cnkgewogICAgICAgICAgICAgICAgICAgIGlmICgwID09PSBoKCIwIikgJiYgIWgoITEpKSB7CiAgICAgICAgICAgICAgICAgICAgICBzID0gaChhKTt2YXIgbCA9IDUgPT0gcy5hLmxlbmd0aCAmJiAxID09PSBzLmFbMF07aWYgKGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gIWgoJyIJIicpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChmKSB7fWlmIChsKSB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSAxICE9PSBoKCIwMSIpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChmKSB7fWlmIChsKSB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSAxICE9PSBoKCIxLiIpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChmKSB7fQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZikgewogICAgICAgICAgICAgICAgICAgIGwgPSAhMTsKICAgICAgICAgICAgICAgICAgfW8gPSBsOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH1yZXR1cm4gblt0XSA9ICEhbzsKICAgICAgICAgICAgfXQgfHwgKHQgPSBjLk9iamVjdCgpKSwgZSB8fCAoZSA9IGMuT2JqZWN0KCkpO3ZhciByID0gdC5OdW1iZXIgfHwgYy5OdW1iZXIsCiAgICAgICAgICAgICAgICBpID0gdC5TdHJpbmcgfHwgYy5TdHJpbmcsCiAgICAgICAgICAgICAgICBhID0gdC5PYmplY3QgfHwgYy5PYmplY3QsCiAgICAgICAgICAgICAgICBwID0gdC5EYXRlIHx8IGMuRGF0ZSwKICAgICAgICAgICAgICAgIHUgPSB0LlN5bnRheEVycm9yIHx8IGMuU3ludGF4RXJyb3IsCiAgICAgICAgICAgICAgICBmID0gdC5UeXBlRXJyb3IgfHwgYy5UeXBlRXJyb3IsCiAgICAgICAgICAgICAgICBoID0gdC5NYXRoIHx8IGMuTWF0aCwKICAgICAgICAgICAgICAgIGwgPSB0LkpTT04gfHwgYy5KU09OOyJvYmplY3QiID09IHR5cGVvZiBsICYmIGwgJiYgKGUuc3RyaW5naWZ5ID0gbC5zdHJpbmdpZnksIGUucGFyc2UgPSBsLnBhcnNlKTt2YXIgZCwKICAgICAgICAgICAgICAgIHksCiAgICAgICAgICAgICAgICBnLAogICAgICAgICAgICAgICAgbSA9IGEucHJvdG90eXBlLAogICAgICAgICAgICAgICAgYiA9IG0udG9TdHJpbmcsCiAgICAgICAgICAgICAgICB2ID0gbmV3IHAoLTB4Yzc4MmI1YjgwMGNlYyk7dHJ5IHsKICAgICAgICAgICAgICB2ID0gLTEwOTI1MiA9PSB2LmdldFVUQ0Z1bGxZZWFyKCkgJiYgMCA9PT0gdi5nZXRVVENNb250aCgpICYmIDEgPT09IHYuZ2V0VVRDRGF0ZSgpICYmIDEwID09IHYuZ2V0VVRDSG91cnMoKSAmJiAzNyA9PSB2LmdldFVUQ01pbnV0ZXMoKSAmJiA2ID09IHYuZ2V0VVRDU2Vjb25kcygpICYmIDcwOCA9PSB2LmdldFVUQ01pbGxpc2Vjb25kcygpOwogICAgICAgICAgICB9IGNhdGNoICh3KSB7fWlmICghbigianNvbiIpKSB7CiAgICAgICAgICAgICAgdmFyIGsgPSAiW29iamVjdCBGdW5jdGlvbl0iLAogICAgICAgICAgICAgICAgICB4ID0gIltvYmplY3QgRGF0ZV0iLAogICAgICAgICAgICAgICAgICBBID0gIltvYmplY3QgTnVtYmVyXSIsCiAgICAgICAgICAgICAgICAgIF8gPSAiW29iamVjdCBTdHJpbmddIiwKICAgICAgICAgICAgICAgICAgQiA9ICJbb2JqZWN0IEFycmF5XSIsCiAgICAgICAgICAgICAgICAgIEMgPSAiW29iamVjdCBCb29sZWFuXSIsCiAgICAgICAgICAgICAgICAgIFMgPSBuKCJidWctc3RyaW5nLWNoYXItaW5kZXgiKTtpZiAoIXYpIHZhciBFID0gaC5mbG9vciwKICAgICAgICAgICAgICAgICAgTyA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNF0sCiAgICAgICAgICAgICAgICAgIFQgPSBmdW5jdGlvbiBUKHQsIGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBPW2VdICsgMzY1ICogKHQgLSAxOTcwKSArIEUoKHQgLSAxOTY5ICsgKGUgPSArKGUgPiAxKSkpIC8gNCkgLSBFKCh0IC0gMTkwMSArIGUpIC8gMTAwKSArIEUoKHQgLSAxNjAxICsgZSkgLyA0MDApOwogICAgICAgICAgICAgIH07aWYgKCgoZCA9IG0uaGFzT3duUHJvcGVydHkpIHx8IChkID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgICAgIHZhciBlLAogICAgICAgICAgICAgICAgICAgIG4gPSB7fTtyZXR1cm4gKG4uX19wcm90b19fID0gbnVsbCwgbi5fX3Byb3RvX18gPSB7IHRvU3RyaW5nOiAxIH0sIG4pLnRvU3RyaW5nICE9IGIgPyBkID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl9fcHJvdG9fXywKICAgICAgICAgICAgICAgICAgICAgIG4gPSAodCBpbiAodGhpcy5fX3Byb3RvX18gPSBudWxsLCB0aGlzKSk7cmV0dXJuIHRoaXMuX19wcm90b19fID0gZSwgbjsKICAgICAgICAgICAgICAgIH0gOiAoZSA9IG4uY29uc3RydWN0b3IsIGQgPSBmdW5jdGlvbiAodCkgewogICAgICAgICAgICAgICAgICB2YXIgbiA9ICh0aGlzLmNvbnN0cnVjdG9yIHx8IGUpLnByb3RvdHlwZTtyZXR1cm4gdCBpbiB0aGlzICYmICEodCBpbiBuICYmIHRoaXNbdF0gPT09IG5bdF0pOwogICAgICAgICAgICAgICAgfSksIG4gPSBudWxsLCBkLmNhbGwodGhpcywgdCk7CiAgICAgICAgICAgICAgfSksIHkgPSBmdW5jdGlvbiAodCwgZSkgewogICAgICAgICAgICAgICAgdmFyIG4sCiAgICAgICAgICAgICAgICAgICAgciwKICAgICAgICAgICAgICAgICAgICBvLAogICAgICAgICAgICAgICAgICAgIGkgPSAwOyhuID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlT2YgPSAwOwogICAgICAgICAgICAgICAgfSkucHJvdG90eXBlLnZhbHVlT2YgPSAwLCByID0gbmV3IG4oKTtmb3IgKG8gaW4gcikgZC5jYWxsKHIsIG8pICYmIGkrKztyZXR1cm4gbiA9IHIgPSBudWxsLCBpID8geSA9IDIgPT0gaSA/IGZ1bmN0aW9uICh0LCBlKSB7CiAgICAgICAgICAgICAgICAgIHZhciBuLAogICAgICAgICAgICAgICAgICAgICAgciA9IHt9LAogICAgICAgICAgICAgICAgICAgICAgbyA9IGIuY2FsbCh0KSA9PSBrO2ZvciAobiBpbiB0KSBvICYmICJwcm90b3R5cGUiID09IG4gfHwgZC5jYWxsKHIsIG4pIHx8ICEocltuXSA9IDEpIHx8ICFkLmNhbGwodCwgbikgfHwgZShuKTsKICAgICAgICAgICAgICAgIH0gOiBmdW5jdGlvbiAodCwgZSkgewogICAgICAgICAgICAgICAgICB2YXIgbiwKICAgICAgICAgICAgICAgICAgICAgIHIsCiAgICAgICAgICAgICAgICAgICAgICBvID0gYi5jYWxsKHQpID09IGs7Zm9yIChuIGluIHQpIG8gJiYgInByb3RvdHlwZSIgPT0gbiB8fCAhZC5jYWxsKHQsIG4pIHx8IChyID0gImNvbnN0cnVjdG9yIiA9PT0gbikgfHwgZShuKTsociB8fCBkLmNhbGwodCwgbiA9ICJjb25zdHJ1Y3RvciIpKSAmJiBlKG4pOwogICAgICAgICAgICAgICAgfSA6IChyID0gWyJ2YWx1ZU9mIiwgInRvU3RyaW5nIiwgInRvTG9jYWxlU3RyaW5nIiwgInByb3BlcnR5SXNFbnVtZXJhYmxlIiwgImlzUHJvdG90eXBlT2YiLCAiaGFzT3duUHJvcGVydHkiLCAiY29uc3RydWN0b3IiXSwgeSA9IGZ1bmN0aW9uICh0LCBlKSB7CiAgICAgICAgICAgICAgICAgIHZhciBuLAogICAgICAgICAgICAgICAgICAgICAgbywKICAgICAgICAgICAgICAgICAgICAgIGkgPSBiLmNhbGwodCkgPT0gaywKICAgICAgICAgICAgICAgICAgICAgIGEgPSAhaSAmJiAiZnVuY3Rpb24iICE9IHR5cGVvZiB0LmNvbnN0cnVjdG9yICYmIHNbdHlwZW9mIHQuaGFzT3duUHJvcGVydHldICYmIHQuaGFzT3duUHJvcGVydHkgfHwgZDtmb3IgKG4gaW4gdCkgaSAmJiAicHJvdG90eXBlIiA9PSBuIHx8ICFhLmNhbGwodCwgbikgfHwgZShuKTtmb3IgKG8gPSByLmxlbmd0aDsgbiA9IHJbLS1vXTsgYS5jYWxsKHQsIG4pICYmIGUobikpOwogICAgICAgICAgICAgICAgfSksIHkodCwgZSk7CiAgICAgICAgICAgICAgfSwgIW4oImpzb24tc3RyaW5naWZ5IikpKSB7CiAgICAgICAgICAgICAgICB2YXIgaiA9IHsgOTI6ICJcXFxcIiwgMzQ6ICdcXCInLCA4OiAiXFxiIiwgMTI6ICJcXGYiLCAxMDogIlxcbiIsIDEzOiAiXFxyIiwgOTogIlxcdCIgfSwKICAgICAgICAgICAgICAgICAgICBQID0gIjAwMDAwMCIsCiAgICAgICAgICAgICAgICAgICAgTiA9IGZ1bmN0aW9uIE4odCwgZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gKFAgKyAoZSB8fCAwKSkuc2xpY2UoLXQpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBSID0gIlxcdTAwIiwKICAgICAgICAgICAgICAgICAgICBEID0gZnVuY3Rpb24gRCh0KSB7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSAnIicsIG4gPSAwLCByID0gdC5sZW5ndGgsIG8gPSAhUyB8fCByID4gMTAsIGkgPSBvICYmIChTID8gdC5zcGxpdCgiIikgOiB0KTsgciA+IG47IG4rKykgewogICAgICAgICAgICAgICAgICAgIHZhciBzID0gdC5jaGFyQ29kZUF0KG4pO3N3aXRjaCAocykge2Nhc2UgODpjYXNlIDk6Y2FzZSAxMDpjYXNlIDEyOmNhc2UgMTM6Y2FzZSAzNDpjYXNlIDkyOgogICAgICAgICAgICAgICAgICAgICAgICBlICs9IGpbc107YnJlYWs7ZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDMyID4gcykgewogICAgICAgICAgICAgICAgICAgICAgICAgIGUgKz0gUiArIE4oMiwgcy50b1N0cmluZygxNikpO2JyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9ZSArPSBvID8gaVtuXSA6IHQuY2hhckF0KG4pO30KICAgICAgICAgICAgICAgICAgfXJldHVybiBlICsgJyInOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBVID0gZnVuY3Rpb24gVSh0LCBlLCBuLCByLCBvLCBpLCBzKSB7CiAgICAgICAgICAgICAgICAgIHZhciBhLCBjLCBwLCB1LCBoLCBsLCBtLCB2LCB3LCBrLCBTLCBPLCBqLCBQLCBSLCBxO3RyeSB7CiAgICAgICAgICAgICAgICAgICAgYSA9IGVbdF07CiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEwpIHt9aWYgKCJvYmplY3QiID09IHR5cGVvZiBhICYmIGEpIGlmICgoYyA9IGIuY2FsbChhKSwgYyAhPSB4IHx8IGQuY2FsbChhLCAidG9KU09OIikpKSAiZnVuY3Rpb24iID09IHR5cGVvZiBhLnRvSlNPTiAmJiAoYyAhPSBBICYmIGMgIT0gXyAmJiBjICE9IEIgfHwgZC5jYWxsKGEsICJ0b0pTT04iKSkgJiYgKGEgPSBhLnRvSlNPTih0KSk7ZWxzZSBpZiAoYSA+IC0xIC8gMCAmJiAxIC8gMCA+IGEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoVCkgewogICAgICAgICAgICAgICAgICAgICAgZm9yIChoID0gRShhIC8gODY0ZTUpLCBwID0gRShoIC8gMzY1LjI0MjUpICsgMTk3MCAtIDE7IFQocCArIDEsIDApIDw9IGg7IHArKyk7Zm9yICh1ID0gRSgoaCAtIFQocCwgMCkpIC8gMzAuNDIpOyBUKHAsIHUgKyAxKSA8PSBoOyB1KyspO2ggPSAxICsgaCAtIFQocCwgdSksIGwgPSAoYSAlIDg2NGU1ICsgODY0ZTUpICUgODY0ZTUsIG0gPSBFKGwgLyAzNmU1KSAlIDI0LCB2ID0gRShsIC8gNmU0KSAlIDYwLCB3ID0gRShsIC8gMWUzKSAlIDYwLCBrID0gbCAlIDFlMzsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgcCA9IGEuZ2V0VVRDRnVsbFllYXIoKSwgdSA9IGEuZ2V0VVRDTW9udGgoKSwgaCA9IGEuZ2V0VVRDRGF0ZSgpLCBtID0gYS5nZXRVVENIb3VycygpLCB2ID0gYS5nZXRVVENNaW51dGVzKCksIHcgPSBhLmdldFVUQ1NlY29uZHMoKSwgayA9IGEuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7YSA9ICgwID49IHAgfHwgcCA+PSAxZTQgPyAoMCA+IHAgPyAiLSIgOiAiKyIpICsgTig2LCAwID4gcCA/IC1wIDogcCkgOiBOKDQsIHApKSArICItIiArIE4oMiwgdSArIDEpICsgIi0iICsgTigyLCBoKSArICJUIiArIE4oMiwgbSkgKyAiOiIgKyBOKDIsIHYpICsgIjoiICsgTigyLCB3KSArICIuIiArIE4oMywgaykgKyAiWiI7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBhID0gbnVsbDtpZiAoKG4gJiYgKGEgPSBuLmNhbGwoZSwgdCwgYSkpLCBudWxsID09PSBhKSkgcmV0dXJuICJudWxsIjtpZiAoKGMgPSBiLmNhbGwoYSksIGMgPT0gQykpIHJldHVybiAiIiArIGE7aWYgKGMgPT0gQSkgcmV0dXJuIGEgPiAtMSAvIDAgJiYgMSAvIDAgPiBhID8gIiIgKyBhIDogIm51bGwiO2lmIChjID09IF8pIHJldHVybiBEKCIiICsgYSk7aWYgKCJvYmplY3QiID09IHR5cGVvZiBhKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChQID0gcy5sZW5ndGg7IFAtLTspIGlmIChzW1BdID09PSBhKSB0aHJvdyBmKCk7aWYgKChzLnB1c2goYSksIFMgPSBbXSwgUiA9IGksIGkgKz0gbywgYyA9PSBCKSkgewogICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMCwgUCA9IGEubGVuZ3RoOyBQID4gajsgaisrKSBPID0gVShqLCBhLCBuLCByLCBvLCBpLCBzKSwgUy5wdXNoKE8gPT09IGcgPyAibnVsbCIgOiBPKTtxID0gUy5sZW5ndGggPyBvID8gIltcbiIgKyBpICsgUy5qb2luKCIsXG4iICsgaSkgKyAiXG4iICsgUiArICJdIiA6ICJbIiArIFMuam9pbigiLCIpICsgIl0iIDogIltdIjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeShyIHx8IGEsIGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IFUodCwgYSwgbiwgciwgbywgaSwgcyk7ZSAhPT0gZyAmJiBTLnB1c2goRCh0KSArICI6IiArIChvID8gIiAiIDogIiIpICsgZSk7CiAgICAgICAgICAgICAgICAgICAgfSksIHEgPSBTLmxlbmd0aCA/IG8gPyAie1xuIiArIGkgKyBTLmpvaW4oIixcbiIgKyBpKSArICJcbiIgKyBSICsgIn0iIDogInsiICsgUy5qb2luKCIsIikgKyAifSIgOiAie30iO3JldHVybiBzLnBvcCgpLCBxOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9O2Uuc3RyaW5naWZ5ID0gZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgdmFyIHIsIG8sIGksIGE7aWYgKHNbdHlwZW9mIGVdICYmIGUpIGlmICgoYSA9IGIuY2FsbChlKSkgPT0gaykgbyA9IGU7ZWxzZSBpZiAoYSA9PSBCKSB7CiAgICAgICAgICAgICAgICAgICAgaSA9IHt9O2ZvciAodmFyIGMsIHAgPSAwLCB1ID0gZS5sZW5ndGg7IHUgPiBwOyBjID0gZVtwKytdLCBhID0gYi5jYWxsKGMpLCAoYSA9PSBfIHx8IGEgPT0gQSkgJiYgKGlbY10gPSAxKSk7CiAgICAgICAgICAgICAgICAgIH1pZiAobikgaWYgKChhID0gYi5jYWxsKG4pKSA9PSBBKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKChuIC09IG4gJSAxKSA+IDApIGZvciAociA9ICIiLCBuID4gMTAgJiYgKG4gPSAxMCk7IHIubGVuZ3RoIDwgbjsgciArPSAiICIpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgYSA9PSBfICYmIChyID0gbi5sZW5ndGggPD0gMTAgPyBuIDogbi5zbGljZSgwLCAxMCkpO3JldHVybiBVKCIiLCAoYyA9IHt9LCBjWyIiXSA9IHQsIGMpLCBvLCBpLCByLCAiIiwgW10pOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB9aWYgKCFuKCJqc29uLXBhcnNlIikpIHsKICAgICAgICAgICAgICAgIHZhciBxLAogICAgICAgICAgICAgICAgICAgIEwsCiAgICAgICAgICAgICAgICAgICAgTSA9IGkuZnJvbUNoYXJDb2RlLAogICAgICAgICAgICAgICAgICAgIEkgPSB7IDkyOiAiXFwiLCAzNDogJyInLCA0NzogIi8iLCA5ODogIlxiIiwgMTE2OiAiCSIsIDExMDogIlxuIiwgMTAyOiAiXGYiLCAxMTQ6ICJcciIgfSwKICAgICAgICAgICAgICAgICAgICBIID0gZnVuY3Rpb24gSCgpIHsKICAgICAgICAgICAgICAgICAgdGhyb3cgKHEgPSBMID0gbnVsbCwgdSgpKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgSiA9IGZ1bmN0aW9uIEooKSB7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIHQsIGUsIG4sIHIsIG8sIGkgPSBMLCBzID0gaS5sZW5ndGg7IHMgPiBxOykgc3dpdGNoIChvID0gaS5jaGFyQ29kZUF0KHEpKSB7Y2FzZSA5OmNhc2UgMTA6Y2FzZSAxMzpjYXNlIDMyOgogICAgICAgICAgICAgICAgICAgICAgcSsrO2JyZWFrO2Nhc2UgMTIzOmNhc2UgMTI1OmNhc2UgOTE6Y2FzZSA5MzpjYXNlIDU4OmNhc2UgNDQ6CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9IFMgPyBpLmNoYXJBdChxKSA6IGlbcV0sIHErKywgdDtjYXNlIDM0OgogICAgICAgICAgICAgICAgICAgICAgZm9yICh0ID0gIkAiLCBxKys7IHMgPiBxOykgaWYgKChvID0gaS5jaGFyQ29kZUF0KHEpLCAzMiA+IG8pKSBIKCk7ZWxzZSBpZiAoOTIgPT0gbykgc3dpdGNoIChvID0gaS5jaGFyQ29kZUF0KCsrcSkpIHtjYXNlIDkyOmNhc2UgMzQ6Y2FzZSA0NzpjYXNlIDk4OmNhc2UgMTE2OmNhc2UgMTEwOmNhc2UgMTAyOmNhc2UgMTE0OgogICAgICAgICAgICAgICAgICAgICAgICAgIHQgKz0gSVtvXSwgcSsrO2JyZWFrO2Nhc2UgMTE3OgogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZSA9ICsrcSwgbiA9IHEgKyA0OyBuID4gcTsgcSsrKSBvID0gaS5jaGFyQ29kZUF0KHEpLCBvID49IDQ4ICYmIDU3ID49IG8gfHwgbyA+PSA5NyAmJiAxMDIgPj0gbyB8fCBvID49IDY1ICYmIDcwID49IG8gfHwgSCgpO3QgKz0gTSgiMHgiICsgaS5zbGljZShlLCBxKSk7YnJlYWs7ZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgICBIKCk7fSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDM0ID09IG8pIGJyZWFrO2ZvciAobyA9IGkuY2hhckNvZGVBdChxKSwgZSA9IHE7IG8gPj0gMzIgJiYgOTIgIT0gbyAmJiAzNCAhPSBvOykgbyA9IGkuY2hhckNvZGVBdCgrK3EpO3QgKz0gaS5zbGljZShlLCBxKTsKICAgICAgICAgICAgICAgICAgICAgIH1pZiAoMzQgPT0gaS5jaGFyQ29kZUF0KHEpKSByZXR1cm4gcSsrLCB0O0goKTtkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgaWYgKChlID0gcSwgNDUgPT0gbyAmJiAociA9ICEwLCBvID0gaS5jaGFyQ29kZUF0KCsrcSkpLCBvID49IDQ4ICYmIDU3ID49IG8pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoNDggPT0gbyAmJiAobyA9IGkuY2hhckNvZGVBdChxICsgMSksIG8gPj0gNDggJiYgNTcgPj0gbykgJiYgSCgpLCByID0gITE7IHMgPiBxICYmIChvID0gaS5jaGFyQ29kZUF0KHEpLCBvID49IDQ4ICYmIDU3ID49IG8pOyBxKyspO2lmICg0NiA9PSBpLmNoYXJDb2RlQXQocSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG4gPSArK3E7IHMgPiBuICYmIChvID0gaS5jaGFyQ29kZUF0KG4pLCBvID49IDQ4ICYmIDU3ID49IG8pOyBuKyspO24gPT0gcSAmJiBIKCksIHEgPSBuOwogICAgICAgICAgICAgICAgICAgICAgICB9aWYgKChvID0gaS5jaGFyQ29kZUF0KHEpLCAxMDEgPT0gbyB8fCA2OSA9PSBvKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobyA9IGkuY2hhckNvZGVBdCgrK3EpLCAoNDMgPT0gbyB8fCA0NSA9PSBvKSAmJiBxKyssIG4gPSBxOyBzID4gbiAmJiAobyA9IGkuY2hhckNvZGVBdChuKSwgbyA+PSA0OCAmJiA1NyA+PSBvKTsgbisrKTtuID09IHEgJiYgSCgpLCBxID0gbjsKICAgICAgICAgICAgICAgICAgICAgICAgfXJldHVybiAraS5zbGljZShlLCBxKTsKICAgICAgICAgICAgICAgICAgICAgIH1pZiAoKHIgJiYgSCgpLCAidHJ1ZSIgPT0gaS5zbGljZShxLCBxICsgNCkpKSByZXR1cm4gcSArPSA0LCAhMDtpZiAoImZhbHNlIiA9PSBpLnNsaWNlKHEsIHEgKyA1KSkgcmV0dXJuIHEgKz0gNSwgITE7aWYgKCJudWxsIiA9PSBpLnNsaWNlKHEsIHEgKyA0KSkgcmV0dXJuIHEgKz0gNCwgbnVsbDtIKCk7fXJldHVybiAiJCI7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHogPSBmdW5jdGlvbiB6KHQpIHsKICAgICAgICAgICAgICAgICAgdmFyIGUsIG47aWYgKCgiJCIgPT0gdCAmJiBIKCksICJzdHJpbmciID09IHR5cGVvZiB0KSkgewogICAgICAgICAgICAgICAgICAgIGlmICgiQCIgPT0gKFMgPyB0LmNoYXJBdCgwKSA6IHRbMF0pKSByZXR1cm4gdC5zbGljZSgxKTtpZiAoIlsiID09IHQpIHsKICAgICAgICAgICAgICAgICAgICAgIGZvciAoZSA9IFtdOyB0ID0gSigpLCAiXSIgIT0gdDsgbiB8fCAobiA9ICEwKSkgbiAmJiAoIiwiID09IHQgPyAodCA9IEooKSwgIl0iID09IHQgJiYgSCgpKSA6IEgoKSksICIsIiA9PSB0ICYmIEgoKSwgZS5wdXNoKHoodCkpO3JldHVybiBlOwogICAgICAgICAgICAgICAgICAgIH1pZiAoInsiID09IHQpIHsKICAgICAgICAgICAgICAgICAgICAgIGZvciAoZSA9IHt9OyB0ID0gSigpLCAifSIgIT0gdDsgbiB8fCAobiA9ICEwKSkgbiAmJiAoIiwiID09IHQgPyAodCA9IEooKSwgIn0iID09IHQgJiYgSCgpKSA6IEgoKSksICgiLCIgPT0gdCB8fCAic3RyaW5nIiAhPSB0eXBlb2YgdCB8fCAiQCIgIT0gKFMgPyB0LmNoYXJBdCgwKSA6IHRbMF0pIHx8ICI6IiAhPSBKKCkpICYmIEgoKSwgZVt0LnNsaWNlKDEpXSA9IHooSigpKTtyZXR1cm4gZTsKICAgICAgICAgICAgICAgICAgICB9SCgpOwogICAgICAgICAgICAgICAgICB9cmV0dXJuIHQ7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFggPSBmdW5jdGlvbiBYKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgdmFyIHIgPSBGKHQsIGUsIG4pO3IgPT09IGcgPyBkZWxldGUgdFtlXSA6IHRbZV0gPSByOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBGID0gZnVuY3Rpb24gRih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgIHZhciByLAogICAgICAgICAgICAgICAgICAgICAgbyA9IHRbZV07aWYgKCJvYmplY3QiID09IHR5cGVvZiBvICYmIG8pIGlmIChiLmNhbGwobykgPT0gQikgZm9yIChyID0gby5sZW5ndGg7IHItLTspIFgobywgciwgbik7ZWxzZSB5KG8sIGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgICAgICAgICAgWChvLCB0LCBuKTsKICAgICAgICAgICAgICAgICAgfSk7cmV0dXJuIG4uY2FsbCh0LCBlLCBvKTsKICAgICAgICAgICAgICAgIH07ZS5wYXJzZSA9IGZ1bmN0aW9uICh0LCBlKSB7CiAgICAgICAgICAgICAgICAgIHZhciBuLCByO3JldHVybiBxID0gMCwgTCA9ICIiICsgdCwgbiA9IHooSigpKSwgIiQiICE9IEooKSAmJiBIKCksIHEgPSBMID0gbnVsbCwgZSAmJiBiLmNhbGwoZSkgPT0gayA/IEYoKHIgPSB7fSwgclsiIl0gPSBuLCByKSwgIiIsIGUpIDogbjsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9cmV0dXJuIGUucnVuSW5Db250ZXh0ID0gbywgZTsKICAgICAgICAgIH12YXIgaSA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIHQgJiYgdC5hbWQsCiAgICAgICAgICAgICAgcyA9IHsgImZ1bmN0aW9uIjogITAsIG9iamVjdDogITAgfSwKICAgICAgICAgICAgICBhID0gc1t0eXBlb2Ygcl0gJiYgciAmJiAhci5ub2RlVHlwZSAmJiByLAogICAgICAgICAgICAgIGMgPSBzW3R5cGVvZiB3aW5kb3ddICYmIHdpbmRvdyB8fCB0aGlzLAogICAgICAgICAgICAgIHAgPSBhICYmIHNbdHlwZW9mIG5dICYmIG4gJiYgIW4ubm9kZVR5cGUgJiYgIm9iamVjdCIgPT0gdHlwZW9mIGUgJiYgZTtpZiAoKCFwIHx8IHAuZ2xvYmFsICE9PSBwICYmIHAud2luZG93ICE9PSBwICYmIHAuc2VsZiAhPT0gcCB8fCAoYyA9IHApLCBhICYmICFpKSkgbyhjLCBhKTtlbHNlIHsKICAgICAgICAgICAgdmFyIHUgPSBjLkpTT04sCiAgICAgICAgICAgICAgICBmID0gYy5KU09OMywKICAgICAgICAgICAgICAgIGggPSAhMSwKICAgICAgICAgICAgICAgIGwgPSBvKGMsIGMuSlNPTjMgPSB7IG5vQ29uZmxpY3Q6IGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaCB8fCAoaCA9ICEwLCBjLkpTT04gPSB1LCBjLkpTT04zID0gZiwgdSA9IGYgPSBudWxsKSwgbDsKICAgICAgICAgICAgICB9IH0pO2MuSlNPTiA9IHsgcGFyc2U6IGwucGFyc2UsIHN0cmluZ2lmeTogbC5zdHJpbmdpZnkgfTsKICAgICAgICAgIH1pICYmIHQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gbDsKICAgICAgICAgIH0pOwogICAgICAgIH0pLmNhbGwodGhpcyk7CiAgICAgIH0pLmNhbGwodGhpcywgInVuZGVmaW5lZCIgIT0gdHlwZW9mIGdsb2JhbCA/IGdsb2JhbCA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBzZWxmID8gc2VsZiA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiB7fSk7CiAgICB9LCB7fV0sIDMxOiBbZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgZnVuY3Rpb24gcih0KSB7CiAgICAgICAgaWYgKCh0ID0gIiIgKyB0LCAhKHQubGVuZ3RoID4gMWU0KSkpIHsKICAgICAgICAgIHZhciBlID0gL14oKD86XGQrKT9cLj9cZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyh0KTtpZiAoZSkgewogICAgICAgICAgICB2YXIgbiA9IHBhcnNlRmxvYXQoZVsxXSksCiAgICAgICAgICAgICAgICByID0gKGVbMl0gfHwgIm1zIikudG9Mb3dlckNhc2UoKTtzd2l0Y2ggKHIpIHtjYXNlICJ5ZWFycyI6Y2FzZSAieWVhciI6Y2FzZSAieXJzIjpjYXNlICJ5ciI6Y2FzZSAieSI6CiAgICAgICAgICAgICAgICByZXR1cm4gbiAqIGY7Y2FzZSAiZGF5cyI6Y2FzZSAiZGF5IjpjYXNlICJkIjoKICAgICAgICAgICAgICAgIHJldHVybiBuICogdTtjYXNlICJob3VycyI6Y2FzZSAiaG91ciI6Y2FzZSAiaHJzIjpjYXNlICJociI6Y2FzZSAiaCI6CiAgICAgICAgICAgICAgICByZXR1cm4gbiAqIHA7Y2FzZSAibWludXRlcyI6Y2FzZSAibWludXRlIjpjYXNlICJtaW5zIjpjYXNlICJtaW4iOmNhc2UgIm0iOgogICAgICAgICAgICAgICAgcmV0dXJuIG4gKiBjO2Nhc2UgInNlY29uZHMiOmNhc2UgInNlY29uZCI6Y2FzZSAic2VjcyI6Y2FzZSAic2VjIjpjYXNlICJzIjoKICAgICAgICAgICAgICAgIHJldHVybiBuICogYTtjYXNlICJtaWxsaXNlY29uZHMiOmNhc2UgIm1pbGxpc2Vjb25kIjpjYXNlICJtc2VjcyI6Y2FzZSAibXNlYyI6Y2FzZSAibXMiOgogICAgICAgICAgICAgICAgcmV0dXJuIG47fQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfWZ1bmN0aW9uIG8odCkgewogICAgICAgIHJldHVybiB0ID49IHUgPyBNYXRoLnJvdW5kKHQgLyB1KSArICJkIiA6IHQgPj0gcCA/IE1hdGgucm91bmQodCAvIHApICsgImgiIDogdCA+PSBjID8gTWF0aC5yb3VuZCh0IC8gYykgKyAibSIgOiB0ID49IGEgPyBNYXRoLnJvdW5kKHQgLyBhKSArICJzIiA6IHQgKyAibXMiOwogICAgICB9ZnVuY3Rpb24gaSh0KSB7CiAgICAgICAgcmV0dXJuIHModCwgdSwgImRheSIpIHx8IHModCwgcCwgImhvdXIiKSB8fCBzKHQsIGMsICJtaW51dGUiKSB8fCBzKHQsIGEsICJzZWNvbmQiKSB8fCB0ICsgIiBtcyI7CiAgICAgIH1mdW5jdGlvbiBzKHQsIGUsIG4pIHsKICAgICAgICByZXR1cm4gZSA+IHQgPyB2b2lkIDAgOiAxLjUgKiBlID4gdCA/IE1hdGguZmxvb3IodCAvIGUpICsgIiAiICsgbiA6IE1hdGguY2VpbCh0IC8gZSkgKyAiICIgKyBuICsgInMiOwogICAgICB9dmFyIGEgPSAxZTMsCiAgICAgICAgICBjID0gNjAgKiBhLAogICAgICAgICAgcCA9IDYwICogYywKICAgICAgICAgIHUgPSAyNCAqIHAsCiAgICAgICAgICBmID0gMzY1LjI1ICogdTtlLmV4cG9ydHMgPSBmdW5jdGlvbiAodCwgZSkgewogICAgICAgIHJldHVybiBlID0gZSB8fCB7fSwgInN0cmluZyIgPT0gdHlwZW9mIHQgPyByKHQpIDogZVsibG9uZyJdID8gaSh0KSA6IG8odCk7CiAgICAgIH07CiAgICB9LCB7fV0sIDMyOiBbZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgdmFyIG4gPSAvXltcXSw6e31cc10qJC8sCiAgICAgICAgICAgIHIgPSAvXFwoPzpbIlxcXC9iZm5ydF18dVswLTlhLWZBLUZdezR9KS9nLAogICAgICAgICAgICBvID0gLyJbXiJcXFxuXHJdKiJ8dHJ1ZXxmYWxzZXxudWxsfC0/XGQrKD86XC5cZCopPyg/OltlRV1bK1wtXT9cZCspPy9nLAogICAgICAgICAgICBpID0gLyg/Ol58OnwsKSg/OlxzKlxbKSsvZywKICAgICAgICAgICAgcyA9IC9eXHMrLywKICAgICAgICAgICAgYSA9IC9ccyskLztlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuICJzdHJpbmciID09IHR5cGVvZiBlICYmIGUgPyAoZSA9IGUucmVwbGFjZShzLCAiIikucmVwbGFjZShhLCAiIiksIHQuSlNPTiAmJiBKU09OLnBhcnNlID8gSlNPTi5wYXJzZShlKSA6IG4udGVzdChlLnJlcGxhY2UociwgIkAiKS5yZXBsYWNlKG8sICJdIikucmVwbGFjZShpLCAiIikpID8gbmV3IEZ1bmN0aW9uKCJyZXR1cm4gIiArIGUpKCkgOiB2b2lkIDApIDogbnVsbDsKICAgICAgICB9OwogICAgICB9KS5jYWxsKHRoaXMsICJ1bmRlZmluZWQiICE9IHR5cGVvZiBnbG9iYWwgPyBnbG9iYWwgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygc2VsZiA/IHNlbGYgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDoge30pOwogICAgfSwge31dLCAzMzogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIG4uZW5jb2RlID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICB2YXIgZSA9ICIiO2ZvciAodmFyIG4gaW4gdCkgdC5oYXNPd25Qcm9wZXJ0eShuKSAmJiAoZS5sZW5ndGggJiYgKGUgKz0gIiYiKSwgZSArPSBlbmNvZGVVUklDb21wb25lbnQobikgKyAiPSIgKyBlbmNvZGVVUklDb21wb25lbnQodFtuXSkpO3JldHVybiBlOwogICAgICB9LCBuLmRlY29kZSA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgZm9yICh2YXIgZSA9IHt9LCBuID0gdC5zcGxpdCgiJiIpLCByID0gMCwgbyA9IG4ubGVuZ3RoOyBvID4gcjsgcisrKSB7CiAgICAgICAgICB2YXIgaSA9IG5bcl0uc3BsaXQoIj0iKTtlW2RlY29kZVVSSUNvbXBvbmVudChpWzBdKV0gPSBkZWNvZGVVUklDb21wb25lbnQoaVsxXSk7CiAgICAgICAgfXJldHVybiBlOwogICAgICB9OwogICAgfSwge31dLCAzNDogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIHZhciByID0gL14oPzooPyFbXjpAXSs6W146QFwvXSpAKShodHRwfGh0dHBzfHdzfHdzcyk6XC9cLyk/KCg/OigoW146QF0qKSg/OjooW146QF0qKSk/KT9AKT8oKD86W2EtZjAtOV17MCw0fTopezIsN31bYS1mMC05XXswLDR9fFteOlwvPyNdKikoPzo6KFxkKikpPykoKChcLyg/OltePyNdKD8hW14/I1wvXSpcLltePyNcLy5dKyg/Ols/I118JCkpKSpcLz8pPyhbXj8jXC9dKikpKD86XD8oW14jXSopKT8oPzojKC4qKSk/KS8sCiAgICAgICAgICBvID0gWyJzb3VyY2UiLCAicHJvdG9jb2wiLCAiYXV0aG9yaXR5IiwgInVzZXJJbmZvIiwgInVzZXIiLCAicGFzc3dvcmQiLCAiaG9zdCIsICJwb3J0IiwgInJlbGF0aXZlIiwgInBhdGgiLCAiZGlyZWN0b3J5IiwgImZpbGUiLCAicXVlcnkiLCAiYW5jaG9yIl07ZS5leHBvcnRzID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICB2YXIgZSA9IHQsCiAgICAgICAgICAgIG4gPSB0LmluZGV4T2YoIlsiKSwKICAgICAgICAgICAgaSA9IHQuaW5kZXhPZigiXSIpOy0xICE9IG4gJiYgLTEgIT0gaSAmJiAodCA9IHQuc3Vic3RyaW5nKDAsIG4pICsgdC5zdWJzdHJpbmcobiwgaSkucmVwbGFjZSgvOi9nLCAiOyIpICsgdC5zdWJzdHJpbmcoaSwgdC5sZW5ndGgpKTtmb3IgKHZhciBzID0gci5leGVjKHQgfHwgIiIpLCBhID0ge30sIGMgPSAxNDsgYy0tOykgYVtvW2NdXSA9IHNbY10gfHwgIiI7cmV0dXJuIC0xICE9IG4gJiYgLTEgIT0gaSAmJiAoYS5zb3VyY2UgPSBlLCBhLmhvc3QgPSBhLmhvc3Quc3Vic3RyaW5nKDEsIGEuaG9zdC5sZW5ndGggLSAxKS5yZXBsYWNlKC87L2csICI6IiksIGEuYXV0aG9yaXR5ID0gYS5hdXRob3JpdHkucmVwbGFjZSgiWyIsICIiKS5yZXBsYWNlKCJdIiwgIiIpLnJlcGxhY2UoLzsvZywgIjoiKSwgYS5pcHY2dXJpID0gITApLCBhOwogICAgICB9OwogICAgfSwge31dLCAzNTogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIGZ1bmN0aW9uIHIodCwgZSkgewogICAgICAgICJvYmplY3QiID09IHR5cGVvZiB0ICYmIChlID0gdCwgdCA9IHZvaWQgMCksIGUgPSBlIHx8IHt9O3ZhciBuLAogICAgICAgICAgICByID0gbyh0KSwKICAgICAgICAgICAgaSA9IHIuc291cmNlLAogICAgICAgICAgICBwID0gci5pZCwKICAgICAgICAgICAgdSA9IHIucGF0aCwKICAgICAgICAgICAgZiA9IGNbcF0gJiYgdSBpbiBjW3BdLm5zcHMsCiAgICAgICAgICAgIGggPSBlLmZvcmNlTmV3IHx8IGVbImZvcmNlIG5ldyBjb25uZWN0aW9uIl0gfHwgITEgPT09IGUubXVsdGlwbGV4IHx8IGY7cmV0dXJuIGggPyAoYSgiaWdub3Jpbmcgc29ja2V0IGNhY2hlIGZvciAlcyIsIGkpLCBuID0gcyhpLCBlKSkgOiAoY1twXSB8fCAoYSgibmV3IGlvIGluc3RhbmNlIGZvciAlcyIsIGkpLCBjW3BdID0gcyhpLCBlKSksIG4gPSBjW3BdKSwgbi5zb2NrZXQoci5wYXRoKTsKICAgICAgfXZhciBvID0gdCgiLi91cmwiKSwKICAgICAgICAgIGkgPSB0KCJzb2NrZXQuaW8tcGFyc2VyIiksCiAgICAgICAgICBzID0gdCgiLi9tYW5hZ2VyIiksCiAgICAgICAgICBhID0gdCgiZGVidWciKSgic29ja2V0LmlvLWNsaWVudCIpO2UuZXhwb3J0cyA9IG4gPSByO3ZhciBjID0gbi5tYW5hZ2VycyA9IHt9O24ucHJvdG9jb2wgPSBpLnByb3RvY29sLCBuLmNvbm5lY3QgPSByLCBuLk1hbmFnZXIgPSB0KCIuL21hbmFnZXIiKSwgbi5Tb2NrZXQgPSB0KCIuL3NvY2tldCIpOwogICAgfSwgeyAiLi9tYW5hZ2VyIjogMzYsICIuL3NvY2tldCI6IDM4LCAiLi91cmwiOiAzOSwgZGVidWc6IDEwLCAic29ja2V0LmlvLXBhcnNlciI6IDQxIH1dLCAzNjogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIGZ1bmN0aW9uIHIodCwgZSkgewogICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgciA/ICh0ICYmICJvYmplY3QiID09IHR5cGVvZiB0ICYmIChlID0gdCwgdCA9IHZvaWQgMCksIGUgPSBlIHx8IHt9LCBlLnBhdGggPSBlLnBhdGggfHwgIi9zb2NrZXQuaW8iLCB0aGlzLm5zcHMgPSB7fSwgdGhpcy5zdWJzID0gW10sIHRoaXMub3B0cyA9IGUsIHRoaXMucmVjb25uZWN0aW9uKGUucmVjb25uZWN0aW9uICE9PSAhMSksIHRoaXMucmVjb25uZWN0aW9uQXR0ZW1wdHMoZS5yZWNvbm5lY3Rpb25BdHRlbXB0cyB8fCAxIC8gMCksIHRoaXMucmVjb25uZWN0aW9uRGVsYXkoZS5yZWNvbm5lY3Rpb25EZWxheSB8fCAxZTMpLCB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KGUucmVjb25uZWN0aW9uRGVsYXlNYXggfHwgNWUzKSwgdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKGUucmFuZG9taXphdGlvbkZhY3RvciB8fCAuNSksIHRoaXMuYmFja29mZiA9IG5ldyBoKHsgbWluOiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KCksIG1heDogdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLCBqaXR0ZXI6IHRoaXMucmFuZG9taXphdGlvbkZhY3RvcigpIH0pLCB0aGlzLnRpbWVvdXQobnVsbCA9PSBlLnRpbWVvdXQgPyAyZTQgOiBlLnRpbWVvdXQpLCB0aGlzLnJlYWR5U3RhdGUgPSAiY2xvc2VkIiwgdGhpcy51cmkgPSB0LCB0aGlzLmNvbm5lY3RpbmcgPSBbXSwgdGhpcy5sYXN0UGluZyA9IG51bGwsIHRoaXMuZW5jb2RpbmcgPSAhMSwgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXSwgdGhpcy5lbmNvZGVyID0gbmV3IGEuRW5jb2RlcigpLCB0aGlzLmRlY29kZXIgPSBuZXcgYS5EZWNvZGVyKCksIHRoaXMuYXV0b0Nvbm5lY3QgPSBlLmF1dG9Db25uZWN0ICE9PSAhMSwgdm9pZCAodGhpcy5hdXRvQ29ubmVjdCAmJiB0aGlzLm9wZW4oKSkpIDogbmV3IHIodCwgZSk7CiAgICAgIH12YXIgbyA9IHQoImVuZ2luZS5pby1jbGllbnQiKSwKICAgICAgICAgIGkgPSB0KCIuL3NvY2tldCIpLAogICAgICAgICAgcyA9IHQoImNvbXBvbmVudC1lbWl0dGVyIiksCiAgICAgICAgICBhID0gdCgic29ja2V0LmlvLXBhcnNlciIpLAogICAgICAgICAgYyA9IHQoIi4vb24iKSwKICAgICAgICAgIHAgPSB0KCJjb21wb25lbnQtYmluZCIpLAogICAgICAgICAgdSA9IHQoImRlYnVnIikoInNvY2tldC5pby1jbGllbnQ6bWFuYWdlciIpLAogICAgICAgICAgZiA9IHQoImluZGV4b2YiKSwKICAgICAgICAgIGggPSB0KCJiYWNrbzIiKSwKICAgICAgICAgIGwgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2UuZXhwb3J0cyA9IHIsIHIucHJvdG90eXBlLmVtaXRBbGwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpcy5lbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Zm9yICh2YXIgdCBpbiB0aGlzLm5zcHMpIGwuY2FsbCh0aGlzLm5zcHMsIHQpICYmIHRoaXMubnNwc1t0XS5lbWl0LmFwcGx5KHRoaXMubnNwc1t0XSwgYXJndW1lbnRzKTsKICAgICAgfSwgci5wcm90b3R5cGUudXBkYXRlU29ja2V0SWRzID0gZnVuY3Rpb24gKCkgewogICAgICAgIGZvciAodmFyIHQgaW4gdGhpcy5uc3BzKSBsLmNhbGwodGhpcy5uc3BzLCB0KSAmJiAodGhpcy5uc3BzW3RdLmlkID0gdGhpcy5lbmdpbmUuaWQpOwogICAgICB9LCBzKHIucHJvdG90eXBlKSwgci5wcm90b3R5cGUucmVjb25uZWN0aW9uID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl9yZWNvbm5lY3Rpb24gPSAhIXQsIHRoaXMpIDogdGhpcy5fcmVjb25uZWN0aW9uOwogICAgICB9LCByLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMgPSB0LCB0aGlzKSA6IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzOwogICAgICB9LCByLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25EZWxheSA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhpcy5fcmVjb25uZWN0aW9uRGVsYXkgPSB0LCB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldE1pbih0KSwgdGhpcykgOiB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheTsKICAgICAgfSwgci5wcm90b3R5cGUucmFuZG9taXphdGlvbkZhY3RvciA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhpcy5fcmFuZG9taXphdGlvbkZhY3RvciA9IHQsIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0Sml0dGVyKHQpLCB0aGlzKSA6IHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3I7CiAgICAgIH0sIHIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5TWF4ID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHQsIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0TWF4KHQpLCB0aGlzKSA6IHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4OwogICAgICB9LCByLnByb3RvdHlwZS50aW1lb3V0ID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl90aW1lb3V0ID0gdCwgdGhpcykgOiB0aGlzLl90aW1lb3V0OwogICAgICB9LCByLnByb3RvdHlwZS5tYXliZVJlY29ubmVjdE9uT3BlbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAhdGhpcy5yZWNvbm5lY3RpbmcgJiYgdGhpcy5fcmVjb25uZWN0aW9uICYmIDAgPT09IHRoaXMuYmFja29mZi5hdHRlbXB0cyAmJiB0aGlzLnJlY29ubmVjdCgpOwogICAgICB9LCByLnByb3RvdHlwZS5vcGVuID0gci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgaWYgKCh1KCJyZWFkeVN0YXRlICVzIiwgdGhpcy5yZWFkeVN0YXRlKSwgfnRoaXMucmVhZHlTdGF0ZS5pbmRleE9mKCJvcGVuIikpKSByZXR1cm4gdGhpczt1KCJvcGVuaW5nICVzIiwgdGhpcy51cmkpLCB0aGlzLmVuZ2luZSA9IG8odGhpcy51cmksIHRoaXMub3B0cyk7dmFyIGUgPSB0aGlzLmVuZ2luZSwKICAgICAgICAgICAgbiA9IHRoaXM7dGhpcy5yZWFkeVN0YXRlID0gIm9wZW5pbmciLCB0aGlzLnNraXBSZWNvbm5lY3QgPSAhMTt2YXIgciA9IGMoZSwgIm9wZW4iLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBuLm9ub3BlbigpLCB0ICYmIHQoKTsKICAgICAgICB9KSwKICAgICAgICAgICAgaSA9IGMoZSwgImVycm9yIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIGlmICgodSgiY29ubmVjdF9lcnJvciIpLCBuLmNsZWFudXAoKSwgbi5yZWFkeVN0YXRlID0gImNsb3NlZCIsIG4uZW1pdEFsbCgiY29ubmVjdF9lcnJvciIsIGUpLCB0KSkgewogICAgICAgICAgICB2YXIgciA9IG5ldyBFcnJvcigiQ29ubmVjdGlvbiBlcnJvciIpO3IuZGF0YSA9IGUsIHQocik7CiAgICAgICAgICB9IGVsc2Ugbi5tYXliZVJlY29ubmVjdE9uT3BlbigpOwogICAgICAgIH0pO2lmICghMSAhPT0gdGhpcy5fdGltZW91dCkgewogICAgICAgICAgdmFyIHMgPSB0aGlzLl90aW1lb3V0O3UoImNvbm5lY3QgYXR0ZW1wdCB3aWxsIHRpbWVvdXQgYWZ0ZXIgJWQiLCBzKTt2YXIgYSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB1KCJjb25uZWN0IGF0dGVtcHQgdGltZWQgb3V0IGFmdGVyICVkIiwgcyksIHIuZGVzdHJveSgpLCBlLmNsb3NlKCksIGUuZW1pdCgiZXJyb3IiLCAidGltZW91dCIpLCBuLmVtaXRBbGwoImNvbm5lY3RfdGltZW91dCIsIHMpOwogICAgICAgICAgfSwgcyk7dGhpcy5zdWJzLnB1c2goeyBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkgewogICAgICAgICAgICAgIGNsZWFyVGltZW91dChhKTsKICAgICAgICAgICAgfSB9KTsKICAgICAgICB9cmV0dXJuIHRoaXMuc3Vicy5wdXNoKHIpLCB0aGlzLnN1YnMucHVzaChpKSwgdGhpczsKICAgICAgfSwgci5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkgewogICAgICAgIHUoIm9wZW4iKSwgdGhpcy5jbGVhbnVwKCksIHRoaXMucmVhZHlTdGF0ZSA9ICJvcGVuIiwgdGhpcy5lbWl0KCJvcGVuIik7dmFyIHQgPSB0aGlzLmVuZ2luZTt0aGlzLnN1YnMucHVzaChjKHQsICJkYXRhIiwgcCh0aGlzLCAib25kYXRhIikpKSwgdGhpcy5zdWJzLnB1c2goYyh0LCAicGluZyIsIHAodGhpcywgIm9ucGluZyIpKSksIHRoaXMuc3Vicy5wdXNoKGModCwgInBvbmciLCBwKHRoaXMsICJvbnBvbmciKSkpLCB0aGlzLnN1YnMucHVzaChjKHQsICJlcnJvciIsIHAodGhpcywgIm9uZXJyb3IiKSkpLCB0aGlzLnN1YnMucHVzaChjKHQsICJjbG9zZSIsIHAodGhpcywgIm9uY2xvc2UiKSkpLCB0aGlzLnN1YnMucHVzaChjKHRoaXMuZGVjb2RlciwgImRlY29kZWQiLCBwKHRoaXMsICJvbmRlY29kZWQiKSkpOwogICAgICB9LCByLnByb3RvdHlwZS5vbnBpbmcgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpcy5sYXN0UGluZyA9IG5ldyBEYXRlKCksIHRoaXMuZW1pdEFsbCgicGluZyIpOwogICAgICB9LCByLnByb3RvdHlwZS5vbnBvbmcgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhpcy5lbWl0QWxsKCJwb25nIiwgbmV3IERhdGUoKSAtIHRoaXMubGFzdFBpbmcpOwogICAgICB9LCByLnByb3RvdHlwZS5vbmRhdGEgPSBmdW5jdGlvbiAodCkgewogICAgICAgIHRoaXMuZGVjb2Rlci5hZGQodCk7CiAgICAgIH0sIHIucHJvdG90eXBlLm9uZGVjb2RlZCA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgdGhpcy5lbWl0KCJwYWNrZXQiLCB0KTsKICAgICAgfSwgci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgdSgiZXJyb3IiLCB0KSwgdGhpcy5lbWl0QWxsKCJlcnJvciIsIHQpOwogICAgICB9LCByLnByb3RvdHlwZS5zb2NrZXQgPSBmdW5jdGlvbiAodCkgewogICAgICAgIGZ1bmN0aW9uIGUoKSB7CiAgICAgICAgICB+ZihyLmNvbm5lY3RpbmcsIG4pIHx8IHIuY29ubmVjdGluZy5wdXNoKG4pOwogICAgICAgIH12YXIgbiA9IHRoaXMubnNwc1t0XTtpZiAoIW4pIHsKICAgICAgICAgIG4gPSBuZXcgaSh0aGlzLCB0KSwgdGhpcy5uc3BzW3RdID0gbjt2YXIgciA9IHRoaXM7bi5vbigiY29ubmVjdGluZyIsIGUpLCBuLm9uKCJjb25uZWN0IiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBuLmlkID0gci5lbmdpbmUuaWQ7CiAgICAgICAgICB9KSwgdGhpcy5hdXRvQ29ubmVjdCAmJiBlKCk7CiAgICAgICAgfXJldHVybiBuOwogICAgICB9LCByLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICB2YXIgZSA9IGYodGhpcy5jb25uZWN0aW5nLCB0KTt+ZSAmJiB0aGlzLmNvbm5lY3Rpbmcuc3BsaWNlKGUsIDEpLCB0aGlzLmNvbm5lY3RpbmcubGVuZ3RoIHx8IHRoaXMuY2xvc2UoKTsKICAgICAgfSwgci5wcm90b3R5cGUucGFja2V0ID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICB1KCJ3cml0aW5nIHBhY2tldCAlaiIsIHQpO3ZhciBlID0gdGhpcztlLmVuY29kaW5nID8gZS5wYWNrZXRCdWZmZXIucHVzaCh0KSA6IChlLmVuY29kaW5nID0gITAsIHRoaXMuZW5jb2Rlci5lbmNvZGUodCwgZnVuY3Rpb24gKG4pIHsKICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgbi5sZW5ndGg7IHIrKykgZS5lbmdpbmUud3JpdGUobltyXSwgdC5vcHRpb25zKTtlLmVuY29kaW5nID0gITEsIGUucHJvY2Vzc1BhY2tldFF1ZXVlKCk7CiAgICAgICAgfSkpOwogICAgICB9LCByLnByb3RvdHlwZS5wcm9jZXNzUGFja2V0UXVldWUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKHRoaXMucGFja2V0QnVmZmVyLmxlbmd0aCA+IDAgJiYgIXRoaXMuZW5jb2RpbmcpIHsKICAgICAgICAgIHZhciB0ID0gdGhpcy5wYWNrZXRCdWZmZXIuc2hpZnQoKTt0aGlzLnBhY2tldCh0KTsKICAgICAgICB9CiAgICAgIH0sIHIucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdSgiY2xlYW51cCIpO2ZvciAodmFyIHQ7IHQgPSB0aGlzLnN1YnMuc2hpZnQoKTspIHQuZGVzdHJveSgpO3RoaXMucGFja2V0QnVmZmVyID0gW10sIHRoaXMuZW5jb2RpbmcgPSAhMSwgdGhpcy5sYXN0UGluZyA9IG51bGwsIHRoaXMuZGVjb2Rlci5kZXN0cm95KCk7CiAgICAgIH0sIHIucHJvdG90eXBlLmNsb3NlID0gci5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB1KCJkaXNjb25uZWN0IiksIHRoaXMuc2tpcFJlY29ubmVjdCA9ICEwLCB0aGlzLnJlY29ubmVjdGluZyA9ICExLCAib3BlbmluZyIgPT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMuY2xlYW51cCgpLCB0aGlzLmJhY2tvZmYucmVzZXQoKSwgdGhpcy5yZWFkeVN0YXRlID0gImNsb3NlZCIsIHRoaXMuZW5naW5lICYmIHRoaXMuZW5naW5lLmNsb3NlKCk7CiAgICAgIH0sIHIucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAodCkgewogICAgICAgIHUoIm9uY2xvc2UiKSwgdGhpcy5jbGVhbnVwKCksIHRoaXMuYmFja29mZi5yZXNldCgpLCB0aGlzLnJlYWR5U3RhdGUgPSAiY2xvc2VkIiwgdGhpcy5lbWl0KCJjbG9zZSIsIHQpLCB0aGlzLl9yZWNvbm5lY3Rpb24gJiYgIXRoaXMuc2tpcFJlY29ubmVjdCAmJiB0aGlzLnJlY29ubmVjdCgpOwogICAgICB9LCByLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKHRoaXMucmVjb25uZWN0aW5nIHx8IHRoaXMuc2tpcFJlY29ubmVjdCkgcmV0dXJuIHRoaXM7dmFyIHQgPSB0aGlzO2lmICh0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPj0gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMpIHUoInJlY29ubmVjdCBmYWlsZWQiKSwgdGhpcy5iYWNrb2ZmLnJlc2V0KCksIHRoaXMuZW1pdEFsbCgicmVjb25uZWN0X2ZhaWxlZCIpLCB0aGlzLnJlY29ubmVjdGluZyA9ICExO2Vsc2UgewogICAgICAgICAgdmFyIGUgPSB0aGlzLmJhY2tvZmYuZHVyYXRpb24oKTt1KCJ3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHQiLCBlKSwgdGhpcy5yZWNvbm5lY3RpbmcgPSAhMDt2YXIgbiA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB0LnNraXBSZWNvbm5lY3QgfHwgKHUoImF0dGVtcHRpbmcgcmVjb25uZWN0IiksIHQuZW1pdEFsbCgicmVjb25uZWN0X2F0dGVtcHQiLCB0LmJhY2tvZmYuYXR0ZW1wdHMpLCB0LmVtaXRBbGwoInJlY29ubmVjdGluZyIsIHQuYmFja29mZi5hdHRlbXB0cyksIHQuc2tpcFJlY29ubmVjdCB8fCB0Lm9wZW4oZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICBlID8gKHUoInJlY29ubmVjdCBhdHRlbXB0IGVycm9yIiksIHQucmVjb25uZWN0aW5nID0gITEsIHQucmVjb25uZWN0KCksIHQuZW1pdEFsbCgicmVjb25uZWN0X2Vycm9yIiwgZS5kYXRhKSkgOiAodSgicmVjb25uZWN0IHN1Y2Nlc3MiKSwgdC5vbnJlY29ubmVjdCgpKTsKICAgICAgICAgICAgfSkpOwogICAgICAgICAgfSwgZSk7dGhpcy5zdWJzLnB1c2goeyBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkgewogICAgICAgICAgICAgIGNsZWFyVGltZW91dChuKTsKICAgICAgICAgICAgfSB9KTsKICAgICAgICB9CiAgICAgIH0sIHIucHJvdG90eXBlLm9ucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciB0ID0gdGhpcy5iYWNrb2ZmLmF0dGVtcHRzO3RoaXMucmVjb25uZWN0aW5nID0gITEsIHRoaXMuYmFja29mZi5yZXNldCgpLCB0aGlzLnVwZGF0ZVNvY2tldElkcygpLCB0aGlzLmVtaXRBbGwoInJlY29ubmVjdCIsIHQpOwogICAgICB9OwogICAgfSwgeyAiLi9vbiI6IDM3LCAiLi9zb2NrZXQiOiAzOCwgYmFja28yOiAzLCAiY29tcG9uZW50LWJpbmQiOiA3LCAiY29tcG9uZW50LWVtaXR0ZXIiOiA4LCBkZWJ1ZzogMTAsICJlbmdpbmUuaW8tY2xpZW50IjogMTIsIGluZGV4b2Y6IDI4LCAic29ja2V0LmlvLXBhcnNlciI6IDQxIH1dLCAzNzogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIGZ1bmN0aW9uIHIodCwgZSwgbikgewogICAgICAgIHJldHVybiB0Lm9uKGUsIG4pLCB7IGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgICAgICAgIHQucmVtb3ZlTGlzdGVuZXIoZSwgbik7CiAgICAgICAgICB9IH07CiAgICAgIH1lLmV4cG9ydHMgPSByOwogICAgfSwge31dLCAzODogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIGZ1bmN0aW9uIHIodCwgZSkgewogICAgICAgIHRoaXMuaW8gPSB0LCB0aGlzLm5zcCA9IGUsIHRoaXMuanNvbiA9IHRoaXMsIHRoaXMuaWRzID0gMCwgdGhpcy5hY2tzID0ge30sIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdLCB0aGlzLnNlbmRCdWZmZXIgPSBbXSwgdGhpcy5jb25uZWN0ZWQgPSAhMSwgdGhpcy5kaXNjb25uZWN0ZWQgPSAhMCwgdGhpcy5pby5hdXRvQ29ubmVjdCAmJiB0aGlzLm9wZW4oKTsKICAgICAgfXZhciBvID0gdCgic29ja2V0LmlvLXBhcnNlciIpLAogICAgICAgICAgaSA9IHQoImNvbXBvbmVudC1lbWl0dGVyIiksCiAgICAgICAgICBzID0gdCgidG8tYXJyYXkiKSwKICAgICAgICAgIGEgPSB0KCIuL29uIiksCiAgICAgICAgICBjID0gdCgiY29tcG9uZW50LWJpbmQiKSwKICAgICAgICAgIHAgPSB0KCJkZWJ1ZyIpKCJzb2NrZXQuaW8tY2xpZW50OnNvY2tldCIpLAogICAgICAgICAgdSA9IHQoImhhcy1iaW5hcnkiKTtlLmV4cG9ydHMgPSBuID0gcjt2YXIgZiA9IHsgY29ubmVjdDogMSwgY29ubmVjdF9lcnJvcjogMSwgY29ubmVjdF90aW1lb3V0OiAxLCBjb25uZWN0aW5nOiAxLCBkaXNjb25uZWN0OiAxLCBlcnJvcjogMSwgcmVjb25uZWN0OiAxLCByZWNvbm5lY3RfYXR0ZW1wdDogMSwgcmVjb25uZWN0X2ZhaWxlZDogMSwgcmVjb25uZWN0X2Vycm9yOiAxLCByZWNvbm5lY3Rpbmc6IDEsIHBpbmc6IDEsIHBvbmc6IDEgfSwKICAgICAgICAgIGggPSBpLnByb3RvdHlwZS5lbWl0O2koci5wcm90b3R5cGUpLCByLnByb3RvdHlwZS5zdWJFdmVudHMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKCF0aGlzLnN1YnMpIHsKICAgICAgICAgIHZhciB0ID0gdGhpcy5pbzt0aGlzLnN1YnMgPSBbYSh0LCAib3BlbiIsIGModGhpcywgIm9ub3BlbiIpKSwgYSh0LCAicGFja2V0IiwgYyh0aGlzLCAib25wYWNrZXQiKSksIGEodCwgImNsb3NlIiwgYyh0aGlzLCAib25jbG9zZSIpKV07CiAgICAgICAgfQogICAgICB9LCByLnByb3RvdHlwZS5vcGVuID0gci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0ZWQgPyB0aGlzIDogKHRoaXMuc3ViRXZlbnRzKCksIHRoaXMuaW8ub3BlbigpLCAib3BlbiIgPT0gdGhpcy5pby5yZWFkeVN0YXRlICYmIHRoaXMub25vcGVuKCksIHRoaXMuZW1pdCgiY29ubmVjdGluZyIpLCB0aGlzKTsKICAgICAgfSwgci5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgdCA9IHMoYXJndW1lbnRzKTtyZXR1cm4gdC51bnNoaWZ0KCJtZXNzYWdlIiksIHRoaXMuZW1pdC5hcHBseSh0aGlzLCB0KSwgdGhpczsKICAgICAgfSwgci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgaWYgKGYuaGFzT3duUHJvcGVydHkodCkpIHJldHVybiBoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRoaXM7dmFyIGUgPSBzKGFyZ3VtZW50cyksCiAgICAgICAgICAgIG4gPSBvLkVWRU5UO3UoZSkgJiYgKG4gPSBvLkJJTkFSWV9FVkVOVCk7dmFyIHIgPSB7IHR5cGU6IG4sIGRhdGE6IGUgfTtyZXR1cm4gci5vcHRpb25zID0ge30sIHIub3B0aW9ucy5jb21wcmVzcyA9ICF0aGlzLmZsYWdzIHx8ICExICE9PSB0aGlzLmZsYWdzLmNvbXByZXNzLCAiZnVuY3Rpb24iID09IHR5cGVvZiBlW2UubGVuZ3RoIC0gMV0gJiYgKHAoImVtaXR0aW5nIHBhY2tldCB3aXRoIGFjayBpZCAlZCIsIHRoaXMuaWRzKSwgdGhpcy5hY2tzW3RoaXMuaWRzXSA9IGUucG9wKCksIHIuaWQgPSB0aGlzLmlkcysrKSwgdGhpcy5jb25uZWN0ZWQgPyB0aGlzLnBhY2tldChyKSA6IHRoaXMuc2VuZEJ1ZmZlci5wdXNoKHIpLCBkZWxldGUgdGhpcy5mbGFncywgdGhpczsKICAgICAgfSwgci5wcm90b3R5cGUucGFja2V0ID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICB0Lm5zcCA9IHRoaXMubnNwLCB0aGlzLmlvLnBhY2tldCh0KTsKICAgICAgfSwgci5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkgewogICAgICAgIHAoInRyYW5zcG9ydCBpcyBvcGVuIC0gY29ubmVjdGluZyIpLCAiLyIgIT0gdGhpcy5uc3AgJiYgdGhpcy5wYWNrZXQoeyB0eXBlOiBvLkNPTk5FQ1QgfSk7CiAgICAgIH0sIHIucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAodCkgewogICAgICAgIHAoImNsb3NlICglcykiLCB0KSwgdGhpcy5jb25uZWN0ZWQgPSAhMSwgdGhpcy5kaXNjb25uZWN0ZWQgPSAhMCwgZGVsZXRlIHRoaXMuaWQsIHRoaXMuZW1pdCgiZGlzY29ubmVjdCIsIHQpOwogICAgICB9LCByLnByb3RvdHlwZS5vbnBhY2tldCA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgaWYgKHQubnNwID09IHRoaXMubnNwKSBzd2l0Y2ggKHQudHlwZSkge2Nhc2Ugby5DT05ORUNUOgogICAgICAgICAgICB0aGlzLm9uY29ubmVjdCgpO2JyZWFrO2Nhc2Ugby5FVkVOVDoKICAgICAgICAgICAgdGhpcy5vbmV2ZW50KHQpO2JyZWFrO2Nhc2Ugby5CSU5BUllfRVZFTlQ6CiAgICAgICAgICAgIHRoaXMub25ldmVudCh0KTticmVhaztjYXNlIG8uQUNLOgogICAgICAgICAgICB0aGlzLm9uYWNrKHQpO2JyZWFrO2Nhc2Ugby5CSU5BUllfQUNLOgogICAgICAgICAgICB0aGlzLm9uYWNrKHQpO2JyZWFrO2Nhc2Ugby5ESVNDT05ORUNUOgogICAgICAgICAgICB0aGlzLm9uZGlzY29ubmVjdCgpO2JyZWFrO2Nhc2Ugby5FUlJPUjoKICAgICAgICAgICAgdGhpcy5lbWl0KCJlcnJvciIsIHQuZGF0YSk7fQogICAgICB9LCByLnByb3RvdHlwZS5vbmV2ZW50ID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICB2YXIgZSA9IHQuZGF0YSB8fCBbXTtwKCJlbWl0dGluZyBldmVudCAlaiIsIGUpLCBudWxsICE9IHQuaWQgJiYgKHAoImF0dGFjaGluZyBhY2sgY2FsbGJhY2sgdG8gZXZlbnQiKSwgZS5wdXNoKHRoaXMuYWNrKHQuaWQpKSksIHRoaXMuY29ubmVjdGVkID8gaC5hcHBseSh0aGlzLCBlKSA6IHRoaXMucmVjZWl2ZUJ1ZmZlci5wdXNoKGUpOwogICAgICB9LCByLnByb3RvdHlwZS5hY2sgPSBmdW5jdGlvbiAodCkgewogICAgICAgIHZhciBlID0gdGhpcywKICAgICAgICAgICAgbiA9ICExO3JldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBpZiAoIW4pIHsKICAgICAgICAgICAgbiA9ICEwO3ZhciByID0gcyhhcmd1bWVudHMpO3AoInNlbmRpbmcgYWNrICVqIiwgcik7dmFyIGkgPSB1KHIpID8gby5CSU5BUllfQUNLIDogby5BQ0s7ZS5wYWNrZXQoeyB0eXBlOiBpLCBpZDogdCwgZGF0YTogciB9KTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9LCByLnByb3RvdHlwZS5vbmFjayA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgdmFyIGUgPSB0aGlzLmFja3NbdC5pZF07ImZ1bmN0aW9uIiA9PSB0eXBlb2YgZSA/IChwKCJjYWxsaW5nIGFjayAlcyB3aXRoICVqIiwgdC5pZCwgdC5kYXRhKSwgZS5hcHBseSh0aGlzLCB0LmRhdGEpLCBkZWxldGUgdGhpcy5hY2tzW3QuaWRdKSA6IHAoImJhZCBhY2sgJXMiLCB0LmlkKTsKICAgICAgfSwgci5wcm90b3R5cGUub25jb25uZWN0ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHRoaXMuY29ubmVjdGVkID0gITAsIHRoaXMuZGlzY29ubmVjdGVkID0gITEsIHRoaXMuZW1pdCgiY29ubmVjdCIpLCB0aGlzLmVtaXRCdWZmZXJlZCgpOwogICAgICB9LCByLnByb3RvdHlwZS5lbWl0QnVmZmVyZWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHQ7Zm9yICh0ID0gMDsgdCA8IHRoaXMucmVjZWl2ZUJ1ZmZlci5sZW5ndGg7IHQrKykgaC5hcHBseSh0aGlzLCB0aGlzLnJlY2VpdmVCdWZmZXJbdF0pO2ZvciAodGhpcy5yZWNlaXZlQnVmZmVyID0gW10sIHQgPSAwOyB0IDwgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aDsgdCsrKSB0aGlzLnBhY2tldCh0aGlzLnNlbmRCdWZmZXJbdF0pO3RoaXMuc2VuZEJ1ZmZlciA9IFtdOwogICAgICB9LCByLnByb3RvdHlwZS5vbmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcCgic2VydmVyIGRpc2Nvbm5lY3QgKCVzKSIsIHRoaXMubnNwKSwgdGhpcy5kZXN0cm95KCksIHRoaXMub25jbG9zZSgiaW8gc2VydmVyIGRpc2Nvbm5lY3QiKTsKICAgICAgfSwgci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAodGhpcy5zdWJzKSB7CiAgICAgICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IHRoaXMuc3Vicy5sZW5ndGg7IHQrKykgdGhpcy5zdWJzW3RdLmRlc3Ryb3koKTt0aGlzLnN1YnMgPSBudWxsOwogICAgICAgIH10aGlzLmlvLmRlc3Ryb3kodGhpcyk7CiAgICAgIH0sIHIucHJvdG90eXBlLmNsb3NlID0gci5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0ZWQgJiYgKHAoInBlcmZvcm1pbmcgZGlzY29ubmVjdCAoJXMpIiwgdGhpcy5uc3ApLCB0aGlzLnBhY2tldCh7IHR5cGU6IG8uRElTQ09OTkVDVCB9KSksIHRoaXMuZGVzdHJveSgpLCB0aGlzLmNvbm5lY3RlZCAmJiB0aGlzLm9uY2xvc2UoImlvIGNsaWVudCBkaXNjb25uZWN0IiksIHRoaXM7CiAgICAgIH0sIHIucHJvdG90eXBlLmNvbXByZXNzID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICByZXR1cm4gdGhpcy5mbGFncyA9IHRoaXMuZmxhZ3MgfHwge30sIHRoaXMuZmxhZ3MuY29tcHJlc3MgPSB0LCB0aGlzOwogICAgICB9OwogICAgfSwgeyAiLi9vbiI6IDM3LCAiY29tcG9uZW50LWJpbmQiOiA3LCAiY29tcG9uZW50LWVtaXR0ZXIiOiA4LCBkZWJ1ZzogMTAsICJoYXMtYmluYXJ5IjogMjYsICJzb2NrZXQuaW8tcGFyc2VyIjogNDEsICJ0by1hcnJheSI6IDQ0IH1dLCAzOTogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIChmdW5jdGlvbiAobikgewogICAgICAgIGZ1bmN0aW9uIHIodCwgZSkgewogICAgICAgICAgdmFyIHIgPSB0LAogICAgICAgICAgICAgIGUgPSBlIHx8IG4ubG9jYXRpb247bnVsbCA9PSB0ICYmICh0ID0gZS5wcm90b2NvbCArICIvLyIgKyBlLmhvc3QpLCAic3RyaW5nIiA9PSB0eXBlb2YgdCAmJiAoIi8iID09IHQuY2hhckF0KDApICYmICh0ID0gIi8iID09IHQuY2hhckF0KDEpID8gZS5wcm90b2NvbCArIHQgOiBlLmhvc3QgKyB0KSwgL14oaHR0cHM/fHdzcz8pOlwvXC8vLnRlc3QodCkgfHwgKGkoInByb3RvY29sLWxlc3MgdXJsICVzIiwgdCksIHQgPSAidW5kZWZpbmVkIiAhPSB0eXBlb2YgZSA/IGUucHJvdG9jb2wgKyAiLy8iICsgdCA6ICJodHRwczovLyIgKyB0KSwgaSgicGFyc2UgJXMiLCB0KSwgciA9IG8odCkpLCByLnBvcnQgfHwgKC9eKGh0dHB8d3MpJC8udGVzdChyLnByb3RvY29sKSA/IHIucG9ydCA9ICI4MCIgOiAvXihodHRwfHdzKXMkLy50ZXN0KHIucHJvdG9jb2wpICYmIChyLnBvcnQgPSAiNDQzIikpLCByLnBhdGggPSByLnBhdGggfHwgIi8iO3ZhciBzID0gLTEgIT09IHIuaG9zdC5pbmRleE9mKCI6IiksCiAgICAgICAgICAgICAgYSA9IHMgPyAiWyIgKyByLmhvc3QgKyAiXSIgOiByLmhvc3Q7cmV0dXJuIHIuaWQgPSByLnByb3RvY29sICsgIjovLyIgKyBhICsgIjoiICsgci5wb3J0LCByLmhyZWYgPSByLnByb3RvY29sICsgIjovLyIgKyBhICsgKGUgJiYgZS5wb3J0ID09IHIucG9ydCA/ICIiIDogIjoiICsgci5wb3J0KSwgcjsKICAgICAgICB9dmFyIG8gPSB0KCJwYXJzZXVyaSIpLAogICAgICAgICAgICBpID0gdCgiZGVidWciKSgic29ja2V0LmlvLWNsaWVudDp1cmwiKTtlLmV4cG9ydHMgPSByOwogICAgICB9KS5jYWxsKHRoaXMsICJ1bmRlZmluZWQiICE9IHR5cGVvZiBnbG9iYWwgPyBnbG9iYWwgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygc2VsZiA/IHNlbGYgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDoge30pOwogICAgfSwgeyBkZWJ1ZzogMTAsIHBhcnNldXJpOiAzNCB9XSwgNDA6IFtmdW5jdGlvbiAodCwgZSwgbikgewogICAgICAoZnVuY3Rpb24gKGUpIHsKICAgICAgICB2YXIgciA9IHQoImlzYXJyYXkiKSwKICAgICAgICAgICAgbyA9IHQoIi4vaXMtYnVmZmVyIik7bi5kZWNvbnN0cnVjdFBhY2tldCA9IGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICBmdW5jdGlvbiBlKHQpIHsKICAgICAgICAgICAgaWYgKCF0KSByZXR1cm4gdDtpZiAobyh0KSkgewogICAgICAgICAgICAgIHZhciBpID0geyBfcGxhY2Vob2xkZXI6ICEwLCBudW06IG4ubGVuZ3RoIH07cmV0dXJuIG4ucHVzaCh0KSwgaTsKICAgICAgICAgICAgfWlmIChyKHQpKSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IG5ldyBBcnJheSh0Lmxlbmd0aCksIGEgPSAwOyBhIDwgdC5sZW5ndGg7IGErKykgc1thXSA9IGUodFthXSk7cmV0dXJuIHM7CiAgICAgICAgICAgIH1pZiAoIm9iamVjdCIgPT0gdHlwZW9mIHQgJiYgISh0IGluc3RhbmNlb2YgRGF0ZSkpIHsKICAgICAgICAgICAgICB2YXIgcyA9IHt9O2ZvciAodmFyIGMgaW4gdCkgc1tjXSA9IGUodFtjXSk7cmV0dXJuIHM7CiAgICAgICAgICAgIH1yZXR1cm4gdDsKICAgICAgICAgIH12YXIgbiA9IFtdLAogICAgICAgICAgICAgIGkgPSB0LmRhdGEsCiAgICAgICAgICAgICAgcyA9IHQ7cmV0dXJuIHMuZGF0YSA9IGUoaSksIHMuYXR0YWNobWVudHMgPSBuLmxlbmd0aCwgeyBwYWNrZXQ6IHMsIGJ1ZmZlcnM6IG4gfTsKICAgICAgICB9LCBuLnJlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24gKHQsIGUpIHsKICAgICAgICAgIGZ1bmN0aW9uIG4odCkgewogICAgICAgICAgICBpZiAodCAmJiB0Ll9wbGFjZWhvbGRlcikgewogICAgICAgICAgICAgIHZhciBvID0gZVt0Lm51bV07cmV0dXJuIG87CiAgICAgICAgICAgIH1pZiAocih0KSkgewogICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdC5sZW5ndGg7IGkrKykgdFtpXSA9IG4odFtpXSk7cmV0dXJuIHQ7CiAgICAgICAgICAgIH1pZiAodCAmJiAib2JqZWN0IiA9PSB0eXBlb2YgdCkgewogICAgICAgICAgICAgIGZvciAodmFyIHMgaW4gdCkgdFtzXSA9IG4odFtzXSk7cmV0dXJuIHQ7CiAgICAgICAgICAgIH1yZXR1cm4gdDsKICAgICAgICAgIH1yZXR1cm4gdC5kYXRhID0gbih0LmRhdGEpLCB0LmF0dGFjaG1lbnRzID0gdm9pZCAwLCB0OwogICAgICAgIH0sIG4ucmVtb3ZlQmxvYnMgPSBmdW5jdGlvbiAodCwgbikgewogICAgICAgICAgZnVuY3Rpb24gaSh0LCBjLCBwKSB7CiAgICAgICAgICAgIGlmICghdCkgcmV0dXJuIHQ7aWYgKGUuQmxvYiAmJiB0IGluc3RhbmNlb2YgQmxvYiB8fCBlLkZpbGUgJiYgdCBpbnN0YW5jZW9mIEZpbGUpIHsKICAgICAgICAgICAgICBzKys7dmFyIHUgPSBuZXcgRmlsZVJlYWRlcigpO3Uub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcCA/IHBbY10gPSB0aGlzLnJlc3VsdCA6IGEgPSB0aGlzLnJlc3VsdCwgLS1zIHx8IG4oYSk7CiAgICAgICAgICAgICAgfSwgdS5yZWFkQXNBcnJheUJ1ZmZlcih0KTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyKHQpKSBmb3IgKHZhciBmID0gMDsgZiA8IHQubGVuZ3RoOyBmKyspIGkodFtmXSwgZiwgdCk7ZWxzZSBpZiAodCAmJiAib2JqZWN0IiA9PSB0eXBlb2YgdCAmJiAhbyh0KSkgZm9yICh2YXIgaCBpbiB0KSBpKHRbaF0sIGgsIHQpOwogICAgICAgICAgfXZhciBzID0gMCwKICAgICAgICAgICAgICBhID0gdDtpKGEpLCBzIHx8IG4oYSk7CiAgICAgICAgfTsKICAgICAgfSkuY2FsbCh0aGlzLCAidW5kZWZpbmVkIiAhPSB0eXBlb2YgZ2xvYmFsID8gZ2xvYmFsIDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIHNlbGYgPyBzZWxmIDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIHdpbmRvdyA/IHdpbmRvdyA6IHt9KTsKICAgIH0sIHsgIi4vaXMtYnVmZmVyIjogNDIsIGlzYXJyYXk6IDI5IH1dLCA0MTogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIGZ1bmN0aW9uIHIoKSB7fWZ1bmN0aW9uIG8odCkgewogICAgICAgIHZhciBlID0gIiIsCiAgICAgICAgICAgIHIgPSAhMTtyZXR1cm4gZSArPSB0LnR5cGUsIChuLkJJTkFSWV9FVkVOVCA9PSB0LnR5cGUgfHwgbi5CSU5BUllfQUNLID09IHQudHlwZSkgJiYgKGUgKz0gdC5hdHRhY2htZW50cywgZSArPSAiLSIpLCB0Lm5zcCAmJiAiLyIgIT0gdC5uc3AgJiYgKHIgPSAhMCwgZSArPSB0Lm5zcCksIG51bGwgIT0gdC5pZCAmJiAociAmJiAoZSArPSAiLCIsIHIgPSAhMSksIGUgKz0gdC5pZCksIG51bGwgIT0gdC5kYXRhICYmIChyICYmIChlICs9ICIsIiksIGUgKz0gZi5zdHJpbmdpZnkodC5kYXRhKSksIHUoImVuY29kZWQgJWogYXMgJXMiLCB0LCBlKSwgZTsKICAgICAgfWZ1bmN0aW9uIGkodCwgZSkgewogICAgICAgIGZ1bmN0aW9uIG4odCkgewogICAgICAgICAgdmFyIG4gPSBsLmRlY29uc3RydWN0UGFja2V0KHQpLAogICAgICAgICAgICAgIHIgPSBvKG4ucGFja2V0KSwKICAgICAgICAgICAgICBpID0gbi5idWZmZXJzO2kudW5zaGlmdChyKSwgZShpKTsKICAgICAgICB9bC5yZW1vdmVCbG9icyh0LCBuKTsKICAgICAgfWZ1bmN0aW9uIHMoKSB7CiAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDsKICAgICAgfWZ1bmN0aW9uIGEodCkgewogICAgICAgIHZhciBlID0ge30sCiAgICAgICAgICAgIHIgPSAwO2lmICgoZS50eXBlID0gTnVtYmVyKHQuY2hhckF0KDApKSwgbnVsbCA9PSBuLnR5cGVzW2UudHlwZV0pKSByZXR1cm4gcCgpO2lmIChuLkJJTkFSWV9FVkVOVCA9PSBlLnR5cGUgfHwgbi5CSU5BUllfQUNLID09IGUudHlwZSkgewogICAgICAgICAgZm9yICh2YXIgbyA9ICIiOyAiLSIgIT0gdC5jaGFyQXQoKytyKSAmJiAobyArPSB0LmNoYXJBdChyKSwgciAhPSB0Lmxlbmd0aCk7KTtpZiAobyAhPSBOdW1iZXIobykgfHwgIi0iICE9IHQuY2hhckF0KHIpKSB0aHJvdyBuZXcgRXJyb3IoIklsbGVnYWwgYXR0YWNobWVudHMiKTtlLmF0dGFjaG1lbnRzID0gTnVtYmVyKG8pOwogICAgICAgIH1pZiAoIi8iID09IHQuY2hhckF0KHIgKyAxKSkgZm9yIChlLm5zcCA9ICIiOyArK3I7KSB7CiAgICAgICAgICB2YXIgaSA9IHQuY2hhckF0KHIpO2lmICgiLCIgPT0gaSkgYnJlYWs7aWYgKChlLm5zcCArPSBpLCByID09IHQubGVuZ3RoKSkgYnJlYWs7CiAgICAgICAgfSBlbHNlIGUubnNwID0gIi8iO3ZhciBzID0gdC5jaGFyQXQociArIDEpO2lmICgiIiAhPT0gcyAmJiBOdW1iZXIocykgPT0gcykgewogICAgICAgICAgZm9yIChlLmlkID0gIiI7ICsrcjspIHsKICAgICAgICAgICAgdmFyIGkgPSB0LmNoYXJBdChyKTtpZiAobnVsbCA9PSBpIHx8IE51bWJlcihpKSAhPSBpKSB7CiAgICAgICAgICAgICAgLS1yO2JyZWFrOwogICAgICAgICAgICB9aWYgKChlLmlkICs9IHQuY2hhckF0KHIpLCByID09IHQubGVuZ3RoKSkgYnJlYWs7CiAgICAgICAgICB9ZS5pZCA9IE51bWJlcihlLmlkKTsKICAgICAgICB9aWYgKHQuY2hhckF0KCsrcikpIHRyeSB7CiAgICAgICAgICBlLmRhdGEgPSBmLnBhcnNlKHQuc3Vic3RyKHIpKTsKICAgICAgICB9IGNhdGNoIChhKSB7CiAgICAgICAgICByZXR1cm4gcCgpOwogICAgICAgIH1yZXR1cm4gdSgiZGVjb2RlZCAlcyBhcyAlaiIsIHQsIGUpLCBlOwogICAgICB9ZnVuY3Rpb24gYyh0KSB7CiAgICAgICAgdGhpcy5yZWNvblBhY2sgPSB0LCB0aGlzLmJ1ZmZlcnMgPSBbXTsKICAgICAgfWZ1bmN0aW9uIHAodCkgewogICAgICAgIHJldHVybiB7IHR5cGU6IG4uRVJST1IsIGRhdGE6ICJwYXJzZXIgZXJyb3IiIH07CiAgICAgIH12YXIgdSA9IHQoImRlYnVnIikoInNvY2tldC5pby1wYXJzZXIiKSwKICAgICAgICAgIGYgPSB0KCJqc29uMyIpLAogICAgICAgICAgaCA9ICh0KCJpc2FycmF5IiksIHQoImNvbXBvbmVudC1lbWl0dGVyIikpLAogICAgICAgICAgbCA9IHQoIi4vYmluYXJ5IiksCiAgICAgICAgICBkID0gdCgiLi9pcy1idWZmZXIiKTtuLnByb3RvY29sID0gNCwgbi50eXBlcyA9IFsiQ09OTkVDVCIsICJESVNDT05ORUNUIiwgIkVWRU5UIiwgIkJJTkFSWV9FVkVOVCIsICJBQ0siLCAiQklOQVJZX0FDSyIsICJFUlJPUiJdLCBuLkNPTk5FQ1QgPSAwLCBuLkRJU0NPTk5FQ1QgPSAxLCBuLkVWRU5UID0gMiwgbi5BQ0sgPSAzLCBuLkVSUk9SID0gNCwgbi5CSU5BUllfRVZFTlQgPSA1LCBuLkJJTkFSWV9BQ0sgPSA2LCBuLkVuY29kZXIgPSByLCBuLkRlY29kZXIgPSBzLCByLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiAodCwgZSkgewogICAgICAgIGlmICgodSgiZW5jb2RpbmcgcGFja2V0ICVqIiwgdCksIG4uQklOQVJZX0VWRU5UID09IHQudHlwZSB8fCBuLkJJTkFSWV9BQ0sgPT0gdC50eXBlKSkgaSh0LCBlKTtlbHNlIHsKICAgICAgICAgIHZhciByID0gbyh0KTtlKFtyXSk7CiAgICAgICAgfQogICAgICB9LCBoKHMucHJvdG90eXBlKSwgcy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHQpIHsKICAgICAgICB2YXIgZTtpZiAoInN0cmluZyIgPT0gdHlwZW9mIHQpIGUgPSBhKHQpLCBuLkJJTkFSWV9FVkVOVCA9PSBlLnR5cGUgfHwgbi5CSU5BUllfQUNLID09IGUudHlwZSA/ICh0aGlzLnJlY29uc3RydWN0b3IgPSBuZXcgYyhlKSwgMCA9PT0gdGhpcy5yZWNvbnN0cnVjdG9yLnJlY29uUGFjay5hdHRhY2htZW50cyAmJiB0aGlzLmVtaXQoImRlY29kZWQiLCBlKSkgOiB0aGlzLmVtaXQoImRlY29kZWQiLCBlKTtlbHNlIHsKICAgICAgICAgIGlmICghZCh0KSAmJiAhdC5iYXNlNjQpIHRocm93IG5ldyBFcnJvcigiVW5rbm93biB0eXBlOiAiICsgdCk7aWYgKCF0aGlzLnJlY29uc3RydWN0b3IpIHRocm93IG5ldyBFcnJvcigiZ290IGJpbmFyeSBkYXRhIHdoZW4gbm90IHJlY29uc3RydWN0aW5nIGEgcGFja2V0Iik7ZSA9IHRoaXMucmVjb25zdHJ1Y3Rvci50YWtlQmluYXJ5RGF0YSh0KSwgZSAmJiAodGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbCwgdGhpcy5lbWl0KCJkZWNvZGVkIiwgZSkpOwogICAgICAgIH0KICAgICAgfSwgcy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IgJiYgdGhpcy5yZWNvbnN0cnVjdG9yLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTsKICAgICAgfSwgYy5wcm90b3R5cGUudGFrZUJpbmFyeURhdGEgPSBmdW5jdGlvbiAodCkgewogICAgICAgIGlmICgodGhpcy5idWZmZXJzLnB1c2godCksIHRoaXMuYnVmZmVycy5sZW5ndGggPT0gdGhpcy5yZWNvblBhY2suYXR0YWNobWVudHMpKSB7CiAgICAgICAgICB2YXIgZSA9IGwucmVjb25zdHJ1Y3RQYWNrZXQodGhpcy5yZWNvblBhY2ssIHRoaXMuYnVmZmVycyk7cmV0dXJuIHRoaXMuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpLCBlOwogICAgICAgIH1yZXR1cm4gbnVsbDsKICAgICAgfSwgYy5wcm90b3R5cGUuZmluaXNoZWRSZWNvbnN0cnVjdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB0aGlzLnJlY29uUGFjayA9IG51bGwsIHRoaXMuYnVmZmVycyA9IFtdOwogICAgICB9OwogICAgfSwgeyAiLi9iaW5hcnkiOiA0MCwgIi4vaXMtYnVmZmVyIjogNDIsICJjb21wb25lbnQtZW1pdHRlciI6IDQzLCBkZWJ1ZzogMTAsIGlzYXJyYXk6IDI5LCBqc29uMzogMzAgfV0sIDQyOiBbZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgZnVuY3Rpb24gbihlKSB7CiAgICAgICAgICByZXR1cm4gdC5CdWZmZXIgJiYgdC5CdWZmZXIuaXNCdWZmZXIoZSkgfHwgdC5BcnJheUJ1ZmZlciAmJiBlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI7CiAgICAgICAgfWUuZXhwb3J0cyA9IG47CiAgICAgIH0pLmNhbGwodGhpcywgInVuZGVmaW5lZCIgIT0gdHlwZW9mIGdsb2JhbCA/IGdsb2JhbCA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBzZWxmID8gc2VsZiA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiB7fSk7CiAgICB9LCB7fV0sIDQzOiBbZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgYXJndW1lbnRzWzRdWzIyXVswXS5hcHBseShuLCBhcmd1bWVudHMpOwogICAgfSwgeyBkdXA6IDIyIH1dLCA0NDogW2Z1bmN0aW9uICh0LCBlLCBuKSB7CiAgICAgIGZ1bmN0aW9uIHIodCwgZSkgewogICAgICAgIHZhciBuID0gW107ZSA9IGUgfHwgMDtmb3IgKHZhciByID0gZSB8fCAwOyByIDwgdC5sZW5ndGg7IHIrKykgbltyIC0gZV0gPSB0W3JdO3JldHVybiBuOwogICAgICB9ZS5leHBvcnRzID0gcjsKICAgIH0sIHt9XSwgNDU6IFtmdW5jdGlvbiAoZSwgbiwgcikgewogICAgICAoZnVuY3Rpb24gKGUpIHsKICAgICAgICAhKGZ1bmN0aW9uIChvKSB7CiAgICAgICAgICBmdW5jdGlvbiBpKHQpIHsKICAgICAgICAgICAgZm9yICh2YXIgZSwgbiwgciA9IFtdLCBvID0gMCwgaSA9IHQubGVuZ3RoOyBpID4gbzspIGUgPSB0LmNoYXJDb2RlQXQobysrKSwgZSA+PSA1NTI5NiAmJiA1NjMxOSA+PSBlICYmIGkgPiBvID8gKG4gPSB0LmNoYXJDb2RlQXQobysrKSwgNTYzMjAgPT0gKDY0NTEyICYgbikgPyByLnB1c2goKCgxMDIzICYgZSkgPDwgMTApICsgKDEwMjMgJiBuKSArIDY1NTM2KSA6IChyLnB1c2goZSksIG8tLSkpIDogci5wdXNoKGUpO3JldHVybiByOwogICAgICAgICAgfWZ1bmN0aW9uIHModCkgewogICAgICAgICAgICBmb3IgKHZhciBlLCBuID0gdC5sZW5ndGgsIHIgPSAtMSwgbyA9ICIiOyArK3IgPCBuOykgZSA9IHRbcl0sIGUgPiA2NTUzNSAmJiAoZSAtPSA2NTUzNiwgbyArPSB3KGUgPj4+IDEwICYgMTAyMyB8IDU1Mjk2KSwgZSA9IDU2MzIwIHwgMTAyMyAmIGUpLCBvICs9IHcoZSk7cmV0dXJuIG87CiAgICAgICAgICB9ZnVuY3Rpb24gYSh0KSB7CiAgICAgICAgICAgIGlmICh0ID49IDU1Mjk2ICYmIDU3MzQzID49IHQpIHRocm93IEVycm9yKCJMb25lIHN1cnJvZ2F0ZSBVKyIgKyB0LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpICsgIiBpcyBub3QgYSBzY2FsYXIgdmFsdWUiKTsKICAgICAgICAgIH1mdW5jdGlvbiBjKHQsIGUpIHsKICAgICAgICAgICAgcmV0dXJuIHcodCA+PiBlICYgNjMgfCAxMjgpOwogICAgICAgICAgfWZ1bmN0aW9uIHAodCkgewogICAgICAgICAgICBpZiAoMCA9PSAoNDI5NDk2NzE2OCAmIHQpKSByZXR1cm4gdyh0KTt2YXIgZSA9ICIiO3JldHVybiAwID09ICg0Mjk0OTY1MjQ4ICYgdCkgPyBlID0gdyh0ID4+IDYgJiAzMSB8IDE5MikgOiAwID09ICg0Mjk0OTAxNzYwICYgdCkgPyAoYSh0KSwgZSA9IHcodCA+PiAxMiAmIDE1IHwgMjI0KSwgZSArPSBjKHQsIDYpKSA6IDAgPT0gKDQyOTI4NzAxNDQgJiB0KSAmJiAoZSA9IHcodCA+PiAxOCAmIDcgfCAyNDApLCBlICs9IGModCwgMTIpLCBlICs9IGModCwgNikpLCBlICs9IHcoNjMgJiB0IHwgMTI4KTsKICAgICAgICAgIH1mdW5jdGlvbiB1KHQpIHsKICAgICAgICAgICAgZm9yICh2YXIgZSwgbiA9IGkodCksIHIgPSBuLmxlbmd0aCwgbyA9IC0xLCBzID0gIiI7ICsrbyA8IHI7KSBlID0gbltvXSwgcyArPSBwKGUpO3JldHVybiBzOwogICAgICAgICAgfWZ1bmN0aW9uIGYoKSB7CiAgICAgICAgICAgIGlmICh2ID49IGIpIHRocm93IEVycm9yKCJJbnZhbGlkIGJ5dGUgaW5kZXgiKTt2YXIgdCA9IDI1NSAmIG1bdl07aWYgKCh2KyssIDEyOCA9PSAoMTkyICYgdCkpKSByZXR1cm4gNjMgJiB0O3Rocm93IEVycm9yKCJJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlIik7CiAgICAgICAgICB9ZnVuY3Rpb24gaCgpIHsKICAgICAgICAgICAgdmFyIHQsIGUsIG4sIHIsIG87aWYgKHYgPiBiKSB0aHJvdyBFcnJvcigiSW52YWxpZCBieXRlIGluZGV4Iik7aWYgKHYgPT0gYikgcmV0dXJuICExO2lmICgodCA9IDI1NSAmIG1bdl0sIHYrKywgMCA9PSAoMTI4ICYgdCkpKSByZXR1cm4gdDtpZiAoMTkyID09ICgyMjQgJiB0KSkgewogICAgICAgICAgICAgIHZhciBlID0gZigpO2lmICgobyA9ICgzMSAmIHQpIDw8IDYgfCBlLCBvID49IDEyOCkpIHJldHVybiBvO3Rocm93IEVycm9yKCJJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlIik7CiAgICAgICAgICAgIH1pZiAoMjI0ID09ICgyNDAgJiB0KSkgewogICAgICAgICAgICAgIGlmICgoZSA9IGYoKSwgbiA9IGYoKSwgbyA9ICgxNSAmIHQpIDw8IDEyIHwgZSA8PCA2IHwgbiwgbyA+PSAyMDQ4KSkgcmV0dXJuIGEobyksIG87dGhyb3cgRXJyb3IoIkludmFsaWQgY29udGludWF0aW9uIGJ5dGUiKTsKICAgICAgICAgICAgfWlmICgyNDAgPT0gKDI0OCAmIHQpICYmIChlID0gZigpLCBuID0gZigpLCByID0gZigpLCBvID0gKDE1ICYgdCkgPDwgMTggfCBlIDw8IDEyIHwgbiA8PCA2IHwgciwgbyA+PSA2NTUzNiAmJiAxMTE0MTExID49IG8pKSByZXR1cm4gbzt0aHJvdyBFcnJvcigiSW52YWxpZCBVVEYtOCBkZXRlY3RlZCIpOwogICAgICAgICAgfWZ1bmN0aW9uIGwodCkgewogICAgICAgICAgICBtID0gaSh0KSwgYiA9IG0ubGVuZ3RoLCB2ID0gMDtmb3IgKHZhciBlLCBuID0gW107IChlID0gaCgpKSAhPT0gITE7KSBuLnB1c2goZSk7cmV0dXJuIHMobik7CiAgICAgICAgICB9dmFyIGQgPSAib2JqZWN0IiA9PSB0eXBlb2YgciAmJiByLAogICAgICAgICAgICAgIHkgPSAib2JqZWN0IiA9PSB0eXBlb2YgbiAmJiBuICYmIG4uZXhwb3J0cyA9PSBkICYmIG4sCiAgICAgICAgICAgICAgZyA9ICJvYmplY3QiID09IHR5cGVvZiBlICYmIGU7KGcuZ2xvYmFsID09PSBnIHx8IGcud2luZG93ID09PSBnKSAmJiAobyA9IGcpO3ZhciBtLAogICAgICAgICAgICAgIGIsCiAgICAgICAgICAgICAgdiwKICAgICAgICAgICAgICB3ID0gU3RyaW5nLmZyb21DaGFyQ29kZSwKICAgICAgICAgICAgICBrID0geyB2ZXJzaW9uOiAiMi4wLjAiLCBlbmNvZGU6IHUsIGRlY29kZTogbCB9O2lmICgiZnVuY3Rpb24iID09IHR5cGVvZiB0ICYmICJvYmplY3QiID09IHR5cGVvZiB0LmFtZCAmJiB0LmFtZCkgdChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBrOwogICAgICAgICAgfSk7ZWxzZSBpZiAoZCAmJiAhZC5ub2RlVHlwZSkgaWYgKHkpIHkuZXhwb3J0cyA9IGs7ZWxzZSB7CiAgICAgICAgICAgIHZhciB4ID0ge30sCiAgICAgICAgICAgICAgICBBID0geC5oYXNPd25Qcm9wZXJ0eTtmb3IgKHZhciBfIGluIGspIEEuY2FsbChrLCBfKSAmJiAoZFtfXSA9IGtbX10pOwogICAgICAgICAgfSBlbHNlIG8udXRmOCA9IGs7CiAgICAgICAgfSkodGhpcyk7CiAgICAgIH0pLmNhbGwodGhpcywgInVuZGVmaW5lZCIgIT0gdHlwZW9mIGdsb2JhbCA/IGdsb2JhbCA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBzZWxmID8gc2VsZiA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiB7fSk7CiAgICB9LCB7fV0sIDQ2OiBbZnVuY3Rpb24gKHQsIGUsIG4pIHsKICAgICAgInVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIodCkgewogICAgICAgIHZhciBlID0gIiI7ZG8gZSA9IGFbdCAlIGNdICsgZSwgdCA9IE1hdGguZmxvb3IodCAvIGMpOyB3aGlsZSAodCA+IDApO3JldHVybiBlOwogICAgICB9ZnVuY3Rpb24gbyh0KSB7CiAgICAgICAgdmFyIGUgPSAwO2ZvciAoZiA9IDA7IGYgPCB0Lmxlbmd0aDsgZisrKSBlID0gZSAqIGMgKyBwW3QuY2hhckF0KGYpXTtyZXR1cm4gZTsKICAgICAgfWZ1bmN0aW9uIGkoKSB7CiAgICAgICAgdmFyIHQgPSByKCtuZXcgRGF0ZSgpKTtyZXR1cm4gdCAhPT0gcyA/ICh1ID0gMCwgcyA9IHQpIDogdCArICIuIiArIHIodSsrKTsKICAgICAgfWZvciAodmFyIHMsIGEgPSAiMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotXyIuc3BsaXQoIiIpLCBjID0gNjQsIHAgPSB7fSwgdSA9IDAsIGYgPSAwOyBjID4gZjsgZisrKSBwW2FbZl1dID0gZjtpLmVuY29kZSA9IHIsIGkuZGVjb2RlID0gbywgZS5leHBvcnRzID0gaTsKICAgIH0sIHt9XSwgNDc6IFtmdW5jdGlvbiAodCwgZSwgbikgewogICAgICAidXNlIHN0cmljdCI7ZnVuY3Rpb24gcih0LCBlKSB7CiAgICAgICAgaWYgKCEodCBpbnN0YW5jZW9mIGUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICAgICAgfWZ1bmN0aW9uIG8odCwgZSwgbikgewogICAgICAgIHJldHVybiB7IG5hbWU6ICJOb2RlanNQcm90b1N0dWIiLCBpbnN0YW5jZTogbmV3IGEodCwgZSwgbikgfTsKICAgICAgfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6ICEwIH0pO3ZhciBpID0gKGZ1bmN0aW9uICgpIHsKICAgICAgICBmdW5jdGlvbiB0KHQsIGUpIHsKICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgZS5sZW5ndGg7IG4rKykgewogICAgICAgICAgICB2YXIgciA9IGVbbl07ci5lbnVtZXJhYmxlID0gci5lbnVtZXJhYmxlIHx8ICExLCByLmNvbmZpZ3VyYWJsZSA9ICEwLCAidmFsdWUiIGluIHIgJiYgKHIud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCByLmtleSwgcik7CiAgICAgICAgICB9CiAgICAgICAgfXJldHVybiBmdW5jdGlvbiAoZSwgbiwgcikgewogICAgICAgICAgcmV0dXJuIG4gJiYgdChlLnByb3RvdHlwZSwgbiksIHIgJiYgdChlLCByKSwgZTsKICAgICAgICB9OwogICAgICB9KSgpO25bImRlZmF1bHQiXSA9IG87dmFyIHMgPSB0KCJzb2NrZXQuaW8tY2xpZW50IiksCiAgICAgICAgICBhID0gKGZ1bmN0aW9uICgpIHsKICAgICAgICBmdW5jdGlvbiB0KGUsIG4sIG8pIHsKICAgICAgICAgIHIodGhpcywgdCk7dmFyIGkgPSB0aGlzO3RoaXMuX2lkID0gMCwgdGhpcy5fcnVudGltZVByb3RvU3R1YlVSTCA9IGUsIHRoaXMuX2J1cyA9IG4sIHRoaXMuX2NvbmZpZyA9IG8sIHRoaXMuX2J1cy5hZGRMaXN0ZW5lcigiKiIsIGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgIGkuX29wZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIGkuX3NvY2suZW1pdCgibWVzc2FnZSIsIEpTT04uc3RyaW5naWZ5KHQpKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9cmV0dXJuIGkodCwgW3sga2V5OiAiY29ubmVjdCIsIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHsKICAgICAgICAgICAgdmFyIHQgPSB0aGlzO3QuX29wZW4oZnVuY3Rpb24gKCkge30pOwogICAgICAgICAgfSB9LCB7IGtleTogImRpc2Nvbm5lY3QiLCB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7CiAgICAgICAgICAgIHZhciB0ID0gdGhpczt0Ll9zb2NrICYmIHQuX3NlbmRDbG9zZSgpOwogICAgICAgICAgfSB9LCB7IGtleTogInBvc3RNZXNzYWdlIiwgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHQpIHsKICAgICAgICAgICAgdGhpcy5fc29jay5zZW5kKEpTT04uc3RyaW5naWZ5KHQpKTsKICAgICAgICAgIH0gfSwgeyBrZXk6ICJfc2VuZE9wZW4iLCB2YWx1ZTogZnVuY3Rpb24gdmFsdWUodCkgewogICAgICAgICAgICB2YXIgZSA9IHRoaXM7ZS5faWQrKzt2YXIgbiA9IHsgaGVhZGVyOiB7IGlkOiBlLl9pZCwgdHlwZTogIm9wZW4iLCBmcm9tOiBlLl9jb25maWcucnVudGltZVVSTCwgdG86ICJtbjovc2Vzc2lvbiIsIHRva2VuSUQ6ICI/PyIgfSB9LAogICAgICAgICAgICAgICAgciA9ICExO2UuX3Nlc3Npb25DYWxsYmFjayA9IGZ1bmN0aW9uIChvKSB7CiAgICAgICAgICAgICAgInJlcGx5IiA9PT0gby5oZWFkZXIudHlwZSAmIG8uaGVhZGVyLmlkID09PSBuLmhlYWRlci5pZCAmJiAociA9ICEwLCAib2siID09PSBvLmJvZHkuY29kZSA/IChlLl9zZW5kU3RhdHVzKCJjb25uZWN0ZWQiKSwgdCgpKSA6IGUuX3NlbmRTdGF0dXMoImRpc2Nvbm5lY3RlZCIsIG8uYm9keS5kZXNjKSk7CiAgICAgICAgICAgIH0sIGUuX3NvY2suc2VuZChKU09OLnN0cmluZ2lmeShuKSksIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHIgfHwgZS5fc2VuZFN0YXR1cygiZGlzY29ubmVjdGVkIiwgIlRpbWVvdXQgZnJvbSBtbjovc2Vzc2lvbiIpOwogICAgICAgICAgICB9LCAzZTMpOwogICAgICAgICAgfSB9LCB7IGtleTogIl9zZW5kQ2xvc2UiLCB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7CiAgICAgICAgICAgIHZhciB0ID0gdGhpczt0Ll9pZCsrO3ZhciBlID0geyBoZWFkZXI6IHsgaWQ6IHQuX2lkLCB0eXBlOiAiY2xvc2UiLCBmcm9tOiB0Ll9jb25maWcucnVudGltZVVSTCwgdG86ICJtbjovc2Vzc2lvbiIsIHRva2VuSUQ6ICI/PyIgfSB9O3QuX3NvY2suc2VuZChKU09OLnN0cmluZ2lmeShlKSk7CiAgICAgICAgICB9IH0sIHsga2V5OiAiX3NlbmRTdGF0dXMiLCB2YWx1ZTogZnVuY3Rpb24gdmFsdWUodCwgZSkgewogICAgICAgICAgICB2YXIgbiA9IHRoaXMsCiAgICAgICAgICAgICAgICByID0geyBoZWFkZXI6IHsgdHlwZTogInVwZGF0ZSIsIGZyb206IG4uX3J1bnRpbWVQcm90b1N0dWJVUkwsIHRvOiBuLl9ydW50aW1lUHJvdG9TdHViVVJMICsgIi9zdGF0dXMiIH0sIGJvZHk6IHsgdmFsdWU6IHQgfSB9O2UgJiYgKHIuYm9keS5kZXNjID0gZSksIG4uX2J1cy5wb3N0TWVzc2FnZShyKTsKICAgICAgICAgIH0gfSwgeyBrZXk6ICJfd2FpdFJlYWR5IiwgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHQpIHsKICAgICAgICAgICAgdmFyIGUgPSB0aGlzOzEgPT09IGUuX3NvY2sucmVhZHlTdGF0ZSA/IHQoKSA6IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIGUuX3dhaXRSZWFkeSh0KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IH0sIHsga2V5OiAiX29wZW4iLCB2YWx1ZTogZnVuY3Rpb24gdmFsdWUodCkgewogICAgICAgICAgICB2YXIgZSA9IHRoaXM7ZS5fc29jayA/IGUuX3dhaXRSZWFkeSh0KSA6IChlLl9zb2NrID0gcyhlLl9jb25maWcudXJsLCB7IGZvcmNlTmV3OiAhMCB9KSwgZS5fc29jay5vbigiY29ubmVjdCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBlLl9zZW5kT3BlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0KCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pLCBlLl9zb2NrLm9uKCJtZXNzYWdlIiwgZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgICBpZiAoIm9iamVjdCIgIT0gdHlwZW9mIHQpIHRyeSB7CiAgICAgICAgICAgICAgICB0ID0gSlNPTi5wYXJzZSh0KTsKICAgICAgICAgICAgICB9IGNhdGNoIChuKSB7CiAgICAgICAgICAgICAgICB0ID0ge307CiAgICAgICAgICAgICAgfXQuaGFzT3duUHJvcGVydHkoImhlYWRlciIpICYmIHQuaGVhZGVyLmhhc093blByb3BlcnR5KCJmcm9tIikgJiYgIm1uOi9zZXNzaW9uIiA9PT0gdC5oZWFkZXIuZnJvbSA/IGUuX3Nlc3Npb25DYWxsYmFjayAmJiBlLl9zZXNzaW9uQ2FsbGJhY2sodCkgOiBlLl9idXMucG9zdE1lc3NhZ2UodCk7CiAgICAgICAgICAgIH0pLCBlLl9zb2NrLm9uKCJkaXNjb25uZWN0IiwgZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgICBlLl9zZW5kU3RhdHVzKCJkaXNjb25uZWN0ZWQiLCB0KSwgZGVsZXRlIGUuX3NvY2s7CiAgICAgICAgICAgIH0pKTsKICAgICAgICAgIH0gfSwgeyBrZXk6ICJjb25maWciLCBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZzsKICAgICAgICAgIH0gfV0pLCB0OwogICAgICB9KSgpO2UuZXhwb3J0cyA9IG5bImRlZmF1bHQiXTsKICAgIH0sIHsgInNvY2tldC5pby1jbGllbnQiOiAzNSB9XSB9LCB7fSwgWzQ3XSkoNDcpOwp9KTsKLy8gdmVyc2lvbjogMC4xLjAKCn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQp9LHt9XX0se30sWzFdKSgxKQp9KTs=",
      "sourceCodeClassname": "NodejsProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "language": "Javascript ECMA5",
    "signature": "",
    "messageSchemas": "",
    "constraints": "",
    "hypertyCapabilities": "",
    "protocolCapabilities": "",
    "policies": "",
    "dataObjects": [],
     "configuration": {
      "url": "wss://msg-node.localhost:9090/ws"
    },
    "accessControlPolicy": "somePolicy"
    
  },
  "VertexProtoStub": {
    "cguid": 1,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of VertxProtoStub",
    "objectName": "VertxProtoStub",
    "sourcePackageURL": "/sourcePackage",
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "VertxProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "constraints": "",
    "hypertyCapabilities": "",
    "protocolCapabilities": "",
    "policies": "",
    "dataObjects": [],
    "configuration": {
      "url": "wss://msg-node.localhost:9090/ws"
    },
    "accessControlPolicy": "somePolicy"
    
  },
  "MatrixProtoStub": {
    "cguid": "1",
    "type": "0",
    "version": "0.1",
    "description": "Description of MatrixProtoStub",
    "objectName": "MatrixProtoStub",
    "sourcePackageURL": "/sourcePackage",
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "MatrixProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "language": "Javascript ECMA5",
    "signature": "",
    "messageSchemas": "",
    "constraints": "",
    "hypertyCapabilities": "",
    "protocolCapabilities": "",
    "policies": "",
    "dataObjects": [],
    "configuration": {
      "homeserver": "matrix1.rethink",
      "messagingnode": "ws://localhost:8001/stub/connect"
    }
  }
}
